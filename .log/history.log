--[ 2022.11.11.13.15.58.079.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.11.13.15.58.793.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml

--[ 2022.11.11.13.15.58.798.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.11.13.15.58.798.1 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    public PSBruteForce() { }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return 0; }

    // return whether the KDTree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2022.11.11.13.15.58.799.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.11.13.15.58.800.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.11.13.15.58.833.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.11.13.15.58.834.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.11.13.15.58.835.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.11.13.15.58.836.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.11.13.15.58.836.1 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.11.13.15.58.837.0 ]--
InitFile: /.cos265


--[ 2022.11.11.13.15.58.837.1 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.11.13.15.58.837.2 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.11.13.15.58.837.3 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.11.13.28.27.633.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.11.13.28.27.906.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/HEAD
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.idx
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.pack
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/P05_KDTrees.iml

--[ 2022.11.11.13.28.27.907.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.11.13.28.27.907.1 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.11.13.28.27.907.2 ]--
InitFile: /.cos265


--[ 2022.11.11.13.28.27.907.3 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.11.13.28.27.908.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.11.13.28.27.908.1 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */
public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    public PSBruteForce() { }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return 0; }

    // return whether the KDTree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2022.11.11.13.28.27.908.2 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.11.13.28.27.908.3 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.11.13.28.27.908.4 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.11.13.28.27.908.5 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.11.13.28.27.909.0 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.11.13.28.27.909.1 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.11.13.28.27.909.2 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.11.13.28.42.015.0 ]--
:/src/PSBruteForce.java
+ 7  
--[ 2022.11.11.13.28.42.081.0 ]--
r 7 
--[ 2022.11.11.13.28.42.123.0 ]--
+ 7 
--[ 2022.11.11.13.28.43.544.0 ]--
+ 7 
--[ 2022.11.11.13.28.56.576.0 ]--
r 8 /
--[ 2022.11.11.13.28.57.099.0 ]--
r 8 /*
--[ 2022.11.11.13.28.58.326.0 ]--
r 8 /
--[ 2022.11.11.13.28.58.714.0 ]--
r 8 //
--[ 2022.11.11.13.28.59.078.0 ]--
r 8 // 
--[ 2022.11.11.13.29.01.020.0 ]--
r 8 // T
--[ 2022.11.11.13.29.01.199.0 ]--
r 8 // Te
--[ 2022.11.11.13.29.01.458.0 ]--
r 8 // Tes
--[ 2022.11.11.13.29.01.665.0 ]--
r 8 // Test
--[ 2022.11.11.13.29.01.756.0 ]--
r 8 // Testi
--[ 2022.11.11.13.29.01.876.0 ]--
r 8 // Testin
--[ 2022.11.11.13.29.01.972.0 ]--
r 8 // Testing
--[ 2022.11.11.13.29.02.066.0 ]--
r 8 // Testing 
--[ 2022.11.11.13.29.06.233.0 ]--
r 8 // Testing G
--[ 2022.11.11.13.29.06.369.0 ]--
r 8 // Testing Gi
--[ 2022.11.11.13.29.06.443.0 ]--
r 8 // Testing Git
--[ 2022.11.11.13.29.07.453.0 ]--
r 8 // Testing Git 
--[ 2022.11.11.13.29.07.646.0 ]--
r 8 // Testing Git -
--[ 2022.11.11.13.29.07.767.0 ]--
r 8 // Testing Git --
--[ 2022.11.11.13.29.08.100.0 ]--
r 8 // Testing Git -- 
--[ 2022.11.11.13.29.08.486.0 ]--
r 8 // Testing Git -- K
--[ 2022.11.11.13.29.08.922.0 ]--
r 8 // Testing Git -- Km
--[ 2022.11.11.13.29.09.096.0 ]--
r 8 // Testing Git -- Kmi
--[ 2022.11.11.13.29.09.251.0 ]--
r 8 // Testing Git -- Kmik
--[ 2022.11.11.13.29.09.520.0 ]--
r 8 // Testing Git -- Kmi
--[ 2022.11.11.13.29.09.647.0 ]--
r 8 // Testing Git -- Km
--[ 2022.11.11.13.29.09.846.0 ]--
r 8 // Testing Git -- K
--[ 2022.11.11.13.29.10.014.0 ]--
r 8 // Testing Git -- 
--[ 2022.11.11.13.29.10.388.0 ]--
r 8 // Testing Git -- k
--[ 2022.11.11.13.29.10.540.0 ]--
r 8 // Testing Git -- km
--[ 2022.11.11.13.29.10.685.0 ]--
r 8 // Testing Git -- kmi
--[ 2022.11.11.13.29.10.853.0 ]--
r 8 // Testing Git -- kmik
--[ 2022.11.11.13.29.10.993.0 ]--
r 8 // Testing Git -- kmike
--[ 2022.11.11.13.29.11.084.0 ]--
r 8 // Testing Git -- kmikel
--[ 2022.11.11.13.29.11.174.0 ]--
r 8 // Testing Git -- kmikels
--[ 2022.11.11.13.31.32.428.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.11.13.31.32.582.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/main
/.git/logs/HEAD
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/main
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
/.git/objects/1a/49d62b998226393c172907eef021434d19be9a
/.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
/.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
/.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
/.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
/.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
/.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.idx
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.pack
/.git/HEAD
/.git/index
/.git/config
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml

--[ 2022.11.11.13.31.32.583.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.11.13.31.32.583.1 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.11.13.31.32.583.2 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.11.13.31.32.583.3 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.11.13.31.32.584.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.11.13.31.32.584.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.11.13.31.32.584.2 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.11.13.31.32.584.3 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */

// Testing Git -- kmikels

public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    public PSBruteForce() { }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return 0; }

    // return whether the KDTree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2022.11.11.13.31.32.584.4 ]--
InitFile: /.cos265


--[ 2022.11.11.13.31.32.584.5 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.11.13.31.32.584.6 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.11.13.31.32.584.7 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }

    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the number of Points in kD-tree
    public int size() { return 0; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.11.13.31.32.584.8 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.11.13.33.58.982.0 ]--
:/src/PSKDTree.java
r 7 public class    PSKDTree<Value> implements PointSearch<Value> {
--[ 2022.11.11.13.33.58.983.0 ]--
UpdateTree (AD): 1 0
+ /.git/refs/heads/main

--[ 2022.11.11.13.34.01.151.0 ]--
r 7 public class PSKDTree<Value> implements PointSearch<Value> {
--[ 2022.11.11.13.34.32.937.0 ]--
r 7 public class    PSKDTree<Value> implements PointSearch<Value> {
--[ 2022.11.11.13.34.34.150.0 ]--
r 7 public class PSKDTree<Value> implements PointSearch<Value> {
--[ 2022.11.11.13.34.56.681.0 ]--
UpdateTree (AD): 23 0
+ /out/production/P05_KDTrees/.donotlog
+ /out/production/P05_KDTrees/algs4.jar
+ /out/production/P05_KDTrees/stdlib.jar
+ /out/production/P05_KDTrees/input1M.txt
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/input100K.txt
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/burgerking.csv
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.11.13.34.56.682.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.11.13.37.22.036.0 ]--
UpdateTree (AD): 1 0
+ /.idea/workspace.xml

--[ 2022.11.11.13.37.22.036.1 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.11.13.38.59.074.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.11.13.42.55.240.0 ]--
r 17     public PSKDTree(    ) { }
--[ 2022.11.11.13.42.56.392.0 ]--
r 17     public PSKDTree() { }
--[ 2022.11.11.13.29.50.882.0 ]--
:/src/PSBruteForce.java
+ 7 
+ 8 // Testing Git -- kmikels
+ 9 
--[ 2022.11.11.13.29.50.959.0 ]--
UpdateTree (AD): 72 0
+ /.git/info/exclude
+ /.git/logs/refs/heads/main
+ /.git/logs/refs/remotes/origin/main
+ /.git/logs/HEAD
+ /.git/refs/heads/main
+ /.git/refs/remotes/origin/main
+ /.git/hooks/update.sample
+ /.git/hooks/pre-push.sample
+ /.git/hooks/commit-msg.sample
+ /.git/hooks/pre-commit.sample
+ /.git/hooks/pre-rebase.sample
+ /.git/hooks/post-update.sample
+ /.git/hooks/pre-receive.sample
+ /.git/hooks/applypatch-msg.sample
+ /.git/hooks/pre-applypatch.sample
+ /.git/hooks/pre-merge-commit.sample
+ /.git/hooks/push-to-checkout.sample
+ /.git/hooks/fsmonitor-watchman.sample
+ /.git/hooks/prepare-commit-msg.sample
+ /.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
+ /.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
+ /.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
+ /.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
+ /.git/objects/0f/05624ad8de377d4bdf3ec1558d477af125661c
+ /.git/objects/11/6f5b50e2bd7e5a645224f577c702fc62092122
+ /.git/objects/1a/49d62b998226393c172907eef021434d19be9a
+ /.git/objects/1f/b9dc988a5179e983b847d789447e3c5fa79e57
+ /.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
+ /.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
+ /.git/objects/30/6f36bddc52f2e08ccf8a41536340870eb1829c
+ /.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
+ /.git/objects/39/5d98ffb25a1aa9df31eb7f0e6c2af2e28bc31d
+ /.git/objects/3c/91061820fd12503e015c3c19cec90b78494358
+ /.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
+ /.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
+ /.git/objects/4f/ce1d86b49521afe1cee4ed1c13b6396ebbc6f3
+ /.git/objects/5c/98b428844d9f7d529e2b6fb918d15bf072f3df
+ /.git/objects/65/427e6010f1b59257bc8ac509401e7eeb2698d4
+ /.git/objects/68/2820a134168b0d23787b376165bef89b511f00
+ /.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
+ /.git/objects/7d/61ee6e1564fdc3e562582a8ca1c55185fd2b09
+ /.git/objects/80/8df08d052527e9a626a08c732fb0fb470708c8
+ /.git/objects/8b/e37e197c873cbcd2952f364d9e3a447bc4e692
+ /.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
+ /.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
+ /.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
+ /.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
+ /.git/objects/aa/90a9d65e85ba8dedaeee57dbca845093794f15
+ /.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
+ /.git/objects/ae/39a65a74d4111e721807c06e27bd6754992fbb
+ /.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
+ /.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
+ /.git/objects/c2/828bc31a68ae45ce1922d19323206b232cbda4
+ /.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
+ /.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
+ /.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
+ /.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
+ /.git/objects/de/c87ed246fc3ca006dddb4db1972a0e1d67919e
+ /.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
+ /.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
+ /.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
+ /.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
+ /.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
+ /.git/objects/ef/89a8450022222b69a62814d66e3f6c8ecb5a60
+ /.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
+ /.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
+ /.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
+ /.git/HEAD
+ /.git/index
+ /.git/config
+ /.git/description
+ /.git/COMMIT_EDITMSG

--[ 2022.11.11.13.29.57.388.0 ]--
UpdateTree (AD): 1 0
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.11.13.29.57.425.0 ]--
UpdateTree (AD): 1 0
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22__1_29_PM__Default_.xml

--[ 2022.11.11.13.30.43.260.0 ]--
UpdateTree (AD): 2 0
+ /.git/ORIG_HEAD
+ /.git/FETCH_HEAD

--[ 2022.11.11.13.40.15.511.0 ]--
:/src/PSKDTree.java
+ 17     public PSKDTree() { 
r 18     }
--[ 2022.11.11.13.40.16.006.0 ]--
+ 18         
--[ 2022.11.11.13.40.25.154.0 ]--
r 15     
--[ 2022.11.11.13.40.25.526.0 ]--
+ 15     
--[ 2022.11.11.13.40.25.818.0 ]--
r 16         
--[ 2022.11.11.13.40.26.525.0 ]--
r 16     
--[ 2022.11.11.13.41.19.526.0 ]--
r 15 
r 16 
r 18     public PSKDTree() {
--[ 2022.11.11.13.42.29.694.0 ]--
r 19         BST<String, Integer> st = new BST<String, Integer>();
--[ 2022.11.11.13.42.56.385.0 ]--
r 19         BST<Pa, Integer> st = new BST<String, Integer>();
--[ 2022.11.11.13.42.56.971.0 ]--
r 19         BST<P, Integer> st = new BST<String, Integer>();
--[ 2022.11.11.13.42.57.517.0 ]--
r 19         BST<Po, Integer> st = new BST<String, Integer>();
--[ 2022.11.11.13.42.57.672.0 ]--
r 19         BST<Poi, Integer> st = new BST<String, Integer>();
--[ 2022.11.11.13.42.57.725.0 ]--
r 19         BST<Poin, Integer> st = new BST<String, Integer>();
--[ 2022.11.11.13.42.57.933.0 ]--
r 19         BST<Point, Integer> st = new BST<String, Integer>();
--[ 2022.11.11.13.42.59.625.0 ]--
r 19         BST<Point, V> st = new BST<String, Integer>();
--[ 2022.11.11.13.42.59.751.0 ]--
r 19         BST<Point, Va> st = new BST<String, Integer>();
--[ 2022.11.11.13.42.59.791.0 ]--
r 19         BST<Point, Val> st = new BST<String, Integer>();
--[ 2022.11.11.13.43.00.043.0 ]--
r 19         BST<Point, Valu> st = new BST<String, Integer>();
--[ 2022.11.11.13.43.00.079.0 ]--
r 19         BST<Point, Value> st = new BST<String, Integer>();
--[ 2022.11.11.13.43.01.661.0 ]--
r 19         BST<Point, Value> st = new BST<P, Integer>();
--[ 2022.11.11.13.43.01.779.0 ]--
r 19         BST<Point, Value> st = new BST<Po, Integer>();
--[ 2022.11.11.13.43.01.887.0 ]--
r 19         BST<Point, Value> st = new BST<Poi, Integer>();
--[ 2022.11.11.13.43.02.039.0 ]--
r 19         BST<Point, Value> st = new BST<Poin, Integer>();
--[ 2022.11.11.13.43.02.312.0 ]--
r 19         BST<Point, Value> st = new BST<Point, Integer>();
--[ 2022.11.11.13.43.03.932.0 ]--
r 19         BST<Point, Value> st = new BST<Point, V>();
--[ 2022.11.11.13.43.04.135.0 ]--
r 19         BST<Point, Value> st = new BST<Point, Va>();
--[ 2022.11.11.13.43.04.328.0 ]--
r 19         BST<Point, Value> st = new BST<Point, Val>();
--[ 2022.11.11.13.43.04.449.0 ]--
r 19         BST<Point, Value> st = new BST<Point, Valu>();
--[ 2022.11.11.13.43.04.551.0 ]--
r 19         BST<Point, Value> st = new BST<Point, Value>();
--[ 2022.11.11.13.43.07.204.0 ]--
r 19         
--[ 2022.11.11.13.43.08.931.0 ]--
r 15 BST<Point, Value> st = new BST<Point, Value>();
--[ 2022.11.11.13.43.09.019.0 ]--
r 15     BST<Point, Value> st = new BST<Point, Value>();
--[ 2022.11.11.13.43.11.360.0 ]--
r 15     BST<Point, Value> s = new BST<Point, Value>();
--[ 2022.11.11.13.43.11.777.0 ]--
r 15     BST<Point, Value>  = new BST<Point, Value>();
--[ 2022.11.11.13.43.32.364.0 ]--
r 15     BST<Point, Value> k = new BST<Point, Value>();
--[ 2022.11.11.13.43.32.551.0 ]--
r 15     BST<Point, Value> ki = new BST<Point, Value>();
--[ 2022.11.11.13.43.32.810.0 ]--
r 15     BST<Point, Value> kid = new BST<Point, Value>();
--[ 2022.11.11.13.43.33.138.0 ]--
r 15     BST<Point, Value> ki = new BST<Point, Value>();
--[ 2022.11.11.13.43.33.284.0 ]--
r 15     BST<Point, Value> k = new BST<Point, Value>();
--[ 2022.11.11.13.43.33.381.0 ]--
r 15     BST<Point, Value> kd = new BST<Point, Value>();
--[ 2022.11.11.13.43.33.621.0 ]--
r 15     BST<Point, Value> kdt = new BST<Point, Value>();
--[ 2022.11.11.13.43.48.111.0 ]--
r 15     BST<Point, Value> kdt; = new BST<Point, Value>();
--[ 2022.11.11.13.43.50.918.0 ]--
r 15     BST<Point, Value> kdt; 
--[ 2022.11.11.13.43.51.897.0 ]--
r 19         k
--[ 2022.11.11.13.43.52.190.0 ]--
r 19         kd
--[ 2022.11.11.13.43.52.959.0 ]--
r 19         kdt
--[ 2022.11.11.13.43.53.077.0 ]--
r 19         kdt=
--[ 2022.11.11.13.43.53.255.0 ]--
r 19         kdt== new BST<Point, Value>();
--[ 2022.11.11.13.43.59.665.0 ]--
r 19         kdt== new BST();
--[ 2022.11.11.13.44.12.650.0 ]--
r 19         kdt== new BST<Point, Value>();
--[ 2022.11.11.13.44.15.316.0 ]--
r 19         kdt= new BST<Point, Value>();
--[ 2022.11.11.13.44.19.219.0 ]--
r 19         kdt = new BST<Point, Value>();
--[ 2022.11.11.13.44.31.105.0 ]--
r 23     public void put(Point p, Value v) {''
--[ 2022.11.11.13.44.39.214.0 ]--
r 23     public void put(Point p, Value v) {'
--[ 2022.11.11.13.44.39.351.0 ]--
r 23     public void put(Point p, Value v) {
--[ 2022.11.11.13.45.33.022.0 ]--
r 15     BST<Point, Value> kdt;
--[ 2022.11.11.13.46.48.583.0 ]--
+ 24         
--[ 2022.11.11.13.46.50.719.0 ]--
r 24         k
--[ 2022.11.11.13.46.51.186.0 ]--
r 24         kd
--[ 2022.11.11.13.46.51.420.0 ]--
r 24         kdt
--[ 2022.11.11.13.46.51.572.0 ]--
r 24         kdt.
--[ 2022.11.11.13.46.52.148.0 ]--
r 24         kdt.p
--[ 2022.11.11.13.46.52.539.0 ]--
r 24         kdt.pu
--[ 2022.11.11.13.46.53.008.0 ]--
r 24         kdt.put
--[ 2022.11.11.13.46.56.733.0 ]--
r 24         kdt.put()
--[ 2022.11.11.13.46.58.718.0 ]--
r 24         kdt.put(p,)
--[ 2022.11.11.13.46.58.944.0 ]--
r 24         kdt.put(p,v)
--[ 2022.11.11.13.47.00.106.0 ]--
r 24         kdt.put(p,v);
--[ 2022.11.11.13.47.11.832.0 ]--
+ 71         
--[ 2022.11.11.13.47.25.921.0 ]--
r 71         P
--[ 2022.11.11.13.47.26.221.0 ]--
r 71         PS
--[ 2022.11.11.13.47.26.558.0 ]--
r 71         PSK
--[ 2022.11.11.13.47.26.883.0 ]--
r 71         PSKD
--[ 2022.11.11.13.47.27.568.0 ]--
r 71         PSKDT
--[ 2022.11.11.13.47.27.893.0 ]--
r 71         PSKDTr
--[ 2022.11.11.13.47.28.401.0 ]--
r 71         PSKDTre
--[ 2022.11.11.13.47.28.941.0 ]--
r 71         PSKDTree
--[ 2022.11.11.13.47.33.880.0 ]--
r 71         PSKDTree<>
--[ 2022.11.11.13.47.34.343.0 ]--
r 71         PSKDTree<i>
--[ 2022.11.11.13.47.34.526.0 ]--
r 71         PSKDTree<in>
--[ 2022.11.11.13.47.34.729.0 ]--
r 71         PSKDTree<int>
--[ 2022.11.11.13.47.36.112.0 ]--
r 71         PSKDTree<int
--[ 2022.11.11.13.47.36.452.0 ]--
r 71         PSKDTree<in
--[ 2022.11.11.13.47.36.587.0 ]--
r 71         PSKDTree<i
--[ 2022.11.11.13.47.36.683.0 ]--
r 71         PSKDTree<
--[ 2022.11.11.13.47.37.110.0 ]--
r 71         PSKDTree<I
--[ 2022.11.11.13.47.37.216.0 ]--
r 71         PSKDTree<In
--[ 2022.11.11.13.47.37.333.0 ]--
r 71         PSKDTree<Int
--[ 2022.11.11.13.47.37.628.0 ]--
r 71         PSKDTree<Inte
--[ 2022.11.11.13.47.37.977.0 ]--
r 71         PSKDTree<Integ
--[ 2022.11.11.13.47.38.136.0 ]--
r 71         PSKDTree<Intege
--[ 2022.11.11.13.47.38.235.0 ]--
r 71         PSKDTree<Integer
--[ 2022.11.11.13.47.38.786.0 ]--
r 71         PSKDTree<Integer>
--[ 2022.11.11.13.47.39.026.0 ]--
r 71         PSKDTree<Integer> 
--[ 2022.11.11.13.47.42.811.0 ]--
r 71         PSKDTree<Integer> =
--[ 2022.11.11.13.47.42.936.0 ]--
r 71         PSKDTree<Integer> = 
--[ 2022.11.11.13.47.43.519.0 ]--
r 71         PSKDTree<Integer> =
--[ 2022.11.11.13.47.43.649.0 ]--
r 71         PSKDTree<Integer> 
--[ 2022.11.11.13.47.43.814.0 ]--
r 71         PSKDTree<Integer>
--[ 2022.11.11.13.47.44.256.0 ]--
r 71         PSKDTree<Integer> 
--[ 2022.11.11.13.47.45.553.0 ]--
r 71         PSKDTree<Integer> t
--[ 2022.11.11.13.47.45.690.0 ]--
r 71         PSKDTree<Integer> te
--[ 2022.11.11.13.47.45.756.0 ]--
r 71         PSKDTree<Integer> tes
--[ 2022.11.11.13.47.45.888.0 ]--
r 71         PSKDTree<Integer> test
--[ 2022.11.11.13.47.46.052.0 ]--
r 71         PSKDTree<Integer> test 
--[ 2022.11.11.13.47.46.165.0 ]--
r 71         PSKDTree<Integer> test =
--[ 2022.11.11.13.47.46.279.0 ]--
r 71         PSKDTree<Integer> test = 
--[ 2022.11.11.13.47.49.153.0 ]--
r 71         PSKDTree<Integer> test = n
--[ 2022.11.11.13.47.49.286.0 ]--
r 71         PSKDTree<Integer> test = ne
--[ 2022.11.11.13.47.49.409.0 ]--
r 71         PSKDTree<Integer> test = new
--[ 2022.11.11.13.47.49.768.0 ]--
r 71         PSKDTree<Integer> test = new 
--[ 2022.11.11.13.47.50.759.0 ]--
r 71         PSKDTree<Integer> test = new P
--[ 2022.11.11.13.47.51.513.0 ]--
r 71         PSKDTree<Integer> test = new PS
--[ 2022.11.11.13.47.52.104.0 ]--
r 71         PSKDTree<Integer> test = new PSK
--[ 2022.11.11.13.47.52.667.0 ]--
r 71         PSKDTree<Integer> test = new PSKD
--[ 2022.11.11.13.47.52.990.0 ]--
r 71         PSKDTree<Integer> test = new PSKDT
--[ 2022.11.11.13.47.53.188.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTr
--[ 2022.11.11.13.47.53.377.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTre
--[ 2022.11.11.13.47.53.544.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree
--[ 2022.11.11.13.47.54.582.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree()
--[ 2022.11.11.13.47.55.849.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(I)
--[ 2022.11.11.13.47.56.019.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(In)
--[ 2022.11.11.13.47.56.499.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Int)
--[ 2022.11.11.13.47.57.091.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Inte)
--[ 2022.11.11.13.47.57.370.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Integ)
--[ 2022.11.11.13.47.57.689.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Intege)
--[ 2022.11.11.13.47.57.753.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Integer)
--[ 2022.11.11.13.48.05.897.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Integer
--[ 2022.11.11.13.48.06.007.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Intege
--[ 2022.11.11.13.48.06.156.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Integ
--[ 2022.11.11.13.48.06.304.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Inte
--[ 2022.11.11.13.48.06.465.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(Int
--[ 2022.11.11.13.48.06.618.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(In
--[ 2022.11.11.13.48.06.781.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(I
--[ 2022.11.11.13.48.06.925.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree(
--[ 2022.11.11.13.48.07.076.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree
--[ 2022.11.11.13.48.07.745.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<>
--[ 2022.11.11.13.48.08.254.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<I>
--[ 2022.11.11.13.48.08.390.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<In>
--[ 2022.11.11.13.48.08.709.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<Int>
--[ 2022.11.11.13.48.09.053.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<Inte>
--[ 2022.11.11.13.48.09.224.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<Integ>
--[ 2022.11.11.13.48.09.368.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<Intege>
--[ 2022.11.11.13.48.09.477.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<Integer>
--[ 2022.11.11.13.48.10.289.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<Integer>()
--[ 2022.11.11.13.48.10.653.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<Integer>();
--[ 2022.11.11.13.48.11.104.0 ]--
r 71         PSKDTree<Integer> test = new PSKDTree<Integer>(); 
--[ 2022.11.11.13.48.15.385.0 ]--
+ 72         
--[ 2022.11.11.13.48.16.435.0 ]--
r 72         t
--[ 2022.11.11.13.48.16.549.0 ]--
r 72         te
--[ 2022.11.11.13.48.16.729.0 ]--
r 72         tes
--[ 2022.11.11.13.48.17.015.0 ]--
r 72         test
--[ 2022.11.11.13.48.17.234.0 ]--
r 72         test.
--[ 2022.11.11.13.48.17.564.0 ]--
r 72         test.p
--[ 2022.11.11.13.48.17.898.0 ]--
r 72         test.pu
--[ 2022.11.11.13.48.18.269.0 ]--
r 72         test.put
--[ 2022.11.11.13.48.34.135.0 ]--
r 72         test.put()
--[ 2022.11.11.13.48.45.783.0 ]--
+ 71         
--[ 2022.11.11.13.48.46.664.0 ]--
r 71         P
--[ 2022.11.11.13.48.47.204.0 ]--
r 71         Po
--[ 2022.11.11.13.48.47.463.0 ]--
r 71         Poi
--[ 2022.11.11.13.48.48.142.0 ]--
r 71         Poin
--[ 2022.11.11.13.48.48.700.0 ]--
r 71         Point
--[ 2022.11.11.13.48.49.081.0 ]--
r 71         Point 
--[ 2022.11.11.13.48.49.552.0 ]--
r 71         Point  
--[ 2022.11.11.13.48.50.163.0 ]--
r 71         Point  t
--[ 2022.11.11.13.48.50.514.0 ]--
r 71         Point  
--[ 2022.11.11.13.48.50.654.0 ]--
r 71         Point 
--[ 2022.11.11.13.48.50.767.0 ]--
r 71         Point
--[ 2022.11.11.13.48.51.277.0 ]--
r 71         Point 
--[ 2022.11.11.13.48.51.602.0 ]--
r 71         Point x
--[ 2022.11.11.13.48.51.995.0 ]--
r 71         Point x 
--[ 2022.11.11.13.48.52.445.0 ]--
r 71         Point x =
--[ 2022.11.11.13.48.52.827.0 ]--
r 71         Point x = 
--[ 2022.11.11.13.49.00.733.0 ]--
r 71         Point x = ne
--[ 2022.11.11.13.49.00.873.0 ]--
r 71         Point x = new
--[ 2022.11.11.13.49.01.015.0 ]--
r 71         Point x = new 
--[ 2022.11.11.13.49.01.267.0 ]--
r 71         Point x = new P
--[ 2022.11.11.13.49.01.687.0 ]--
r 71         Point x = new Po
--[ 2022.11.11.13.49.01.788.0 ]--
r 71         Point x = new Poi
--[ 2022.11.11.13.49.01.852.0 ]--
r 71         Point x = new Poin
--[ 2022.11.11.13.49.01.948.0 ]--
r 71         Point x = new Point
--[ 2022.11.11.13.49.02.430.0 ]--
r 71         Point x = new Point()
--[ 2022.11.11.13.49.03.654.0 ]--
r 71         Point x = new Point(1)
--[ 2022.11.11.13.49.03.733.0 ]--
r 71         Point x = new Point(1.)
--[ 2022.11.11.13.49.03.892.0 ]--
r 71         Point x = new Point(1.0)
--[ 2022.11.11.13.49.04.091.0 ]--
r 71         Point x = new Point(1.0,)
--[ 2022.11.11.13.49.04.686.0 ]--
r 71         Point x = new Point(1.0,2.0)
--[ 2022.11.11.13.49.06.068.0 ]--
r 71         Point x = new Point(1.0,2.0);
--[ 2022.11.11.13.49.10.406.0 ]--
r 73         test.put(x)
--[ 2022.11.11.13.49.10.672.0 ]--
r 73         test.put(x,)
--[ 2022.11.11.13.49.11.240.0 ]--
r 73         test.put(x, )
--[ 2022.11.11.13.49.12.242.0 ]--
r 73         test.put(x, 3)
--[ 2022.11.11.13.49.13.407.0 ]--
r 73         test.put(x, 3);
--[ 2022.11.11.13.49.50.158.0 ]--
+ 74         
--[ 2022.11.11.13.49.50.414.0 ]--
r 74         f
--[ 2022.11.11.13.49.50.658.0 ]--
r 74         fo
--[ 2022.11.11.13.49.50.942.0 ]--
r 74         for
--[ 2022.11.11.13.49.51.214.0 ]--
r 74         for 
--[ 2022.11.11.13.49.52.235.0 ]--
r 74         for ()
--[ 2022.11.11.13.49.55.379.0 ]--
r 74         for (S)
--[ 2022.11.11.13.49.56.322.0 ]--
r 74         for (ST)
--[ 2022.11.11.13.49.56.614.0 ]--
r 74         for (STr)
--[ 2022.11.11.13.49.57.065.0 ]--
r 74         for (ST)
--[ 2022.11.11.13.49.57.141.0 ]--
r 74         for (S)
--[ 2022.11.11.13.49.57.266.0 ]--
r 74         for (St)
--[ 2022.11.11.13.49.57.531.0 ]--
r 74         for (Str)
--[ 2022.11.11.13.49.58.313.0 ]--
r 74         for (String)
--[ 2022.11.11.13.49.58.618.0 ]--
r 74         for (String )
--[ 2022.11.11.13.49.59.610.0 ]--
r 74         for (String)
--[ 2022.11.11.13.49.59.663.0 ]--
r 74         for (Strin)
--[ 2022.11.11.13.49.59.791.0 ]--
r 74         for (Stri)
--[ 2022.11.11.13.49.59.939.0 ]--
r 74         for (Str)
--[ 2022.11.11.13.50.00.086.0 ]--
r 74         for (St)
--[ 2022.11.11.13.50.00.221.0 ]--
r 74         for (S)
--[ 2022.11.11.13.50.00.365.0 ]--
r 74         for ()
--[ 2022.11.11.13.50.09.894.0 ]--
r 74         for (P)
--[ 2022.11.11.13.50.10.206.0 ]--
r 74         for (Po)
--[ 2022.11.11.13.50.10.269.0 ]--
r 74         for (Poi)
--[ 2022.11.11.13.50.10.367.0 ]--
r 74         for (Poin)
--[ 2022.11.11.13.50.10.572.0 ]--
r 74         for (Point)
--[ 2022.11.11.13.50.11.554.0 ]--
r 74         for (Point )
--[ 2022.11.11.13.50.12.059.0 ]--
r 74         for (Point s)
--[ 2022.11.11.13.50.12.401.0 ]--
r 74         for (Point s:)
--[ 2022.11.11.13.50.13.502.0 ]--
r 74         for (Point s:s)
--[ 2022.11.11.13.50.13.802.0 ]--
r 74         for (Point s:st)
--[ 2022.11.11.13.50.14.623.0 ]--
r 74         for (Point s:s)
--[ 2022.11.11.13.50.14.736.0 ]--
r 74         for (Point s:)
--[ 2022.11.11.13.50.17.814.0 ]--
r 74         for (Point s:t)
--[ 2022.11.11.13.50.18.282.0 ]--
r 74         for (Point s:te)
--[ 2022.11.11.13.50.18.397.0 ]--
r 74         for (Point s:tes)
--[ 2022.11.11.13.50.18.587.0 ]--
r 74         for (Point s:test)
--[ 2022.11.11.13.50.19.707.0 ]--
r 74         for (Point s:test.)
--[ 2022.11.11.13.50.20.029.0 ]--
r 74         for (Point s:test.k)
--[ 2022.11.11.13.50.20.196.0 ]--
r 74         for (Point s:test.ke)
--[ 2022.11.11.13.50.20.360.0 ]--
r 74         for (Point s:test.key)
--[ 2022.11.11.13.50.20.853.0 ]--
r 74         for (Point s:test.keys)
--[ 2022.11.11.13.50.21.434.0 ]--
r 74         for (Point s:test.keys())
--[ 2022.11.11.13.50.30.971.0 ]--
r 74         
--[ 2022.11.11.13.50.34.300.0 ]--
- 71
- 71
r 71         
--[ 2022.11.11.13.50.34.836.0 ]--
- 71
--[ 2022.11.11.13.50.35.541.0 ]--
r 70     public static void main(String[] args) 
--[ 2022.11.11.13.50.36.571.0 ]--
r 70     public static void main(String[] args) {
--[ 2022.11.11.13.50.38.288.0 ]--
- 71
--[ 2022.11.11.13.51.18.405.0 ]--
r 23     public void put(Point p, Value v) { 
--[ 2022.11.11.13.51.18.465.0 ]--
r 23     public void put(Point p, Value v) {  
--[ 2022.11.11.13.51.19.128.0 ]--
r 23     public void put(Point p, Value v) {  /
--[ 2022.11.11.13.51.19.240.0 ]--
r 23     public void put(Point p, Value v) {  //
--[ 2022.11.11.13.51.19.740.0 ]--
r 23     public void put(Point p, Value v) {  //c
--[ 2022.11.11.13.51.19.908.0 ]--
r 23     public void put(Point p, Value v) {  //ca
--[ 2022.11.11.13.51.20.059.0 ]--
r 23     public void put(Point p, Value v) {  //cah
--[ 2022.11.11.13.51.20.264.0 ]--
r 23     public void put(Point p, Value v) {  //cahn
--[ 2022.11.11.13.51.20.368.0 ]--
r 23     public void put(Point p, Value v) {  //cahng
--[ 2022.11.11.13.51.20.574.0 ]--
r 23     public void put(Point p, Value v) {  //cahnge
--[ 2022.11.11.13.51.21.732.0 ]--
r 23     public void put(Point p, Value v) {  //cahng
--[ 2022.11.11.13.51.21.839.0 ]--
r 23     public void put(Point p, Value v) {  //cahn
--[ 2022.11.11.13.51.22.013.0 ]--
r 23     public void put(Point p, Value v) {  //cah
--[ 2022.11.11.13.51.22.158.0 ]--
r 23     public void put(Point p, Value v) {  //ca
--[ 2022.11.11.13.51.22.291.0 ]--
r 23     public void put(Point p, Value v) {  //c
--[ 2022.11.11.13.51.22.683.0 ]--
r 23     public void put(Point p, Value v) {  //ch
--[ 2022.11.11.13.51.22.789.0 ]--
r 23     public void put(Point p, Value v) {  //cha
--[ 2022.11.11.13.51.22.873.0 ]--
r 23     public void put(Point p, Value v) {  //chan
--[ 2022.11.11.13.51.23.126.0 ]--
r 23     public void put(Point p, Value v) {  //chang
--[ 2022.11.11.13.51.23.843.0 ]--
r 23     public void put(Point p, Value v) {  //change
--[ 2022.11.11.13.51.24.402.0 ]--
r 23     public void put(Point p, Value v) {  //change?
--[ 2022.11.11.13.51.24.531.0 ]--
r 23     public void put(Point p, Value v) {  //change??
--[ 2022.11.11.13.54.01.140.0 ]--
+ 16     
--[ 2022.11.11.13.54.02.807.0 ]--
r 16     i
--[ 2022.11.11.13.54.02.870.0 ]--
r 16     in
--[ 2022.11.11.13.54.03.141.0 ]--
r 16     int
--[ 2022.11.11.13.54.03.175.0 ]--
r 16     int 
--[ 2022.11.11.13.54.03.412.0 ]--
r 16     int s
--[ 2022.11.11.13.54.03.507.0 ]--
r 16     int si
--[ 2022.11.11.13.54.03.759.0 ]--
r 16     int siz
--[ 2022.11.11.13.54.04.043.0 ]--
r 16     int size
--[ 2022.11.11.13.54.04.600.0 ]--
r 16     int size;
--[ 2022.11.11.13.54.06.885.0 ]--
r 16     int c;
--[ 2022.11.11.13.54.06.997.0 ]--
r 16     int cp;
--[ 2022.11.11.13.54.07.045.0 ]--
r 16     int cpo;
--[ 2022.11.11.13.54.07.392.0 ]--
r 16     int cp;
--[ 2022.11.11.13.54.07.503.0 ]--
r 16     int c;
--[ 2022.11.11.13.54.08.109.0 ]--
r 16     int co;
--[ 2022.11.11.13.54.08.196.0 ]--
r 16     int cou;
--[ 2022.11.11.13.54.08.387.0 ]--
r 16     int coun;
--[ 2022.11.11.13.54.08.516.0 ]--
r 16     int count;
--[ 2022.11.11.13.54.14.019.0 ]--
r 16     int count=;
--[ 2022.11.11.13.54.14.177.0 ]--
r 16     int count=0;
--[ 2022.11.11.13.54.17.530.0 ]--
+ 26         
--[ 2022.11.11.13.54.17.886.0 ]--
r 26         c
--[ 2022.11.11.13.54.17.979.0 ]--
r 26         co
--[ 2022.11.11.13.54.18.147.0 ]--
r 26         cou
--[ 2022.11.11.13.54.18.250.0 ]--
r 26         cout
--[ 2022.11.11.13.54.18.566.0 ]--
r 26         cout+
--[ 2022.11.11.13.54.18.690.0 ]--
r 26         cout++
--[ 2022.11.11.13.54.18.879.0 ]--
r 26         cout++;
--[ 2022.11.11.13.54.21.288.0 ]--
r 26         count++;
--[ 2022.11.11.13.54.30.943.0 ]--
r 69     public boolean isEmpty() { return tc; }
--[ 2022.11.11.13.54.31.214.0 ]--
r 69     public boolean isEmpty() { return t; }
--[ 2022.11.11.13.54.31.339.0 ]--
r 69     public boolean isEmpty() { return ; }
--[ 2022.11.11.13.54.31.684.0 ]--
r 69     public boolean isEmpty() { return c; }
--[ 2022.11.11.13.54.31.964.0 ]--
r 69     public boolean isEmpty() { return co; }
--[ 2022.11.11.13.54.32.140.0 ]--
r 69     public boolean isEmpty() { return cou; }
--[ 2022.11.11.13.54.32.407.0 ]--
r 69     public boolean isEmpty() { return coun; }
--[ 2022.11.11.13.54.32.527.0 ]--
r 69     public boolean isEmpty() { return count; }
--[ 2022.11.11.13.54.32.809.0 ]--
r 69     public boolean isEmpty() { return count=; }
--[ 2022.11.11.13.54.33.172.0 ]--
r 69     public boolean isEmpty() { return count==; }
--[ 2022.11.11.13.54.33.441.0 ]--
r 69     public boolean isEmpty() { return count==0; }
--[ 2022.11.11.13.54.35.263.0 ]--
r 66     public int size() { return ; }
--[ 2022.11.11.13.54.35.523.0 ]--
r 66     public int size() { return c; }
--[ 2022.11.11.13.54.35.732.0 ]--
r 66     public int size() { return co; }
--[ 2022.11.11.13.54.35.783.0 ]--
r 66     public int size() { return cou; }
--[ 2022.11.11.13.54.36.007.0 ]--
r 66     public int size() { return coun; }
--[ 2022.11.11.13.54.36.163.0 ]--
r 66     public int size() { return count; }
--[ 2022.11.11.13.55.15.679.0 ]--
r 17     
--[ 2022.11.11.13.55.49.049.0 ]--
r 17     e
--[ 2022.11.11.13.55.51.175.0 ]--
r 17     
--[ 2022.11.11.13.55.58.305.0 ]--
r 17     P
--[ 2022.11.11.13.55.58.501.0 ]--
r 17     Po
--[ 2022.11.11.13.55.58.602.0 ]--
r 17     Poi
--[ 2022.11.11.13.55.58.716.0 ]--
r 17     Poin
--[ 2022.11.11.13.55.58.884.0 ]--
r 17     Point
--[ 2022.11.11.13.55.58.990.0 ]--
r 17     Point 
--[ 2022.11.11.13.55.59.084.0 ]--
r 17     Point m
--[ 2022.11.11.13.55.59.223.0 ]--
r 17     Point mi
--[ 2022.11.11.13.55.59.433.0 ]--
r 17     Point min
--[ 2022.11.11.13.55.59.806.0 ]--
r 17     Point mini
--[ 2022.11.11.13.56.00.554.0 ]--
r 17     Point minim
--[ 2022.11.11.13.56.00.722.0 ]--
r 17     Point minimu
--[ 2022.11.11.13.56.00.898.0 ]--
r 17     Point minimun
--[ 2022.11.11.13.56.01.588.0 ]--
r 17     Point minimu
--[ 2022.11.11.13.56.01.903.0 ]--
r 17     Point minimum
--[ 2022.11.11.13.56.02.160.0 ]--
r 17     Point minimum;
--[ 2022.11.11.13.56.02.462.0 ]--
+ 18     
--[ 2022.11.11.13.56.03.745.0 ]--
r 18     Poi
--[ 2022.11.11.13.56.03.960.0 ]--
r 18     Poin
--[ 2022.11.11.13.56.04.416.0 ]--
r 18     Point
--[ 2022.11.11.13.56.07.165.0 ]--
r 18     Point 
--[ 2022.11.11.13.56.07.286.0 ]--
r 18     Point m
--[ 2022.11.11.13.56.07.525.0 ]--
r 18     Point ma
--[ 2022.11.11.13.56.08.320.0 ]--
r 18     Point max
--[ 2022.11.11.13.56.08.539.0 ]--
r 18     Point maxi
--[ 2022.11.11.13.56.08.828.0 ]--
r 18     Point maxim
--[ 2022.11.11.13.56.09.067.0 ]--
r 18     Point maximu
--[ 2022.11.11.13.56.09.274.0 ]--
r 18     Point maximum
--[ 2022.11.11.13.56.09.630.0 ]--
r 18     Point maximum;
--[ 2022.11.11.21.34.27.936.0 ]--
+ 63     public Point min() { 
r 64         return null; }
--[ 2022.11.11.21.34.29.308.0 ]--
+ 64         return null; 
r 65     }
--[ 2022.11.11.21.34.30.933.0 ]--
+ 64         
--[ 2022.11.11.21.34.31.376.0 ]--
r 64         i
--[ 2022.11.11.21.34.31.487.0 ]--
r 64         if
--[ 2022.11.11.21.34.32.190.0 ]--
r 64         if()
--[ 2022.11.11.21.34.32.350.0 ]--
r 64         if(i)
--[ 2022.11.11.21.34.32.488.0 ]--
r 64         if(is)
--[ 2022.11.11.21.34.32.855.0 ]--
r 64         if(isE)
--[ 2022.11.11.21.34.32.964.0 ]--
r 64         if(isEm)
--[ 2022.11.11.21.34.34.069.0 ]--
r 64         if(isEmp)
--[ 2022.11.11.21.34.34.349.0 ]--
r 64         if(isEmpt)
--[ 2022.11.11.21.34.34.924.0 ]--
r 64         if(isEmpty)
--[ 2022.11.11.21.34.35.480.0 ]--
r 64         if(isEmpty())
--[ 2022.11.11.21.34.38.678.0 ]--
r 64         if(isEmpty()) 
--[ 2022.11.11.21.34.38.832.0 ]--
r 64         if(isEmpty()) r
--[ 2022.11.11.21.34.39.106.0 ]--
r 64         if(isEmpty()) re
--[ 2022.11.11.21.34.39.276.0 ]--
r 64         if(isEmpty()) ret
--[ 2022.11.11.21.34.39.386.0 ]--
r 64         if(isEmpty()) retu
--[ 2022.11.11.21.34.39.512.0 ]--
r 64         if(isEmpty()) retur
--[ 2022.11.11.21.34.39.973.0 ]--
r 64         if(isEmpty()) return
--[ 2022.11.11.21.34.40.145.0 ]--
r 64         if(isEmpty()) return 
--[ 2022.11.11.21.34.40.328.0 ]--
r 64         if(isEmpty()) return n
--[ 2022.11.11.21.34.40.516.0 ]--
r 64         if(isEmpty()) return nu
--[ 2022.11.11.21.34.40.747.0 ]--
r 64         if(isEmpty()) return nul
--[ 2022.11.11.21.34.40.874.0 ]--
r 64         if(isEmpty()) return null
--[ 2022.11.11.21.34.41.339.0 ]--
r 64         if(isEmpty()) return null;
--[ 2022.11.11.21.34.45.856.0 ]--
r 65        
--[ 2022.11.11.21.34.46.234.0 ]--
- 65
--[ 2022.11.11.21.34.53.260.0 ]--
r 66     public Point max() { if(isEmpty()) return null; }
--[ 2022.11.11.21.34.54.359.0 ]--
+ 66     public Point max() { if(isEmpty()) return null;
r 67     }
--[ 2022.11.11.21.34.55.758.0 ]--
+ 66     public Point max() { 
r 67         if(isEmpty()) return null;
--[ 2022.11.11.21.34.58.794.0 ]--
+ 68         
--[ 2022.11.11.21.35.00.513.0 ]--
r 68         r
--[ 2022.11.11.21.35.00.626.0 ]--
r 68         re
--[ 2022.11.11.21.35.00.779.0 ]--
r 68         ret
--[ 2022.11.11.21.35.01.811.0 ]--
r 68         retu
--[ 2022.11.11.21.35.02.177.0 ]--
r 68         retur
--[ 2022.11.11.21.35.02.273.0 ]--
r 68         return
--[ 2022.11.11.21.35.02.416.0 ]--
r 68         return 
--[ 2022.11.11.21.35.02.975.0 ]--
r 68         return n
--[ 2022.11.11.21.35.03.183.0 ]--
r 68         return nu
--[ 2022.11.11.21.35.03.389.0 ]--
r 68         return nul
--[ 2022.11.11.21.35.04.092.0 ]--
r 68         return null
--[ 2022.11.11.21.35.04.246.0 ]--
r 68         return null;
--[ 2022.11.11.21.35.05.563.0 ]--
+ 65         
--[ 2022.11.11.21.35.05.831.0 ]--
r 65         r
--[ 2022.11.11.21.35.05.989.0 ]--
r 65         re
--[ 2022.11.11.21.35.06.169.0 ]--
r 65         ret
--[ 2022.11.11.21.35.06.524.0 ]--
r 65         retu
--[ 2022.11.11.21.35.06.738.0 ]--
r 65         retur
--[ 2022.11.11.21.35.06.908.0 ]--
r 65         return
--[ 2022.11.11.21.35.07.332.0 ]--
r 65         return 
--[ 2022.11.11.21.35.07.653.0 ]--
r 65         return n
--[ 2022.11.11.21.35.07.881.0 ]--
r 65         return nu
--[ 2022.11.11.21.35.08.124.0 ]--
r 65         return nul
--[ 2022.11.11.21.35.08.231.0 ]--
r 65         return null
--[ 2022.11.11.21.35.08.611.0 ]--
r 65         return null;
--[ 2022.11.11.21.35.17.289.0 ]--
r 63     public Point min() {
r 67     public Point max() {
--[ 2022.11.11.21.35.33.183.0 ]--
+ 31         
--[ 2022.11.11.21.35.33.464.0 ]--
r 31         i
--[ 2022.11.11.21.35.33.610.0 ]--
r 31         if
--[ 2022.11.11.21.35.43.782.0 ]--
r 31         if()
--[ 2022.11.11.21.35.43.991.0 ]--
r 31         if(i)
--[ 2022.11.11.21.35.44.225.0 ]--
r 31         if(is)
--[ 2022.11.11.21.35.44.547.0 ]--
r 31         if(isE)
--[ 2022.11.11.21.35.44.673.0 ]--
r 31         if(isEm)
--[ 2022.11.11.21.35.44.903.0 ]--
r 31         if(isEmp)
--[ 2022.11.11.21.35.45.146.0 ]--
r 31         if(isEmpt)
--[ 2022.11.11.21.35.45.378.0 ]--
r 31         if(isEmpty)
--[ 2022.11.11.21.35.46.039.0 ]--
r 31         if(isEmpty())
--[ 2022.11.11.21.36.04.198.0 ]--
r 31         if(isEmpty()) 
--[ 2022.11.11.21.36.04.388.0 ]--
r 31         if(isEmpty()) r
--[ 2022.11.11.21.36.04.531.0 ]--
r 31         if(isEmpty()) re
--[ 2022.11.11.21.36.04.697.0 ]--
r 31         if(isEmpty()) ret
--[ 2022.11.11.21.36.04.820.0 ]--
r 31         if(isEmpty()) retu
--[ 2022.11.11.21.36.05.028.0 ]--
r 31         if(isEmpty()) retur
--[ 2022.11.11.21.36.05.226.0 ]--
r 31         if(isEmpty()) return
--[ 2022.11.11.21.36.05.398.0 ]--
r 31         if(isEmpty()) return 
--[ 2022.11.11.21.36.05.547.0 ]--
r 31         if(isEmpty()) return n
--[ 2022.11.11.21.36.05.739.0 ]--
r 31         if(isEmpty()) return nu
--[ 2022.11.11.21.36.05.967.0 ]--
r 31         if(isEmpty()) return nuo
--[ 2022.11.11.21.36.06.092.0 ]--
r 31         if(isEmpty()) return nuoo
--[ 2022.11.11.21.36.06.620.0 ]--
r 31         if(isEmpty()) return nuo
--[ 2022.11.11.21.36.07.600.0 ]--
r 31         if(isEmpty()) return nu
--[ 2022.11.11.21.36.08.252.0 ]--
r 31         if(isEmpty()) return nu;
--[ 2022.11.11.21.36.08.428.0 ]--
r 31         if(isEmpty()) return nu;;
--[ 2022.11.11.21.36.09.037.0 ]--
r 31         if(isEmpty()) return nu;
--[ 2022.11.11.21.36.09.186.0 ]--
r 31         if(isEmpty()) return nu
--[ 2022.11.11.21.36.09.724.0 ]--
r 31         if(isEmpty()) return nul
--[ 2022.11.11.21.36.10.391.0 ]--
r 31         if(isEmpty()) return null;
--[ 2022.11.11.21.37.30.547.0 ]--
+ 40         
--[ 2022.11.11.21.37.32.551.0 ]--
r 40         if(isEmpty()) return null;
--[ 2022.11.11.21.40.32.832.0 ]--
DisposeComponent
--[ 2022.11.15.11.28.21.068.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.15.11.28.21.410.0 ]--
InitTree:
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/main
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/main
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
/.git/objects/0f/05624ad8de377d4bdf3ec1558d477af125661c
/.git/objects/11/6f5b50e2bd7e5a645224f577c702fc62092122
/.git/objects/1a/49d62b998226393c172907eef021434d19be9a
/.git/objects/1f/b9dc988a5179e983b847d789447e3c5fa79e57
/.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
/.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
/.git/objects/30/6f36bddc52f2e08ccf8a41536340870eb1829c
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/39/5d98ffb25a1aa9df31eb7f0e6c2af2e28bc31d
/.git/objects/3c/91061820fd12503e015c3c19cec90b78494358
/.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4f/ce1d86b49521afe1cee4ed1c13b6396ebbc6f3
/.git/objects/54/0fd2392eaf74abc751e9970668bf235e56f803
/.git/objects/5c/98b428844d9f7d529e2b6fb918d15bf072f3df
/.git/objects/65/427e6010f1b59257bc8ac509401e7eeb2698d4
/.git/objects/68/2820a134168b0d23787b376165bef89b511f00
/.git/objects/6e/e6bdaf464e0f4adb373587a385e0875ebf8ba6
/.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
/.git/objects/7d/61ee6e1564fdc3e562582a8ca1c55185fd2b09
/.git/objects/80/8df08d052527e9a626a08c732fb0fb470708c8
/.git/objects/86/5b56d35df1dcfcbf5196eeddcef674c03a3a93
/.git/objects/8b/e37e197c873cbcd2952f364d9e3a447bc4e692
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/8d/e804238c33c653fe535bd162aabed440497ec7
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
/.git/objects/9a/8c6aff1f8871e01cacec32f40b40f4107494d2
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/90a9d65e85ba8dedaeee57dbca845093794f15
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/39a65a74d4111e721807c06e27bd6754992fbb
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/c2/828bc31a68ae45ce1922d19323206b232cbda4
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/c7/ed19fcb2ed6617a23bd3e9a2efaa966bed42da
/.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
/.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
/.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
/.git/objects/de/c87ed246fc3ca006dddb4db1972a0e1d67919e
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
/.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
/.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
/.git/objects/ef/89a8450022222b69a62814d66e3f6c8ecb5a60
/.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
/.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
/.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22__1_29_PM__Default_.xml
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml

--[ 2022.11.15.11.28.21.413.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.15.11.28.21.413.1 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.15.11.28.21.413.2 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.15.11.28.21.413.3 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.15.11.28.21.413.4 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.15.11.28.21.413.5 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.15.11.28.21.415.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.15.11.28.21.418.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.15.11.28.21.420.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */

// Testing Git -- kmikels

public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection
    public PSBruteForce() { }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
    }

    public Value get(Point p) {
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() { return null; }
    public Point max() { return null; }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return 0; }

    // return whether the KDTree is empty
    public boolean isEmpty() { return true; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2022.11.15.11.28.21.422.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }
    BST<Point, Value> kdt;
    int count=0;
    Point minimum;
    Point maximum;
    // constructor makes empty kD-tree
    public PSKDTree() {
        kdt = new BST<Point, Value>();
    }

    // add the given Point to kD-tree
    public void put(Point p, Value v) {  //change??
        kdt.put(p,v);
        count++;
    }

    public Value get(Point p) {
        if(isEmpty()) return null;
        return null;
    }

    public boolean contains(Point p) {
        return false;
    }

    public Value getNearest(Point p) {
        if(isEmpty()) return null;
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; }

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        return null;
    }
    public Point max() {
        if(isEmpty()) return null;
        return null;
    }

    // return the number of Points in kD-tree
    public int size() { return count; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return count==0; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.15.11.28.21.426.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.15.11.28.21.426.1 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.15.11.28.21.426.2 ]--
InitFile: /.cos265


--[ 2022.11.15.10.01.43.598.0 ]--
+ 15     BST<Point, Value> kdt;
+ 16     int count=0;
+ 17     Point minimum;
r 18     Point maximum;
+ 20     public PSKDTree() {
+ 21         kdt = new BST<Point, Value>();
r 22     }
+ 25     public void put(Point p, Value v) {  //change??
+ 26         kdt.put(p,v);
r 27         count++;
+ 31         if(isEmpty()) return null;
+ 40         if(isEmpty()) return null;
+ 65     public Point min() {
+ 66         if(isEmpty()) return null;
+ 67         return null;
+ 68     }
+ 69     public Point max() {
+ 70         if(isEmpty()) return null;
r 71         return null;
r 72     }
r 75     public int size() { return count; }
r 78     public boolean isEmpty() { return count==0; }
--[ 2022.11.15.10.01.50.183.0 ]--
UpdateTree (AD): 1 0
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_10_01_AM_[Changes]/shelved.patch

--[ 2022.11.15.10.01.50.192.0 ]--
UpdateTree (AD): 1 0
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__10_01_AM__Changes_.xml

--[ 2022.11.15.10.01.53.044.0 ]--
UpdateTree (AD): 8 0
+ /.git/objects/54/0fd2392eaf74abc751e9970668bf235e56f803
+ /.git/objects/6e/e6bdaf464e0f4adb373587a385e0875ebf8ba6
+ /.git/objects/86/5b56d35df1dcfcbf5196eeddcef674c03a3a93
+ /.git/objects/8d/e804238c33c653fe535bd162aabed440497ec7
+ /.git/objects/9a/8c6aff1f8871e01cacec32f40b40f4107494d2
+ /.git/objects/c7/ed19fcb2ed6617a23bd3e9a2efaa966bed42da
+ /.git/ORIG_HEAD
+ /.git/FETCH_HEAD

--[ 2022.11.15.10.04.46.433.0 ]--
r 25     public void put(Point p, Value v) {  //change?? 
--[ 2022.11.15.10.04.47.094.0 ]--
r 25     public void put(Point p, Value v) {  //change?? r
--[ 2022.11.15.10.04.47.202.0 ]--
r 25     public void put(Point p, Value v) {  //change?? re
--[ 2022.11.15.10.04.47.438.0 ]--
r 25     public void put(Point p, Value v) {  //change?? rem
--[ 2022.11.15.10.04.47.678.0 ]--
r 25     public void put(Point p, Value v) {  //change?? reme
--[ 2022.11.15.10.04.47.839.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remem
--[ 2022.11.15.10.04.47.963.0 ]--
r 25     public void put(Point p, Value v) {  //change?? rememb
--[ 2022.11.15.10.04.48.170.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remembe
--[ 2022.11.15.10.04.48.241.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember
--[ 2022.11.15.10.04.48.337.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember 
--[ 2022.11.15.10.04.48.485.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember t
--[ 2022.11.15.10.04.48.573.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to
--[ 2022.11.15.10.04.48.654.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to 
--[ 2022.11.15.10.04.48.795.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to a
--[ 2022.11.15.10.04.48.882.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to al
--[ 2022.11.15.10.04.49.050.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alt
--[ 2022.11.15.10.04.49.191.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alte
--[ 2022.11.15.10.04.49.284.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alter
--[ 2022.11.15.10.04.49.415.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to altern
--[ 2022.11.15.10.04.49.514.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alterna
--[ 2022.11.15.10.04.49.611.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternat
--[ 2022.11.15.10.04.49.767.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate
--[ 2022.11.15.10.04.49.914.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate 
--[ 2022.11.15.10.04.50.171.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x
--[ 2022.11.15.10.04.50.250.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x 
--[ 2022.11.15.10.04.50.475.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x a
--[ 2022.11.15.10.04.50.586.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x an
--[ 2022.11.15.10.04.50.642.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and
--[ 2022.11.15.10.04.50.728.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and 
--[ 2022.11.15.10.04.50.972.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y
--[ 2022.11.15.10.04.51.114.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y 
--[ 2022.11.15.10.04.51.556.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y c
--[ 2022.11.15.10.04.51.671.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y co
--[ 2022.11.15.10.04.51.804.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coo
--[ 2022.11.15.10.04.51.882.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coor
--[ 2022.11.15.10.04.52.153.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coord
--[ 2022.11.15.10.04.52.395.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords
--[ 2022.11.15.10.04.52.531.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords 
--[ 2022.11.15.10.04.52.889.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords f
--[ 2022.11.15.10.04.52.949.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords fo
--[ 2022.11.15.10.04.53.067.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for
--[ 2022.11.15.10.04.53.156.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for 
--[ 2022.11.15.10.04.53.248.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for i
--[ 2022.11.15.10.04.53.447.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for in
--[ 2022.11.15.10.04.53.560.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for ins
--[ 2022.11.15.10.04.53.771.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inse
--[ 2022.11.15.10.04.53.885.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inser
--[ 2022.11.15.10.04.54.065.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for insert
--[ 2022.11.15.10.04.54.215.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inserti
--[ 2022.11.15.10.04.54.368.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for insertin
--[ 2022.11.15.10.04.54.442.0 ]--
r 25     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inserting
--[ 2022.11.15.10.05.17.062.0 ]--
r 32         return null; 
--[ 2022.11.15.10.05.17.324.0 ]--
r 32         return null; /
--[ 2022.11.15.10.05.17.428.0 ]--
r 32         return null; //
--[ 2022.11.15.10.05.18.866.0 ]--
r 32         return null; //s
--[ 2022.11.15.10.05.19.156.0 ]--
r 32         return null; //se
--[ 2022.11.15.10.05.19.322.0 ]--
r 32         return null; //sea
--[ 2022.11.15.10.05.19.391.0 ]--
r 32         return null; //sear
--[ 2022.11.15.10.05.19.652.0 ]--
r 32         return null; //searc
--[ 2022.11.15.10.05.19.740.0 ]--
r 32         return null; //search
--[ 2022.11.15.10.05.19.858.0 ]--
r 32         return null; //searchi
--[ 2022.11.15.10.05.19.992.0 ]--
r 32         return null; //searchin
--[ 2022.11.15.10.05.20.079.0 ]--
r 32         return null; //searching
--[ 2022.11.15.10.05.20.521.0 ]--
r 32         return null; //searchin
--[ 2022.11.15.10.05.20.642.0 ]--
r 32         return null; //searchi
--[ 2022.11.15.10.05.20.757.0 ]--
r 32         return null; //search
--[ 2022.11.15.10.05.20.990.0 ]--
r 32         return null; //search 
--[ 2022.11.15.10.05.21.130.0 ]--
r 32         return null; //search t
--[ 2022.11.15.10.05.21.191.0 ]--
r 32         return null; //search th
--[ 2022.11.15.10.05.21.340.0 ]--
r 32         return null; //search thr
--[ 2022.11.15.10.05.21.421.0 ]--
r 32         return null; //search thro
--[ 2022.11.15.10.05.21.495.0 ]--
r 32         return null; //search throu
--[ 2022.11.15.10.05.21.624.0 ]--
r 32         return null; //search throug
--[ 2022.11.15.10.05.21.732.0 ]--
r 32         return null; //search through
--[ 2022.11.15.10.05.21.872.0 ]--
r 32         return null; //search through 
--[ 2022.11.15.10.05.22.013.0 ]--
r 32         return null; //search through t
--[ 2022.11.15.10.05.22.086.0 ]--
r 32         return null; //search through th
--[ 2022.11.15.10.05.22.222.0 ]--
r 32         return null; //search through the
--[ 2022.11.15.10.05.22.334.0 ]--
r 32         return null; //search through the 
--[ 2022.11.15.10.05.22.478.0 ]--
r 32         return null; //search through the t
--[ 2022.11.15.10.05.22.640.0 ]--
r 32         return null; //search through the tr
--[ 2022.11.15.10.05.22.811.0 ]--
r 32         return null; //search through the tre
--[ 2022.11.15.10.05.22.976.0 ]--
r 32         return null; //search through the tree
--[ 2022.11.15.10.05.23.307.0 ]--
r 32         return null; //search through the tree 
--[ 2022.11.15.10.05.23.470.0 ]--
r 32         return null; //search through the tree i
--[ 2022.11.15.10.05.23.647.0 ]--
r 32         return null; //search through the tree in
--[ 2022.11.15.10.05.23.712.0 ]--
r 32         return null; //search through the tree ins
--[ 2022.11.15.10.05.23.879.0 ]--
r 32         return null; //search through the tree inst
--[ 2022.11.15.10.05.24.043.0 ]--
r 32         return null; //search through the tree inste
--[ 2022.11.15.10.05.24.220.0 ]--
r 32         return null; //search through the tree instea
--[ 2022.11.15.10.05.24.539.0 ]--
r 32         return null; //search through the tree instead
--[ 2022.11.15.10.05.24.641.0 ]--
r 32         return null; //search through the tree instead 
--[ 2022.11.15.10.05.24.814.0 ]--
r 32         return null; //search through the tree instead o
--[ 2022.11.15.10.05.24.921.0 ]--
r 32         return null; //search through the tree instead of
--[ 2022.11.15.10.05.24.991.0 ]--
r 32         return null; //search through the tree instead of 
--[ 2022.11.15.10.05.25.122.0 ]--
r 32         return null; //search through the tree instead of t
--[ 2022.11.15.10.05.25.188.0 ]--
r 32         return null; //search through the tree instead of th
--[ 2022.11.15.10.05.25.254.0 ]--
r 32         return null; //search through the tree instead of thi
--[ 2022.11.15.10.05.25.395.0 ]--
r 32         return null; //search through the tree instead of this
--[ 2022.11.15.10.05.25.560.0 ]--
r 32         return null; //search through the tree instead of this 
--[ 2022.11.15.10.05.25.702.0 ]--
r 32         return null; //search through the tree instead of this l
--[ 2022.11.15.10.05.25.821.0 ]--
r 32         return null; //search through the tree instead of this li
--[ 2022.11.15.10.05.26.095.0 ]--
r 32         return null; //search through the tree instead of this l
--[ 2022.11.15.10.05.26.215.0 ]--
r 32         return null; //search through the tree instead of this 
--[ 2022.11.15.10.05.26.341.0 ]--
r 32         return null; //search through the tree instead of this
--[ 2022.11.15.10.05.26.459.0 ]--
r 32         return null; //search through the tree instead of thi
--[ 2022.11.15.10.05.26.587.0 ]--
r 32         return null; //search through the tree instead of th
--[ 2022.11.15.10.05.26.710.0 ]--
r 32         return null; //search through the tree instead of t
--[ 2022.11.15.10.05.26.824.0 ]--
r 32         return null; //search through the tree instead of 
--[ 2022.11.15.10.05.27.282.0 ]--
r 32         return null; //search through the tree instead of r
--[ 2022.11.15.10.05.27.349.0 ]--
r 32         return null; //search through the tree instead of re
--[ 2022.11.15.10.05.27.543.0 ]--
r 32         return null; //search through the tree instead of ret
--[ 2022.11.15.10.05.27.635.0 ]--
r 32         return null; //search through the tree instead of retu
--[ 2022.11.15.10.05.28.278.0 ]--
r 32         return null; //search through the tree instead of retur
--[ 2022.11.15.10.05.28.492.0 ]--
r 32         return null; //search through the tree instead of return
--[ 2022.11.15.10.05.28.622.0 ]--
r 32         return null; //search through the tree instead of returni
--[ 2022.11.15.10.05.28.760.0 ]--
r 32         return null; //search through the tree instead of returnin
--[ 2022.11.15.10.05.28.863.0 ]--
r 32         return null; //search through the tree instead of returning
--[ 2022.11.15.10.05.28.974.0 ]--
r 32         return null; //search through the tree instead of returning 
--[ 2022.11.15.10.05.29.109.0 ]--
r 32         return null; //search through the tree instead of returning n
--[ 2022.11.15.10.05.29.285.0 ]--
r 32         return null; //search through the tree instead of returning nu
--[ 2022.11.15.10.05.29.445.0 ]--
r 32         return null; //search through the tree instead of returning nul
--[ 2022.11.15.10.05.29.547.0 ]--
r 32         return null; //search through the tree instead of returning null
--[ 2022.11.15.10.05.35.260.0 ]--
r 36         return false; 
--[ 2022.11.15.10.05.35.721.0 ]--
r 36         return false; /
--[ 2022.11.15.10.05.35.863.0 ]--
r 36         return false; //
--[ 2022.11.15.10.05.36.712.0 ]--
r 36         return false; //s
--[ 2022.11.15.10.05.36.778.0 ]--
r 36         return false; //se
--[ 2022.11.15.10.05.36.973.0 ]--
r 36         return false; //sea
--[ 2022.11.15.10.05.37.058.0 ]--
r 36         return false; //sear
--[ 2022.11.15.10.05.37.369.0 ]--
r 36         return false; //searc
--[ 2022.11.15.10.05.37.452.0 ]--
r 36         return false; //search
--[ 2022.11.15.10.05.37.539.0 ]--
r 36         return false; //searchi
--[ 2022.11.15.10.05.37.735.0 ]--
r 36         return false; //searchin
--[ 2022.11.15.10.05.37.851.0 ]--
r 36         return false; //searching
--[ 2022.11.15.10.05.41.328.0 ]--
r 36         return false; //searching 
--[ 2022.11.15.10.05.41.439.0 ]--
r 36         return false; //searching a
--[ 2022.11.15.10.05.41.596.0 ]--
r 36         return false; //searching ag
--[ 2022.11.15.10.05.41.720.0 ]--
r 36         return false; //searching aga
--[ 2022.11.15.10.05.41.832.0 ]--
r 36         return false; //searching agai
--[ 2022.11.15.10.05.41.960.0 ]--
r 36         return false; //searching again
--[ 2022.11.15.10.05.42.133.0 ]--
r 36         return false; //searching again 
--[ 2022.11.15.10.05.46.320.0 ]--
r 36         return false; //searching again f
--[ 2022.11.15.10.05.46.407.0 ]--
r 36         return false; //searching again fo
--[ 2022.11.15.10.05.46.502.0 ]--
r 36         return false; //searching again for
--[ 2022.11.15.10.05.46.625.0 ]--
r 36         return false; //searching again for 
--[ 2022.11.15.10.05.46.803.0 ]--
r 36         return false; //searching again for p
--[ 2022.11.15.10.05.47.133.0 ]--
r 36         return false; //searching again for p 
--[ 2022.11.15.10.05.47.251.0 ]--
r 36         return false; //searching again for p i
--[ 2022.11.15.10.05.47.410.0 ]--
r 36         return false; //searching again for p in
--[ 2022.11.15.10.05.47.518.0 ]--
r 36         return false; //searching again for p in 
--[ 2022.11.15.10.05.47.645.0 ]--
r 36         return false; //searching again for p in t
--[ 2022.11.15.10.05.47.732.0 ]--
r 36         return false; //searching again for p in th
--[ 2022.11.15.10.05.47.828.0 ]--
r 36         return false; //searching again for p in the
--[ 2022.11.15.10.05.47.930.0 ]--
r 36         return false; //searching again for p in the 
--[ 2022.11.15.10.05.48.170.0 ]--
r 36         return false; //searching again for p in the b
--[ 2022.11.15.10.05.48.340.0 ]--
r 36         return false; //searching again for p in the bs
--[ 2022.11.15.10.05.48.487.0 ]--
r 36         return false; //searching again for p in the bst
--[ 2022.11.15.10.06.34.753.0 ]--
r 45     public Iterable<Point> points() { return null; } 
--[ 2022.11.15.10.06.35.179.0 ]--
r 45     public Iterable<Point> points() { return null; } /
--[ 2022.11.15.10.06.35.357.0 ]--
r 45     public Iterable<Point> points() { return null; } //
--[ 2022.11.15.10.06.36.066.0 ]--
r 45     public Iterable<Point> points() { return null; } //m
--[ 2022.11.15.10.06.36.166.0 ]--
r 45     public Iterable<Point> points() { return null; } //ma
--[ 2022.11.15.10.06.36.445.0 ]--
r 45     public Iterable<Point> points() { return null; } //mak
--[ 2022.11.15.10.06.36.599.0 ]--
r 45     public Iterable<Point> points() { return null; } //make
--[ 2022.11.15.10.06.37.033.0 ]--
r 45     public Iterable<Point> points() { return null; } //make 
--[ 2022.11.15.10.06.38.493.0 ]--
r 45     public Iterable<Point> points() { return null; } //make
--[ 2022.11.15.10.06.38.628.0 ]--
r 45     public Iterable<Point> points() { return null; } //mak
--[ 2022.11.15.10.06.38.773.0 ]--
r 45     public Iterable<Point> points() { return null; } //ma
--[ 2022.11.15.10.06.38.939.0 ]--
r 45     public Iterable<Point> points() { return null; } //m
--[ 2022.11.15.10.06.39.076.0 ]--
r 45     public Iterable<Point> points() { return null; } //
--[ 2022.11.15.10.06.39.180.0 ]--
r 45     public Iterable<Point> points() { return null; } /
--[ 2022.11.15.10.06.39.743.0 ]--
r 45     public Iterable<Point> points() { return null; } 
--[ 2022.11.15.10.06.46.838.0 ]--
r 45     public Iterable<Point> points() { return null; } /
--[ 2022.11.15.10.06.47.015.0 ]--
r 45     public Iterable<Point> points() { return null; } //
--[ 2022.11.15.10.06.48.250.0 ]--
r 45     public Iterable<Point> points() { return null; } /
--[ 2022.11.15.10.06.48.393.0 ]--
r 45     public Iterable<Point> points() { return null; } 
--[ 2022.11.15.10.06.51.850.0 ]--
+ 28         
--[ 2022.11.15.10.06.54.733.0 ]--
+ 17     
--[ 2022.11.15.10.07.59.546.0 ]--
r 17 
r 29 
r 47     public Iterable<Point> points() { return null; }
--[ 2022.11.15.10.08.18.813.0 ]--
r 47     public Iterable<Point> points() { return null; } 
--[ 2022.11.15.10.08.19.078.0 ]--
r 47     public Iterable<Point> points() { return null; } /
--[ 2022.11.15.10.08.19.221.0 ]--
r 47     public Iterable<Point> points() { return null; } //
--[ 2022.11.15.10.08.21.923.0 ]--
r 47     public Iterable<Point> points() { return null; } //d
--[ 2022.11.15.10.08.22.033.0 ]--
r 47     public Iterable<Point> points() { return null; } //do
--[ 2022.11.15.10.08.22.178.0 ]--
r 47     public Iterable<Point> points() { return null; } //do 
--[ 2022.11.15.10.08.22.364.0 ]--
r 47     public Iterable<Point> points() { return null; } //do w
--[ 2022.11.15.10.08.22.437.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we
--[ 2022.11.15.10.08.22.553.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we 
--[ 2022.11.15.10.08.23.206.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we h
--[ 2022.11.15.10.08.23.326.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we ha
--[ 2022.11.15.10.08.23.494.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we hav
--[ 2022.11.15.10.08.23.656.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have
--[ 2022.11.15.10.08.23.791.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have 
--[ 2022.11.15.10.08.23.887.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have t
--[ 2022.11.15.10.08.23.994.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have to
--[ 2022.11.15.10.08.24.085.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have to 
--[ 2022.11.15.10.08.24.245.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have to a
--[ 2022.11.15.10.08.24.457.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have to ac
--[ 2022.11.15.10.08.24.612.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have to acc
--[ 2022.11.15.10.08.24.770.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have to acco
--[ 2022.11.15.10.08.24.840.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have to accou
--[ 2022.11.15.10.08.25.081.0 ]--
r 47     public Iterable<Point> points() { return null; } //do we have to account
--[ 2022.11.15.10.08.29.204.0 ]--
r 47     public Iterable<Point> points() { return null; } //account
--[ 2022.11.15.10.08.30.625.0 ]--
r 47     public Iterable<Point> points() { return null; } //account 
--[ 2022.11.15.10.08.30.783.0 ]--
r 47     public Iterable<Point> points() { return null; } //account f
--[ 2022.11.15.10.08.30.888.0 ]--
r 47     public Iterable<Point> points() { return null; } //account fo
--[ 2022.11.15.10.08.30.983.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for
--[ 2022.11.15.10.08.31.087.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for 
--[ 2022.11.15.10.08.31.205.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for d
--[ 2022.11.15.10.08.31.401.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for de
--[ 2022.11.15.10.08.31.453.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for del
--[ 2022.11.15.10.08.31.615.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for dele
--[ 2022.11.15.10.08.31.882.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for delet
--[ 2022.11.15.10.08.32.210.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for deleti
--[ 2022.11.15.10.08.32.276.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for deletio
--[ 2022.11.15.10.08.32.470.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for deletion
--[ 2022.11.15.10.08.32.582.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for deletions
--[ 2022.11.15.10.08.32.802.0 ]--
r 47     public Iterable<Point> points() { return null; } //account for deletions?
--[ 2022.11.15.10.11.04.177.0 ]--
:/src/PSBruteForce.java
r 8 // T
--[ 2022.11.15.10.11.04.307.0 ]--
r 8 // 
--[ 2022.11.15.10.11.04.631.0 ]--
r 8 // r
--[ 2022.11.15.10.11.04.701.0 ]--
r 8 // re
--[ 2022.11.15.10.11.05.062.0 ]--
r 8 // red
--[ 2022.11.15.10.11.05.629.0 ]--
r 8 // red-
--[ 2022.11.15.10.11.06.017.0 ]--
r 8 // red-b
--[ 2022.11.15.10.11.06.134.0 ]--
r 8 // red-bl
--[ 2022.11.15.10.11.06.333.0 ]--
r 8 // red-bla
--[ 2022.11.15.10.11.06.553.0 ]--
r 8 // red-blac
--[ 2022.11.15.10.11.06.668.0 ]--
r 8 // red-black
--[ 2022.11.15.10.11.06.894.0 ]--
r 8 // red-black 
--[ 2022.11.15.10.11.07.089.0 ]--
r 8 // red-black t
--[ 2022.11.15.10.11.07.232.0 ]--
r 8 // red-black tr
--[ 2022.11.15.10.11.07.520.0 ]--
r 8 // red-black tre
--[ 2022.11.15.10.11.07.667.0 ]--
r 8 // red-black tree
--[ 2022.11.15.10.11.07.860.0 ]--
r 8 // red-black trees
--[ 2022.11.15.10.13.02.548.0 ]--
+ 12     public PSBruteForce() { 
r 13     }
--[ 2022.11.15.10.13.02.602.0 ]--
+ 13         
--[ 2022.11.15.10.13.08.451.0 ]--
+ 12     
--[ 2022.11.15.10.13.09.264.0 ]--
+ 12     
--[ 2022.11.15.10.14.15.390.0 ]--
r 13     RedBlackBST<String, Integer> st = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.15.401.0 ]--
r 12 
--[ 2022.11.15.10.14.18.870.0 ]--
r 13     RedBlackBST<String, Integer> rst = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.19.094.0 ]--
r 13     RedBlackBST<String, Integer> rbst = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.23.948.0 ]--
r 13     RedBlackBST<String, Integer> rbst;
--[ 2022.11.15.10.14.26.655.0 ]--
r 15         RedBlackBST<String, Integer> st = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.26.669.0 ]--
r 14     public PSBruteForce() {
--[ 2022.11.15.10.14.30.726.0 ]--
r 15         st = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.31.552.0 ]--
r 15         s = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.31.628.0 ]--
r 15          = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.32.054.0 ]--
r 15         r = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.32.355.0 ]--
r 15         rg = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.32.642.0 ]--
r 15         r = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.32.718.0 ]--
r 15         rb = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.32.911.0 ]--
r 15         rbs = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.33.172.0 ]--
r 15         rbst = new RedBlackBST<String, Integer>();
--[ 2022.11.15.10.14.38.152.0 ]--
r 15         rbst = new RedBlackBST<>();
--[ 2022.11.15.10.14.58.456.0 ]--
r 13     RedBlackBST<P, Integer> rbst;
--[ 2022.11.15.10.14.58.693.0 ]--
r 13     RedBlackBST<Po, Integer> rbst;
--[ 2022.11.15.10.14.58.797.0 ]--
r 13     RedBlackBST<Poi, Integer> rbst;
--[ 2022.11.15.10.14.59.006.0 ]--
r 13     RedBlackBST<Poin, Integer> rbst;
--[ 2022.11.15.10.14.59.137.0 ]--
r 13     RedBlackBST<Point, Integer> rbst;
--[ 2022.11.15.10.15.00.464.0 ]--
r 13     RedBlackBST<Point, V> rbst;
--[ 2022.11.15.10.15.00.637.0 ]--
r 13     RedBlackBST<Point, Va> rbst;
--[ 2022.11.15.10.15.00.842.0 ]--
r 13     RedBlackBST<Point, Val> rbst;
--[ 2022.11.15.10.15.00.908.0 ]--
r 13     RedBlackBST<Point, Valu> rbst;
--[ 2022.11.15.10.15.01.001.0 ]--
r 13     RedBlackBST<Point, Value> rbst;
--[ 2022.11.15.10.15.07.757.0 ]--
+ 20         
--[ 2022.11.15.10.15.09.902.0 ]--
r 20         r
--[ 2022.11.15.10.15.10.142.0 ]--
r 20         rb
--[ 2022.11.15.10.15.10.322.0 ]--
r 20         rbs
--[ 2022.11.15.10.15.10.495.0 ]--
r 20         rbst
--[ 2022.11.15.10.15.10.684.0 ]--
r 20         rbst.
--[ 2022.11.15.10.15.13.219.0 ]--
r 20         rbst.put
--[ 2022.11.15.10.15.13.233.0 ]--
r 20         rbst.put()
--[ 2022.11.15.10.15.13.237.0 ]--
r 20         rbst.put();
--[ 2022.11.15.10.15.14.732.0 ]--
r 20         rbst.put(p);
--[ 2022.11.15.10.15.14.988.0 ]--
r 20         rbst.put(p,);
--[ 2022.11.15.10.15.15.172.0 ]--
r 20         rbst.put(p,v);
--[ 2022.11.15.10.15.16.674.0 ]--
+ 20         rbst.put(p,v)
r 21         ;
--[ 2022.11.15.10.15.17.358.0 ]--
- 20
r 20         rbst.put(p,v);
--[ 2022.11.15.10.15.17.507.0 ]--
r 20         rbst.put(p,v;
--[ 2022.11.15.10.15.18.596.0 ]--
r 20         rbst.put(p,v);
--[ 2022.11.15.10.15.43.292.0 ]--
r 24         return r;
--[ 2022.11.15.10.15.43.584.0 ]--
r 24         return rb;
--[ 2022.11.15.10.15.43.790.0 ]--
r 24         return rbs;
--[ 2022.11.15.10.15.43.974.0 ]--
r 24         return rbst;
--[ 2022.11.15.10.15.44.291.0 ]--
r 24         return rbst.;
--[ 2022.11.15.10.15.44.951.0 ]--
r 24         return rbst.get;
--[ 2022.11.15.10.15.44.957.0 ]--
r 24         return rbst.get();
--[ 2022.11.15.10.15.45.740.0 ]--
r 24         return rbst.get(p);
--[ 2022.11.15.10.15.51.563.0 ]--
r 28         return r;
--[ 2022.11.15.10.15.51.750.0 ]--
r 28         return rb;
--[ 2022.11.15.10.15.51.937.0 ]--
r 28         return rbs;
--[ 2022.11.15.10.15.52.139.0 ]--
r 28         return rbst;
--[ 2022.11.15.10.15.54.436.0 ]--
r 28         return rbst.contains;
--[ 2022.11.15.10.15.54.451.0 ]--
r 28         return rbst;;
--[ 2022.11.15.10.15.54.461.0 ]--
r 28         return rbst.contains;
--[ 2022.11.15.10.15.54.466.0 ]--
r 28         return rbst.contains();
--[ 2022.11.15.10.15.55.404.0 ]--
r 28         return rbst.contains(p);
--[ 2022.11.15.10.16.32.667.0 ]--
r 32     public Iterable<Point> points() { 
--[ 2022.11.15.10.16.32.833.0 ]--
r 32     public Iterable<Point> points() { /
--[ 2022.11.15.10.16.32.984.0 ]--
r 32     public Iterable<Point> points() { //
--[ 2022.11.15.10.16.33.673.0 ]--
r 32     public Iterable<Point> points() { //d
--[ 2022.11.15.10.16.33.848.0 ]--
r 32     public Iterable<Point> points() { //de
--[ 2022.11.15.10.16.33.935.0 ]--
r 32     public Iterable<Point> points() { //del
--[ 2022.11.15.10.16.34.048.0 ]--
r 32     public Iterable<Point> points() { //dele
--[ 2022.11.15.10.16.34.243.0 ]--
r 32     public Iterable<Point> points() { //delet
--[ 2022.11.15.10.16.34.491.0 ]--
r 32     public Iterable<Point> points() { //deleti
--[ 2022.11.15.10.16.34.567.0 ]--
r 32     public Iterable<Point> points() { //deletio
--[ 2022.11.15.10.16.34.730.0 ]--
r 32     public Iterable<Point> points() { //deletion
--[ 2022.11.15.10.16.35.062.0 ]--
r 32     public Iterable<Point> points() { //deletions
--[ 2022.11.15.10.16.35.389.0 ]--
r 32     public Iterable<Point> points() { //deletions?
--[ 2022.11.15.10.16.55.850.0 ]--
+ 49     public Point min() { 
r 50         return null; }
--[ 2022.11.15.10.16.57.445.0 ]--
+ 50         return null; 
r 51     }
--[ 2022.11.15.10.16.59.730.0 ]--
+ 50         
--[ 2022.11.15.10.17.03.956.0 ]--
r 50         /
--[ 2022.11.15.10.17.04.052.0 ]--
r 50         //
--[ 2022.11.15.10.17.04.840.0 ]--
r 50         //i
--[ 2022.11.15.10.17.04.933.0 ]--
r 50         //it
--[ 2022.11.15.10.17.05.078.0 ]--
r 50         //ite
--[ 2022.11.15.10.17.05.149.0 ]--
r 50         //iter
--[ 2022.11.15.10.17.05.388.0 ]--
r 50         //itera
--[ 2022.11.15.10.17.05.623.0 ]--
r 50         //iterab
--[ 2022.11.15.10.17.05.760.0 ]--
r 50         //iterabl
--[ 2022.11.15.10.17.05.847.0 ]--
r 50         //iterable
--[ 2022.11.15.10.17.09.589.0 ]--
+ 51         
--[ 2022.11.15.10.17.12.728.0 ]--
r 50         //fiterable
--[ 2022.11.15.10.17.12.861.0 ]--
r 50         //foiterable
--[ 2022.11.15.10.17.12.916.0 ]--
r 50         //foriterable
--[ 2022.11.15.10.17.13.030.0 ]--
r 50         //for iterable
--[ 2022.11.15.10.17.13.223.0 ]--
r 50         //for eiterable
--[ 2022.11.15.10.17.13.427.0 ]--
r 50         //for eaiterable
--[ 2022.11.15.10.17.13.620.0 ]--
r 50         //for eaciterable
--[ 2022.11.15.10.17.13.716.0 ]--
r 50         //for eachiterable
--[ 2022.11.15.10.17.13.821.0 ]--
r 50         //for each iterable
--[ 2022.11.15.10.17.14.967.0 ]--
r 50         //for each iterable 
--[ 2022.11.15.10.17.15.087.0 ]--
r 50         //for each iterable l
--[ 2022.11.15.10.17.15.253.0 ]--
r 50         //for each iterable lo
--[ 2022.11.15.10.17.15.356.0 ]--
r 50         //for each iterable loo
--[ 2022.11.15.10.17.15.564.0 ]--
r 50         //for each iterable loop
--[ 2022.11.15.10.17.15.844.0 ]--
r 50         //for each iterable loop,
--[ 2022.11.15.10.17.15.989.0 ]--
r 50         //for each iterable loop, 
--[ 2022.11.15.10.17.16.180.0 ]--
r 50         //for each iterable loop, r
--[ 2022.11.15.10.17.16.254.0 ]--
r 50         //for each iterable loop, re
--[ 2022.11.15.10.17.16.361.0 ]--
r 50         //for each iterable loop, rem
--[ 2022.11.15.10.17.16.471.0 ]--
r 50         //for each iterable loop, reme
--[ 2022.11.15.10.17.16.521.0 ]--
r 50         //for each iterable loop, remem
--[ 2022.11.15.10.17.16.747.0 ]--
r 50         //for each iterable loop, rememb
--[ 2022.11.15.10.17.16.911.0 ]--
r 50         //for each iterable loop, remembe
--[ 2022.11.15.10.17.16.995.0 ]--
r 50         //for each iterable loop, remember
--[ 2022.11.15.10.17.17.084.0 ]--
r 50         //for each iterable loop, remember 
--[ 2022.11.15.10.17.17.199.0 ]--
r 50         //for each iterable loop, remember t
--[ 2022.11.15.10.17.17.254.0 ]--
r 50         //for each iterable loop, remember th
--[ 2022.11.15.10.17.17.347.0 ]--
r 50         //for each iterable loop, remember the
--[ 2022.11.15.10.17.17.421.0 ]--
r 50         //for each iterable loop, remember the 
--[ 2022.11.15.10.17.17.597.0 ]--
r 50         //for each iterable loop, remember the m
--[ 2022.11.15.10.17.17.696.0 ]--
r 50         //for each iterable loop, remember the mi
--[ 2022.11.15.10.17.17.804.0 ]--
r 50         //for each iterable loop, remember the min
--[ 2022.11.15.10.17.19.762.0 ]--
+ 54     public Point max() { 
r 55         return null; }
--[ 2022.11.15.10.17.21.298.0 ]--
+ 55         return null; 
r 56     }
--[ 2022.11.15.10.17.23.544.0 ]--
+ 55         
--[ 2022.11.15.10.17.24.455.0 ]--
r 55         /
--[ 2022.11.15.10.17.24.568.0 ]--
r 55         //
--[ 2022.11.15.10.17.24.904.0 ]--
r 55         // 
--[ 2022.11.15.10.17.25.035.0 ]--
r 55         // s
--[ 2022.11.15.10.17.25.202.0 ]--
r 55         // sa
--[ 2022.11.15.10.17.25.313.0 ]--
r 55         // sam
--[ 2022.11.15.10.17.25.426.0 ]--
r 55         // same
--[ 2022.11.15.10.17.25.537.0 ]--
r 55         // same 
--[ 2022.11.15.10.17.25.774.0 ]--
r 55         // same a
--[ 2022.11.15.10.17.25.920.0 ]--
r 55         // same as
--[ 2022.11.15.10.17.26.041.0 ]--
r 55         // same as 
--[ 2022.11.15.10.17.26.214.0 ]--
r 55         // same as m
--[ 2022.11.15.10.17.26.332.0 ]--
r 55         // same as mi
--[ 2022.11.15.10.17.26.448.0 ]--
r 55         // same as min
--[ 2022.11.15.10.17.26.714.0 ]--
r 55         // same as min,
--[ 2022.11.15.10.17.26.818.0 ]--
r 55         // same as min, 
--[ 2022.11.15.10.17.27.591.0 ]--
r 55         // same as min, b
--[ 2022.11.15.10.17.27.669.0 ]--
r 55         // same as min, bu
--[ 2022.11.15.10.17.27.773.0 ]--
r 55         // same as min, but
--[ 2022.11.15.10.17.27.862.0 ]--
r 55         // same as min, but 
--[ 2022.11.15.10.17.28.358.0 ]--
r 55         // same as min, but w
--[ 2022.11.15.10.17.28.466.0 ]--
r 55         // same as min, but wi
--[ 2022.11.15.10.17.28.636.0 ]--
r 55         // same as min, but wit
--[ 2022.11.15.10.17.28.744.0 ]--
r 55         // same as min, but with
--[ 2022.11.15.10.17.28.884.0 ]--
r 55         // same as min, but with 
--[ 2022.11.15.10.17.29.045.0 ]--
r 55         // same as min, but with m
--[ 2022.11.15.10.17.29.168.0 ]--
r 55         // same as min, but with ma
--[ 2022.11.15.10.17.29.492.0 ]--
r 55         // same as min, but with max
--[ 2022.11.15.10.17.32.499.0 ]--
r 55         //same as min, but with max
--[ 2022.11.15.10.18.53.917.0 ]--
r 32     public Iterable<Point> points() { 
--[ 2022.11.15.10.18.57.757.0 ]--
r 33         return r;
--[ 2022.11.15.10.18.58.017.0 ]--
r 33         return rb;
--[ 2022.11.15.10.18.58.183.0 ]--
r 33         return rbs;
--[ 2022.11.15.10.18.58.369.0 ]--
r 33         return rbst;
--[ 2022.11.15.10.18.58.549.0 ]--
r 33         return rbst.;
--[ 2022.11.15.10.19.00.181.0 ]--
r 33         return rbst.keys;
--[ 2022.11.15.10.19.00.187.0 ]--
r 33         return rbst.keys();
--[ 2022.11.15.10.19.16.680.0 ]--
r 51         r
--[ 2022.11.15.10.19.17.306.0 ]--
r 51         
--[ 2022.11.15.10.19.17.667.0 ]--
r 51         f
--[ 2022.11.15.10.19.17.752.0 ]--
r 51         fo
--[ 2022.11.15.10.19.17.839.0 ]--
r 51         for
--[ 2022.11.15.10.19.18.014.0 ]--
r 51         for 
--[ 2022.11.15.10.19.18.498.0 ]--
r 51         for
--[ 2022.11.15.10.19.18.972.0 ]--
r 51         for()
--[ 2022.11.15.10.19.19.833.0 ]--
r 51         for( )
--[ 2022.11.15.10.19.24.305.0 ]--
r 51         for( V)
--[ 2022.11.15.10.19.24.628.0 ]--
r 51         for( )
--[ 2022.11.15.10.19.25.093.0 ]--
r 51         for( P)
--[ 2022.11.15.10.19.25.410.0 ]--
r 51         for( Po)
--[ 2022.11.15.10.19.25.535.0 ]--
r 51         for( Poi)
--[ 2022.11.15.10.19.25.751.0 ]--
r 51         for( Poin)
--[ 2022.11.15.10.19.25.858.0 ]--
r 51         for( Point)
--[ 2022.11.15.10.19.26.809.0 ]--
r 51         for( Point )
--[ 2022.11.15.10.19.26.938.0 ]--
r 51         for( Point p)
--[ 2022.11.15.10.19.27.613.0 ]--
r 51         for( Point p )
--[ 2022.11.15.10.19.27.732.0 ]--
r 51         for( Point p :)
--[ 2022.11.15.10.19.28.051.0 ]--
r 51         for( Point p : )
--[ 2022.11.15.10.19.29.311.0 ]--
r 51         for( Point p : r)
--[ 2022.11.15.10.19.29.493.0 ]--
r 51         for( Point p : rb)
--[ 2022.11.15.10.19.29.694.0 ]--
r 51         for( Point p : rbs)
--[ 2022.11.15.10.19.29.870.0 ]--
r 51         for( Point p : rbst)
--[ 2022.11.15.10.19.30.063.0 ]--
r 51         for( Point p : rbst.)
--[ 2022.11.15.10.19.30.704.0 ]--
r 51         for( Point p : rbst.keys)
--[ 2022.11.15.10.19.30.711.0 ]--
r 51         for( Point p : rbst.keys())
--[ 2022.11.15.10.19.32.055.0 ]--
r 51         for( Point p : rbst.keys()) 
--[ 2022.11.15.10.19.32.347.0 ]--
r 51         for( Point p : rbst.keys()) {
--[ 2022.11.15.10.19.32.556.0 ]--
+ 52 
+ 53 }
--[ 2022.11.15.10.19.32.575.0 ]--
r 53         }
--[ 2022.11.15.10.19.32.589.0 ]--
r 52             
--[ 2022.11.15.10.19.41.563.0 ]--
+ 51         
--[ 2022.11.15.10.19.43.651.0 ]--
r 51         m
--[ 2022.11.15.10.19.44.125.0 ]--
r 51         
--[ 2022.11.15.10.19.45.110.0 ]--
r 51         P
--[ 2022.11.15.10.19.45.367.0 ]--
r 51         Po
--[ 2022.11.15.10.19.45.568.0 ]--
r 51         Poi
--[ 2022.11.15.10.19.45.794.0 ]--
r 51         Poin
--[ 2022.11.15.10.19.45.952.0 ]--
r 51         Point
--[ 2022.11.15.10.19.46.366.0 ]--
r 51         Point 
--[ 2022.11.15.10.19.46.560.0 ]--
r 51         Point m
--[ 2022.11.15.10.19.46.679.0 ]--
r 51         Point mi
--[ 2022.11.15.10.19.46.787.0 ]--
r 51         Point min
--[ 2022.11.15.10.19.47.415.0 ]--
r 51         Point min;
--[ 2022.11.15.10.19.49.272.0 ]--
r 51         Point min ;
--[ 2022.11.15.10.19.49.429.0 ]--
r 51         Point min =;
--[ 2022.11.15.10.19.49.508.0 ]--
r 51         Point min = ;
--[ 2022.11.15.10.19.50.008.0 ]--
r 51         Point min = n;
--[ 2022.11.15.10.19.50.189.0 ]--
r 51         Point min = nu;
--[ 2022.11.15.10.19.50.342.0 ]--
r 51         Point min = nul;
--[ 2022.11.15.10.19.50.463.0 ]--
r 51         Point min = null;
--[ 2022.11.15.10.19.53.425.0 ]--
r 53             i
--[ 2022.11.15.10.19.53.487.0 ]--
r 53             if
--[ 2022.11.15.10.19.54.436.0 ]--
r 53             if()
--[ 2022.11.15.10.19.56.635.0 ]--
r 53             if(m)
--[ 2022.11.15.10.19.56.768.0 ]--
r 53             if(mi)
--[ 2022.11.15.10.19.56.917.0 ]--
r 53             if(min)
--[ 2022.11.15.10.19.57.309.0 ]--
r 53             if(min )
--[ 2022.11.15.10.19.57.535.0 ]--
r 53             if(min =)
--[ 2022.11.15.10.19.57.635.0 ]--
r 53             if(min ==)
--[ 2022.11.15.10.19.57.768.0 ]--
r 53             if(min == )
--[ 2022.11.15.10.19.57.983.0 ]--
r 53             if(min == n)
--[ 2022.11.15.10.19.58.172.0 ]--
r 53             if(min == nu)
--[ 2022.11.15.10.19.58.342.0 ]--
r 53             if(min == nul)
--[ 2022.11.15.10.19.58.451.0 ]--
r 53             if(min == null)
--[ 2022.11.15.10.19.59.450.0 ]--
r 53             if(min == null) 
--[ 2022.11.15.10.20.00.449.0 ]--
r 53             if(min == null) m
--[ 2022.11.15.10.20.00.627.0 ]--
r 53             if(min == null) mi
--[ 2022.11.15.10.20.00.741.0 ]--
r 53             if(min == null) min
--[ 2022.11.15.10.20.00.924.0 ]--
r 53             if(min == null) min 
--[ 2022.11.15.10.20.01.559.0 ]--
r 53             if(min == null) min =
--[ 2022.11.15.10.20.01.705.0 ]--
r 53             if(min == null) min = 
--[ 2022.11.15.10.20.02.668.0 ]--
r 53             if(min == null) min = p
--[ 2022.11.15.10.20.03.101.0 ]--
r 53             if(min == null) min = p;
--[ 2022.11.15.10.20.03.588.0 ]--
+ 54             
--[ 2022.11.15.10.20.06.055.0 ]--
r 54             i
--[ 2022.11.15.10.20.06.101.0 ]--
r 54             if
--[ 2022.11.15.10.20.06.225.0 ]--
r 54             if 
--[ 2022.11.15.10.20.07.389.0 ]--
r 54             if
--[ 2022.11.15.10.20.07.745.0 ]--
r 54             i
--[ 2022.11.15.10.20.07.863.0 ]--
r 54             
--[ 2022.11.15.10.20.09.772.0 ]--
r 54             p
--[ 2022.11.15.10.20.10.150.0 ]--
r 54             p.
--[ 2022.11.15.10.20.10.429.0 ]--
r 54             p.c
--[ 2022.11.15.10.20.10.467.0 ]--
r 54             p.co
--[ 2022.11.15.10.20.10.648.0 ]--
r 54             p.com
--[ 2022.11.15.10.20.10.798.0 ]--
r 54             p.comp
--[ 2022.11.15.10.20.10.901.0 ]--
r 54             p.compa
--[ 2022.11.15.10.20.10.979.0 ]--
r 54             p.compar
--[ 2022.11.15.10.20.11.302.0 ]--
r 54             p.compare
--[ 2022.11.15.10.20.11.922.0 ]--
r 54             p.compar
--[ 2022.11.15.10.20.12.025.0 ]--
r 54             p.compa
--[ 2022.11.15.10.20.12.136.0 ]--
r 54             p.comp
--[ 2022.11.15.10.20.12.255.0 ]--
r 54             p.com
--[ 2022.11.15.10.20.12.387.0 ]--
r 54             p.co
--[ 2022.11.15.10.20.12.520.0 ]--
r 54             p.c
--[ 2022.11.15.10.20.12.645.0 ]--
r 54             p.
--[ 2022.11.15.10.20.12.779.0 ]--
r 54             p
--[ 2022.11.15.10.20.12.897.0 ]--
r 54             
--[ 2022.11.15.10.20.13.344.0 ]--
r 54             m
--[ 2022.11.15.10.20.13.545.0 ]--
r 54             mi
--[ 2022.11.15.10.20.13.762.0 ]--
r 54             min
--[ 2022.11.15.10.20.14.116.0 ]--
r 54             min.
--[ 2022.11.15.10.20.14.472.0 ]--
r 54             min.c
--[ 2022.11.15.10.20.15.028.0 ]--
r 54             min.compareTo
--[ 2022.11.15.10.20.15.035.0 ]--
r 54             min.compareTo()
--[ 2022.11.15.10.20.15.917.0 ]--
r 54             min.compareTo(p)
--[ 2022.11.15.10.20.17.698.0 ]--
r 54             min.compareTo(p) 
--[ 2022.11.15.10.20.18.925.0 ]--
r 54             min.compareTo(p) <
--[ 2022.11.15.10.20.19.590.0 ]--
r 54             min.compareTo(p) <0
--[ 2022.11.15.10.20.20.000.0 ]--
r 54             min.compareTo(p) <
--[ 2022.11.15.10.20.20.064.0 ]--
r 54             min.compareTo(p) < 
--[ 2022.11.15.10.20.20.232.0 ]--
r 54             min.compareTo(p) < 0
--[ 2022.11.15.10.20.25.321.0 ]--
r 54             min.compareTo(p) < 0)
--[ 2022.11.15.10.20.26.671.0 ]--
r 54             imin.compareTo(p) < 0)
--[ 2022.11.15.10.20.26.784.0 ]--
r 54             ifmin.compareTo(p) < 0)
--[ 2022.11.15.10.20.27.013.0 ]--
r 54             if(min.compareTo(p) < 0)
--[ 2022.11.15.10.20.28.567.0 ]--
r 54             if(min.compareTo(p) < 0) 
--[ 2022.11.15.10.20.34.839.0 ]--
r 54             if(min.compareTo(p)  0) 
--[ 2022.11.15.10.20.35.240.0 ]--
r 54             if(min.compareTo(p) > 0) 
--[ 2022.11.15.10.20.37.466.0 ]--
r 54             if(min.compareTo(p) > 0) m
--[ 2022.11.15.10.20.37.587.0 ]--
r 54             if(min.compareTo(p) > 0) mi
--[ 2022.11.15.10.20.37.725.0 ]--
r 54             if(min.compareTo(p) > 0) min
--[ 2022.11.15.10.20.37.901.0 ]--
r 54             if(min.compareTo(p) > 0) min 
--[ 2022.11.15.10.20.38.167.0 ]--
r 54             if(min.compareTo(p) > 0) min =
--[ 2022.11.15.10.20.38.409.0 ]--
r 54             if(min.compareTo(p) > 0) min = 
--[ 2022.11.15.10.20.38.658.0 ]--
r 54             if(min.compareTo(p) > 0) min = p
--[ 2022.11.15.10.20.39.032.0 ]--
r 54             if(min.compareTo(p) > 0) min = pl
--[ 2022.11.15.10.20.39.529.0 ]--
r 54             if(min.compareTo(p) > 0) min = p
--[ 2022.11.15.10.20.39.884.0 ]--
r 54             if(min.compareTo(p) > 0) min = p;
--[ 2022.11.15.10.20.53.738.0 ]--
r 56         return m; 
--[ 2022.11.15.10.20.53.845.0 ]--
r 56         return mi; 
--[ 2022.11.15.10.20.53.975.0 ]--
r 56         return min; 
--[ 2022.11.15.10.20.59.117.0 ]--
+ 60         Point min = null;
+ 61         for( Point p : rbst.keys()) {
+ 62             if(min == null) min = p;
+ 63             if(min.compareTo(p) > 0) min = p;
+ 64         }
r 65         return min; 
--[ 2022.11.15.10.20.59.136.0 ]--
r 65         return min;
--[ 2022.11.15.10.21.01.111.0 ]--
r 60         Point m = null;
--[ 2022.11.15.10.21.01.226.0 ]--
r 60         Point ma = null;
--[ 2022.11.15.10.21.01.414.0 ]--
r 60         Point max = null;
--[ 2022.11.15.10.21.03.361.0 ]--
r 62             if(min == null) m = p;
--[ 2022.11.15.10.21.03.455.0 ]--
r 62             if(min == null) ma = p;
--[ 2022.11.15.10.21.03.687.0 ]--
r 62             if(min == null) max = p;
--[ 2022.11.15.10.21.04.938.0 ]--
r 62             if(m == null) max = p;
--[ 2022.11.15.10.21.05.019.0 ]--
r 62             if(ma == null) max = p;
--[ 2022.11.15.10.21.05.183.0 ]--
r 62             if(max == null) max = p;
--[ 2022.11.15.10.21.07.010.0 ]--
r 63             if(min.compareTo(p) > 0) m = p;
--[ 2022.11.15.10.21.07.096.0 ]--
r 63             if(min.compareTo(p) > 0) ma = p;
--[ 2022.11.15.10.21.07.269.0 ]--
r 63             if(min.compareTo(p) > 0) max = p;
--[ 2022.11.15.10.21.08.636.0 ]--
r 63             if(m.compareTo(p) > 0) max = p;
--[ 2022.11.15.10.21.08.708.0 ]--
r 63             if(ma.compareTo(p) > 0) max = p;
--[ 2022.11.15.10.21.08.871.0 ]--
r 63             if(max.compareTo(p) > 0) max = p;
--[ 2022.11.15.10.21.10.626.0 ]--
r 65         return m;
--[ 2022.11.15.10.21.10.699.0 ]--
r 65         return ma;
--[ 2022.11.15.10.21.10.836.0 ]--
r 65         return max;
--[ 2022.11.15.10.22.38.197.0 ]--
r 51         Point minx = null;
--[ 2022.11.15.10.22.40.589.0 ]--
+ 52         
--[ 2022.11.15.10.22.41.369.0 ]--
r 52         P
--[ 2022.11.15.10.22.41.647.0 ]--
r 52         Po
--[ 2022.11.15.10.22.41.936.0 ]--
r 52         Pon
--[ 2022.11.15.10.22.42.237.0 ]--
r 52         Po
--[ 2022.11.15.10.22.42.354.0 ]--
r 52         P
--[ 2022.11.15.10.22.42.484.0 ]--
r 52         
--[ 2022.11.15.10.22.42.606.0 ]--
- 52
--[ 2022.11.15.10.22.43.172.0 ]--
+ 52         
--[ 2022.11.15.10.22.43.803.0 ]--
r 52         I
--[ 2022.11.15.10.22.44.021.0 ]--
r 52         In
--[ 2022.11.15.10.22.44.126.0 ]--
r 52         Int
--[ 2022.11.15.10.22.44.304.0 ]--
r 52         Int 
--[ 2022.11.15.10.22.44.553.0 ]--
r 52         Int m
--[ 2022.11.15.10.22.44.704.0 ]--
r 52         Int mi
--[ 2022.11.15.10.22.44.861.0 ]--
r 52         Int min
--[ 2022.11.15.10.22.45.054.0 ]--
r 52         Int miny
--[ 2022.11.15.10.22.47.172.0 ]--
r 51         I minx = null;
--[ 2022.11.15.10.22.47.366.0 ]--
r 51         In minx = null;
--[ 2022.11.15.10.22.47.494.0 ]--
r 51         Int minx = null;
--[ 2022.11.15.10.23.30.812.0 ]--
r 51         d minx = null;
--[ 2022.11.15.10.23.30.875.0 ]--
r 51         do minx = null;
--[ 2022.11.15.10.23.30.956.0 ]--
r 51         dou minx = null;
--[ 2022.11.15.10.23.31.147.0 ]--
r 51         doub minx = null;
--[ 2022.11.15.10.23.31.217.0 ]--
r 51         doubl minx = null;
--[ 2022.11.15.10.23.31.365.0 ]--
r 51         double minx = null;
--[ 2022.11.15.10.23.32.743.0 ]--
r 52         d miny
--[ 2022.11.15.10.23.32.852.0 ]--
r 52         do miny
--[ 2022.11.15.10.23.32.913.0 ]--
r 52         dou miny
--[ 2022.11.15.10.23.33.128.0 ]--
r 52         doub miny
--[ 2022.11.15.10.23.33.236.0 ]--
r 52         doubl miny
--[ 2022.11.15.10.23.33.332.0 ]--
r 52         double miny
--[ 2022.11.15.10.23.34.721.0 ]--
r 52         double miny 
--[ 2022.11.15.10.23.34.953.0 ]--
r 52         double miny =
--[ 2022.11.15.10.23.35.085.0 ]--
r 52         double miny = 
--[ 2022.11.15.10.23.35.231.0 ]--
r 52         double miny = 0
--[ 2022.11.15.10.23.35.626.0 ]--
r 52         double miny = 0.
--[ 2022.11.15.10.23.36.153.0 ]--
r 52         double miny = 0
--[ 2022.11.15.10.23.36.443.0 ]--
r 52         double miny = 0;
--[ 2022.11.15.10.23.37.904.0 ]--
r 51         double minx = 0;
--[ 2022.11.15.10.23.57.629.0 ]--
r 51         double minx = ;
--[ 2022.11.15.10.23.58.183.0 ]--
r 51         double minx = n;
--[ 2022.11.15.10.23.58.484.0 ]--
r 51         double minx = nu;
--[ 2022.11.15.10.23.58.642.0 ]--
r 51         double minx = nul;
--[ 2022.11.15.10.23.58.757.0 ]--
r 51         double minx = null;
--[ 2022.11.15.10.24.01.674.0 ]--
r 51         double minx = nul;
--[ 2022.11.15.10.24.01.816.0 ]--
r 51         double minx = nu;
--[ 2022.11.15.10.24.01.967.0 ]--
r 51         double minx = n;
--[ 2022.11.15.10.24.02.140.0 ]--
r 51         double minx = ;
--[ 2022.11.15.10.24.02.351.0 ]--
r 51         double minx =;
--[ 2022.11.15.10.24.02.953.0 ]--
r 51         double minx = ;
--[ 2022.11.15.10.24.04.317.0 ]--
r 51         double minx = -;
--[ 2022.11.15.10.24.04.378.0 ]--
r 51         double minx = -1;
--[ 2022.11.15.10.24.05.521.0 ]--
r 52         double miny = ;
--[ 2022.11.15.10.24.05.778.0 ]--
r 52         double miny = -;
--[ 2022.11.15.10.24.05.898.0 ]--
r 52         double miny = -1;
--[ 2022.11.15.10.24.22.766.0 ]--
r 51         double minx = -;
--[ 2022.11.15.10.24.22.876.0 ]--
r 51         double minx = ;
--[ 2022.11.15.10.24.25.313.0 ]--
r 52         double miny = -;
--[ 2022.11.15.10.24.25.419.0 ]--
r 52         double miny = ;
--[ 2022.11.15.10.27.16.489.0 ]--
- 51
- 51
- 51
- 51
- 51
r 51 
--[ 2022.11.15.10.27.17.055.0 ]--
- 51
--[ 2022.11.15.10.27.19.686.0 ]--
- 55
- 55
- 55
- 55
r 55 
--[ 2022.11.15.10.27.20.205.0 ]--
- 55
--[ 2022.11.15.10.27.25.929.0 ]--
+ 14     
--[ 2022.11.15.10.27.29.044.0 ]--
r 14     d
--[ 2022.11.15.10.27.29.245.0 ]--
r 14     do
--[ 2022.11.15.10.27.29.352.0 ]--
r 14     dou
--[ 2022.11.15.10.27.29.483.0 ]--
r 14     doub
--[ 2022.11.15.10.27.29.617.0 ]--
r 14     doubl
--[ 2022.11.15.10.27.29.723.0 ]--
r 14     doubld
--[ 2022.11.15.10.27.30.311.0 ]--
r 14     doubld 
--[ 2022.11.15.10.27.30.616.0 ]--
r 14     doubld
--[ 2022.11.15.10.27.30.714.0 ]--
r 14     doubl
--[ 2022.11.15.10.27.30.808.0 ]--
r 14     double
--[ 2022.11.15.10.27.30.902.0 ]--
r 14     double 
--[ 2022.11.15.10.27.32.675.0 ]--
r 14     double m
--[ 2022.11.15.10.27.32.826.0 ]--
r 14     double mi
--[ 2022.11.15.10.27.32.930.0 ]--
r 14     double min
--[ 2022.11.15.10.27.33.510.0 ]--
r 14     double min;
--[ 2022.11.15.10.27.33.723.0 ]--
+ 15     
--[ 2022.11.15.10.27.35.008.0 ]--
r 15     d
--[ 2022.11.15.10.27.35.064.0 ]--
r 15     do
--[ 2022.11.15.10.27.35.147.0 ]--
r 15     dou
--[ 2022.11.15.10.27.35.356.0 ]--
r 15     doub
--[ 2022.11.15.10.27.35.449.0 ]--
r 15     doubl
--[ 2022.11.15.10.27.35.551.0 ]--
r 15     double
--[ 2022.11.15.10.27.35.704.0 ]--
r 15     double 
--[ 2022.11.15.10.27.35.950.0 ]--
r 15     double m
--[ 2022.11.15.10.27.36.028.0 ]--
r 15     double ma
--[ 2022.11.15.10.27.36.236.0 ]--
r 15     double max
--[ 2022.11.15.10.27.36.679.0 ]--
r 15     double max;
--[ 2022.11.15.10.27.39.673.0 ]--
+ 23         
--[ 2022.11.15.10.27.40.925.0 ]--
r 23         i
--[ 2022.11.15.10.27.41.032.0 ]--
r 23         if
--[ 2022.11.15.10.27.41.795.0 ]--
r 23         if()
--[ 2022.11.15.10.27.42.292.0 ]--
r 23         if(s)
--[ 2022.11.15.10.27.42.391.0 ]--
r 23         if(si)
--[ 2022.11.15.10.27.42.550.0 ]--
r 23         if(siz)
--[ 2022.11.15.10.27.42.682.0 ]--
r 23         if(size)
--[ 2022.11.15.10.27.43.013.0 ]--
r 23         if(siz)
--[ 2022.11.15.10.27.43.116.0 ]--
r 23         if(si)
--[ 2022.11.15.10.27.43.240.0 ]--
r 23         if(s)
--[ 2022.11.15.10.27.43.360.0 ]--
r 23         if()
--[ 2022.11.15.10.27.43.624.0 ]--
r 23         if(r)
--[ 2022.11.15.10.27.43.958.0 ]--
r 23         if(rb)
--[ 2022.11.15.10.27.44.135.0 ]--
r 23         if(rbs)
--[ 2022.11.15.10.27.45.127.0 ]--
r 23         if(rbst)
--[ 2022.11.15.10.27.45.337.0 ]--
r 23         if(rbst.)
--[ 2022.11.15.10.27.45.546.0 ]--
r 23         if(rbst.s)
--[ 2022.11.15.10.27.47.089.0 ]--
r 23         if(rbst.size)
--[ 2022.11.15.10.27.47.098.0 ]--
r 23         if(rbst.size())
--[ 2022.11.15.10.27.47.956.0 ]--
r 23         if(rbst.size() )
--[ 2022.11.15.10.27.48.218.0 ]--
r 23         if(rbst.size() =)
--[ 2022.11.15.10.27.48.323.0 ]--
r 23         if(rbst.size() ==)
--[ 2022.11.15.10.27.48.566.0 ]--
r 23         if(rbst.size() == )
--[ 2022.11.15.10.27.49.098.0 ]--
r 23         if(rbst.size() == 1)
--[ 2022.11.15.10.27.50.892.0 ]--
r 23         if(rbst.size() == 1) 
--[ 2022.11.15.10.27.52.065.0 ]--
r 23         if(rbst.size() == 1) {
--[ 2022.11.15.10.27.52.299.0 ]--
+ 24 
+ 25 }
--[ 2022.11.15.10.27.52.304.0 ]--
r 25         }
--[ 2022.11.15.10.27.52.312.0 ]--
r 24             
--[ 2022.11.15.10.27.53.654.0 ]--
r 24             m
--[ 2022.11.15.10.27.53.793.0 ]--
r 24             mi
--[ 2022.11.15.10.27.53.908.0 ]--
r 24             min
--[ 2022.11.15.10.27.58.610.0 ]--
r 14     double minx;
--[ 2022.11.15.10.28.03.426.0 ]--
+ 14     double minx;
--[ 2022.11.15.10.28.04.909.0 ]--
+ 14     double minx;
--[ 2022.11.15.10.28.07.159.0 ]--
r 15     double min;
--[ 2022.11.15.10.28.07.250.0 ]--
r 15     double miny;
--[ 2022.11.15.10.28.09.239.0 ]--
r 16     double mix;
--[ 2022.11.15.10.28.09.369.0 ]--
r 16     double mx;
--[ 2022.11.15.10.28.09.687.0 ]--
r 16     double max;
--[ 2022.11.15.10.28.09.953.0 ]--
r 16     double maxx;
--[ 2022.11.15.10.28.13.089.0 ]--
r 17     double maxy;
--[ 2022.11.15.10.28.18.681.0 ]--
r 26             minx
--[ 2022.11.15.10.28.25.740.0 ]--
r 26             minx 
--[ 2022.11.15.10.28.25.850.0 ]--
r 26             minx =
--[ 2022.11.15.10.28.25.963.0 ]--
r 26             minx = 
--[ 2022.11.15.10.28.29.045.0 ]--
r 26             minx = p
--[ 2022.11.15.10.28.29.520.0 ]--
r 26             minx = p.
--[ 2022.11.15.10.28.30.520.0 ]--
r 26             minx = p.x
--[ 2022.11.15.10.28.30.526.0 ]--
r 26             minx = p.x()
--[ 2022.11.15.10.28.31.764.0 ]--
r 26             minx = p.x();
--[ 2022.11.15.10.28.32.128.0 ]--
+ 27             
--[ 2022.11.15.10.28.33.280.0 ]--
r 27             m
--[ 2022.11.15.10.28.33.374.0 ]--
r 27             ma
--[ 2022.11.15.10.28.33.596.0 ]--
r 27             max
--[ 2022.11.15.10.28.34.147.0 ]--
r 27             maxx
--[ 2022.11.15.10.28.34.965.0 ]--
r 27             maxx 
--[ 2022.11.15.10.28.35.076.0 ]--
r 27             maxx =
--[ 2022.11.15.10.28.35.195.0 ]--
r 27             maxx = 
--[ 2022.11.15.10.28.35.574.0 ]--
r 27             maxx = p
--[ 2022.11.15.10.28.35.831.0 ]--
r 27             maxx = p.
--[ 2022.11.15.10.28.36.079.0 ]--
r 27             maxx = p.x
--[ 2022.11.15.10.28.36.334.0 ]--
r 27             maxx = p.x()
--[ 2022.11.15.10.28.37.003.0 ]--
r 27             maxx = p.x();
--[ 2022.11.15.10.28.37.218.0 ]--
+ 28             
--[ 2022.11.15.10.28.37.758.0 ]--
+ 28             
--[ 2022.11.15.10.28.39.177.0 ]--
- 28
--[ 2022.11.15.10.28.39.818.0 ]--
+ 28             
--[ 2022.11.15.10.28.42.228.0 ]--
+ 27             
--[ 2022.11.15.10.28.42.713.0 ]--
+ 27             
--[ 2022.11.15.10.28.44.075.0 ]--
r 27             m
--[ 2022.11.15.10.28.45.091.0 ]--
r 27             mi
--[ 2022.11.15.10.28.45.227.0 ]--
r 27             min
--[ 2022.11.15.10.28.45.470.0 ]--
r 27             miny
--[ 2022.11.15.10.28.45.785.0 ]--
r 27             miny 
--[ 2022.11.15.10.28.46.012.0 ]--
r 27             miny =
--[ 2022.11.15.10.28.46.107.0 ]--
r 27             miny = 
--[ 2022.11.15.10.28.46.428.0 ]--
r 27             miny = p
--[ 2022.11.15.10.28.46.644.0 ]--
r 27             miny = p.
--[ 2022.11.15.10.28.46.859.0 ]--
r 27             miny = p.y
--[ 2022.11.15.10.28.47.381.0 ]--
r 27             miny = p.y()
--[ 2022.11.15.10.28.48.017.0 ]--
r 27             miny = p.y();
--[ 2022.11.15.10.28.49.635.0 ]--
r 30             m
--[ 2022.11.15.10.28.49.824.0 ]--
r 30             ma
--[ 2022.11.15.10.28.50.091.0 ]--
r 30             max
--[ 2022.11.15.10.28.50.959.0 ]--
r 30             maxy
--[ 2022.11.15.10.28.51.042.0 ]--
r 30             maxy 
--[ 2022.11.15.10.28.51.455.0 ]--
r 30             maxy =
--[ 2022.11.15.10.28.51.528.0 ]--
r 30             maxy = 
--[ 2022.11.15.10.28.51.733.0 ]--
r 30             maxy = p
--[ 2022.11.15.10.28.52.560.0 ]--
r 30             maxy = p.
--[ 2022.11.15.10.28.52.843.0 ]--
r 30             maxy = p.y
--[ 2022.11.15.10.28.53.127.0 ]--
r 30             maxy = p.y()
--[ 2022.11.15.10.28.54.568.0 ]--
- 31
--[ 2022.11.15.10.28.55.331.0 ]--
r 30             maxy = p.y();
--[ 2022.11.15.10.28.58.033.0 ]--
+ 32         
--[ 2022.11.15.10.28.59.053.0 ]--
r 32         e
--[ 2022.11.15.10.28.59.119.0 ]--
r 32         el
--[ 2022.11.15.10.28.59.229.0 ]--
r 32         els
--[ 2022.11.15.10.28.59.337.0 ]--
r 32         else
--[ 2022.11.15.10.28.59.569.0 ]--
r 32         else 
--[ 2022.11.15.10.29.00.195.0 ]--
r 32         else {
--[ 2022.11.15.10.29.00.437.0 ]--
+ 33 
+ 34 }
--[ 2022.11.15.10.29.00.444.0 ]--
r 34         }
--[ 2022.11.15.10.29.00.454.0 ]--
r 33             
--[ 2022.11.15.10.29.02.486.0 ]--
r 33             i
--[ 2022.11.15.10.29.02.559.0 ]--
r 33             if
--[ 2022.11.15.10.29.05.966.0 ]--
r 33             if()
--[ 2022.11.15.10.29.08.292.0 ]--
r 33             if(m)
--[ 2022.11.15.10.29.08.379.0 ]--
r 33             if(mi)
--[ 2022.11.15.10.29.08.896.0 ]--
r 33             if(min)
--[ 2022.11.15.10.29.09.162.0 ]--
r 33             if(minx)
--[ 2022.11.15.10.29.09.795.0 ]--
r 33             if(min)
--[ 2022.11.15.10.29.10.380.0 ]--
r 33             if(minx)
--[ 2022.11.15.10.29.10.865.0 ]--
r 33             if(minx )
--[ 2022.11.15.10.29.11.228.0 ]--
r 33             if(minx <)
--[ 2022.11.15.10.29.11.586.0 ]--
r 33             if(minx < )
--[ 2022.11.15.10.29.15.554.0 ]--
r 33             if(minx < p)
--[ 2022.11.15.10.29.15.946.0 ]--
r 33             if(minx < p.)
--[ 2022.11.15.10.29.16.304.0 ]--
r 33             if(minx < p.x)
--[ 2022.11.15.10.29.17.162.0 ]--
r 33             if(minx < p.)
--[ 2022.11.15.10.29.17.741.0 ]--
r 33             if(minx < p.x)
--[ 2022.11.15.10.29.18.093.0 ]--
r 33             if(minx < p.x())
--[ 2022.11.15.10.29.21.611.0 ]--
r 33             if(minx  p.x())
--[ 2022.11.15.10.29.21.983.0 ]--
r 33             if(minx > p.x())
--[ 2022.11.15.10.29.27.539.0 ]--
r 33             if(p)
--[ 2022.11.15.10.29.28.732.0 ]--
r 33             if(p.)
--[ 2022.11.15.10.29.28.953.0 ]--
r 33             if(p.y)
--[ 2022.11.15.10.29.29.384.0 ]--
r 33             if(p.)
--[ 2022.11.15.10.29.29.460.0 ]--
r 33             if(p.x)
--[ 2022.11.15.10.29.30.856.0 ]--
r 33             if(p.x())
--[ 2022.11.15.10.29.31.483.0 ]--
r 33             if(p.x() )
--[ 2022.11.15.10.29.31.665.0 ]--
r 33             if(p.x() <)
--[ 2022.11.15.10.29.31.954.0 ]--
r 33             if(p.x() < )
--[ 2022.11.15.10.29.32.327.0 ]--
r 33             if(p.x() < m)
--[ 2022.11.15.10.29.32.508.0 ]--
r 33             if(p.x() < mi)
--[ 2022.11.15.10.29.32.673.0 ]--
r 33             if(p.x() < min)
--[ 2022.11.15.10.29.32.827.0 ]--
r 33             if(p.x() < minx)
--[ 2022.11.15.10.29.34.442.0 ]--
r 33             if(p.x() < minx) 
--[ 2022.11.15.10.29.34.980.0 ]--
r 33             if(p.x() < minx) n
--[ 2022.11.15.10.29.35.177.0 ]--
r 33             if(p.x() < minx) ni
--[ 2022.11.15.10.29.35.321.0 ]--
r 33             if(p.x() < minx) nin
--[ 2022.11.15.10.29.36.030.0 ]--
r 33             if(p.x() < minx) ni
--[ 2022.11.15.10.29.36.145.0 ]--
r 33             if(p.x() < minx) n
--[ 2022.11.15.10.29.36.233.0 ]--
r 33             if(p.x() < minx) 
--[ 2022.11.15.10.29.36.514.0 ]--
r 33             if(p.x() < minx) m
--[ 2022.11.15.10.29.36.634.0 ]--
r 33             if(p.x() < minx) mi
--[ 2022.11.15.10.29.36.803.0 ]--
r 33             if(p.x() < minx) min
--[ 2022.11.15.10.29.36.996.0 ]--
r 33             if(p.x() < minx) minx
--[ 2022.11.15.10.29.37.641.0 ]--
r 33             if(p.x() < minx) minx 
--[ 2022.11.15.10.29.37.822.0 ]--
r 33             if(p.x() < minx) minx =
--[ 2022.11.15.10.29.37.923.0 ]--
r 33             if(p.x() < minx) minx = 
--[ 2022.11.15.10.29.38.253.0 ]--
r 33             if(p.x() < minx) minx = p
--[ 2022.11.15.10.29.38.557.0 ]--
r 33             if(p.x() < minx) minx = p.
--[ 2022.11.15.10.29.40.002.0 ]--
r 33             if(p.x() < minx) minx = p.x
--[ 2022.11.15.10.29.40.299.0 ]--
r 33             if(p.x() < minx) minx = p.x()
--[ 2022.11.15.10.29.40.885.0 ]--
r 33             if(p.x() < minx) minx = p.x();
--[ 2022.11.15.10.29.44.611.0 ]--
+ 34 
--[ 2022.11.15.10.29.45.813.0 ]--
+ 33             if(p.x() < minx) minx = p.x();
--[ 2022.11.15.10.29.46.334.0 ]--
+ 33             if(p.x() < minx) minx = p.x();
--[ 2022.11.15.10.29.46.719.0 ]--
+ 33             if(p.x() < minx) minx = p.x();
--[ 2022.11.15.10.29.47.845.0 ]--
- 37
--[ 2022.11.15.10.29.50.267.0 ]--
r 34             if(p.x() < minx) min = p.x();
--[ 2022.11.15.10.29.50.291.0 ]--
r 34             if(p.x() < minx) miny = p.x();
--[ 2022.11.15.10.29.51.630.0 ]--
r 34             if(p.x() < minx) miny = p.();
--[ 2022.11.15.10.29.51.661.0 ]--
r 34             if(p.x() < minx) miny = p.y();
--[ 2022.11.15.10.29.53.195.0 ]--
r 34             if(p.x() < min) miny = p.y();
--[ 2022.11.15.10.29.53.228.0 ]--
r 34             if(p.x() < miny) miny = p.y();
--[ 2022.11.15.10.29.54.756.0 ]--
r 34             if(p.() < miny) miny = p.y();
--[ 2022.11.15.10.29.54.791.0 ]--
r 34             if(p.y() < miny) miny = p.y();
--[ 2022.11.15.10.29.56.270.0 ]--
+ 35             
--[ 2022.11.15.10.30.00.357.0 ]--
r 36             if(p.x()  minx) minx = p.x();
--[ 2022.11.15.10.30.00.829.0 ]--
r 36             if(p.x() > minx) minx = p.x();
--[ 2022.11.15.10.30.02.903.0 ]--
r 36             if(p.x() > mix) minx = p.x();
--[ 2022.11.15.10.30.03.006.0 ]--
r 36             if(p.x() > mx) minx = p.x();
--[ 2022.11.15.10.30.03.184.0 ]--
r 36             if(p.x() > max) minx = p.x();
--[ 2022.11.15.10.30.03.371.0 ]--
r 36             if(p.x() > maxx) minx = p.x();
--[ 2022.11.15.10.30.04.745.0 ]--
r 36             if(p.x() > maxx) m = p.x();
--[ 2022.11.15.10.30.04.833.0 ]--
r 36             if(p.x() > maxx) ma = p.x();
--[ 2022.11.15.10.30.05.073.0 ]--
r 36             if(p.x() > maxx) max = p.x();
--[ 2022.11.15.10.30.05.261.0 ]--
r 36             if(p.x() > maxx) maxx = p.x();
--[ 2022.11.15.10.30.08.753.0 ]--
r 37             if(p.() < minx) minx = p.x();
--[ 2022.11.15.10.30.09.016.0 ]--
r 37             if(p.y() < minx) minx = p.x();
--[ 2022.11.15.10.30.12.046.0 ]--
r 37             if(p.y() >x) minx = p.x();
--[ 2022.11.15.10.30.12.296.0 ]--
r 37             if(p.y() > x) minx = p.x();
--[ 2022.11.15.10.30.13.212.0 ]--
r 37             if(p.y() > mx) minx = p.x();
--[ 2022.11.15.10.30.13.317.0 ]--
r 37             if(p.y() > mix) minx = p.x();
--[ 2022.11.15.10.30.13.424.0 ]--
r 37             if(p.y() > minx) minx = p.x();
--[ 2022.11.15.10.30.14.555.0 ]--
r 37             if(p.y() > mix) minx = p.x();
--[ 2022.11.15.10.30.14.672.0 ]--
r 37             if(p.y() > mx) minx = p.x();
--[ 2022.11.15.10.30.14.809.0 ]--
r 37             if(p.y() > x) minx = p.x();
--[ 2022.11.15.10.30.15.499.0 ]--
r 37             if(p.y() > ) minx = p.x();
--[ 2022.11.15.10.30.15.769.0 ]--
r 37             if(p.y() > m) minx = p.x();
--[ 2022.11.15.10.30.15.927.0 ]--
r 37             if(p.y() > ma) minx = p.x();
--[ 2022.11.15.10.30.16.157.0 ]--
r 37             if(p.y() > max) minx = p.x();
--[ 2022.11.15.10.30.16.310.0 ]--
r 37             if(p.y() > maxy) minx = p.x();
--[ 2022.11.15.10.30.18.202.0 ]--
r 37             if(p.y() > maxy) m = p.x();
--[ 2022.11.15.10.30.18.294.0 ]--
r 37             if(p.y() > maxy) ma = p.x();
--[ 2022.11.15.10.30.18.412.0 ]--
r 37             if(p.y() > maxy) max = p.x();
--[ 2022.11.15.10.30.18.560.0 ]--
r 37             if(p.y() > maxy) maxy = p.x();
--[ 2022.11.15.10.30.20.383.0 ]--
r 37             if(p.y() > maxy) maxy = p.();
--[ 2022.11.15.10.30.20.481.0 ]--
r 37             if(p.y() > maxy) maxy = p.y();
--[ 2022.11.15.10.30.34.012.0 ]--
r 69         return mi; 
--[ 2022.11.15.10.30.34.151.0 ]--
r 69         return m; 
--[ 2022.11.15.10.30.34.291.0 ]--
r 69         return ; 
--[ 2022.11.15.10.30.36.691.0 ]--
r 73         return ma;
--[ 2022.11.15.10.30.36.808.0 ]--
r 73         return m;
--[ 2022.11.15.10.30.36.920.0 ]--
r 73         return ;
--[ 2022.11.15.10.30.49.696.0 ]--
r 69         return n; 
--[ 2022.11.15.10.30.49.810.0 ]--
r 69         return ne; 
--[ 2022.11.15.10.30.49.906.0 ]--
r 69         return new; 
--[ 2022.11.15.10.30.52.074.0 ]--
r 69         return new Point; 
--[ 2022.11.15.10.30.52.082.0 ]--
r 69         return new Point(); 
--[ 2022.11.15.10.30.54.476.0 ]--
r 69         return new Point(m); 
--[ 2022.11.15.10.30.54.596.0 ]--
r 69         return new Point(mi); 
--[ 2022.11.15.10.30.54.706.0 ]--
r 69         return new Point(min); 
--[ 2022.11.15.10.30.54.997.0 ]--
r 69         return new Point(minx); 
--[ 2022.11.15.10.30.55.402.0 ]--
r 69         return new Point(minx,); 
--[ 2022.11.15.10.30.55.554.0 ]--
r 69         return new Point(minx, ); 
--[ 2022.11.15.10.30.55.812.0 ]--
r 69         return new Point(minx, m); 
--[ 2022.11.15.10.30.55.941.0 ]--
r 69         return new Point(minx, mi); 
--[ 2022.11.15.10.30.56.050.0 ]--
r 69         return new Point(minx, min); 
--[ 2022.11.15.10.30.56.295.0 ]--
r 69         return new Point(minx, miny); 
--[ 2022.11.15.10.30.58.763.0 ]--
r 73         return n;
--[ 2022.11.15.10.30.58.863.0 ]--
r 73         return ne;
--[ 2022.11.15.10.30.58.950.0 ]--
r 73         return new;
--[ 2022.11.15.10.30.59.191.0 ]--
r 73         return new ;
--[ 2022.11.15.10.31.00.065.0 ]--
r 73         return new Point;
--[ 2022.11.15.10.31.00.078.0 ]--
r 73         return new Point();
--[ 2022.11.15.10.31.00.721.0 ]--
r 73         return new Point(m);
--[ 2022.11.15.10.31.00.798.0 ]--
r 73         return new Point(ma);
--[ 2022.11.15.10.31.00.990.0 ]--
r 73         return new Point(max);
--[ 2022.11.15.10.31.01.161.0 ]--
r 73         return new Point(maxx);
--[ 2022.11.15.10.31.01.764.0 ]--
r 73         return new Point(maxx,);
--[ 2022.11.15.10.31.01.864.0 ]--
r 73         return new Point(maxx, );
--[ 2022.11.15.10.31.02.103.0 ]--
r 73         return new Point(maxx, m);
--[ 2022.11.15.10.31.02.172.0 ]--
r 73         return new Point(maxx, ma);
--[ 2022.11.15.10.31.02.357.0 ]--
r 73         return new Point(maxx, max);
--[ 2022.11.15.10.31.02.545.0 ]--
r 73         return new Point(maxx, maxy);
--[ 2022.11.15.10.31.13.925.0 ]--
r 84     public int size() { return ; }
--[ 2022.11.15.10.31.14.252.0 ]--
r 84     public int size() { return r; }
--[ 2022.11.15.10.31.14.455.0 ]--
r 84     public int size() { return rb; }
--[ 2022.11.15.10.31.14.613.0 ]--
r 84     public int size() { return rbs; }
--[ 2022.11.15.10.31.14.778.0 ]--
r 84     public int size() { return rbst; }
--[ 2022.11.15.10.31.15.013.0 ]--
r 84     public int size() { return rbst.; }
--[ 2022.11.15.10.31.15.223.0 ]--
r 84     public int size() { return rbst.size; }
--[ 2022.11.15.10.31.15.228.0 ]--
r 84     public int size() { return rbst.size(); }
--[ 2022.11.15.10.31.18.787.0 ]--
r 87     public boolean isEmpty() { return r; }
--[ 2022.11.15.10.31.19.042.0 ]--
r 87     public boolean isEmpty() { return rb; }
--[ 2022.11.15.10.31.19.261.0 ]--
r 87     public boolean isEmpty() { return rbs; }
--[ 2022.11.15.10.31.19.911.0 ]--
r 87     public boolean isEmpty() { return rbst.isEmpty; }
--[ 2022.11.15.10.31.19.923.0 ]--
r 87     public boolean isEmpty() { return rbst;; }
--[ 2022.11.15.10.31.19.929.0 ]--
r 87     public boolean isEmpty() { return rbst.isEmpty; }
--[ 2022.11.15.10.31.19.934.0 ]--
r 87     public boolean isEmpty() { return rbst.isEmpty(); }
--[ 2022.11.15.10.31.24.359.0 ]--
r 28 
r 35 
r 50     public Iterable<Point> points() {
r 67     public Point min() {
r 69         return new Point(minx, miny);
r 71     public Point max() {
--[ 2022.11.15.10.31.25.271.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.15.10.31.39.347.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.15.10.32.24.987.0 ]--
+ 61         
--[ 2022.11.15.10.32.28.665.0 ]--
r 61         n
--[ 2022.11.15.10.32.28.712.0 ]--
r 61         ne
--[ 2022.11.15.10.32.29.078.0 ]--
r 61         nea
--[ 2022.11.15.10.32.29.221.0 ]--
r 61         near
--[ 2022.11.15.10.32.29.610.0 ]--
r 61         neare
--[ 2022.11.15.10.32.29.750.0 ]--
r 61         neares
--[ 2022.11.15.10.32.29.937.0 ]--
r 61         nearest
--[ 2022.11.15.10.32.30.698.0 ]--
r 61         nearest()
--[ 2022.11.15.10.32.31.189.0 ]--
r 61         nearest(p)
--[ 2022.11.15.10.32.32.304.0 ]--
r 61         nearest(p);
--[ 2022.11.15.10.32.35.712.0 ]--
r 61         Pnearest(p);
--[ 2022.11.15.10.32.35.939.0 ]--
r 61         Ponearest(p);
--[ 2022.11.15.10.32.36.033.0 ]--
r 61         Poinearest(p);
--[ 2022.11.15.10.32.36.236.0 ]--
r 61         Poinnearest(p);
--[ 2022.11.15.10.32.36.342.0 ]--
r 61         Pointnearest(p);
--[ 2022.11.15.10.32.36.434.0 ]--
r 61         Point nearest(p);
--[ 2022.11.15.10.32.40.721.0 ]--
r 61         Point nnearest(p);
--[ 2022.11.15.10.32.40.738.0 ]--
r 61         Point nenearest(p);
--[ 2022.11.15.10.32.40.909.0 ]--
r 61         Point neanearest(p);
--[ 2022.11.15.10.32.41.063.0 ]--
r 61         Point nearnearest(p);
--[ 2022.11.15.10.32.41.339.0 ]--
r 61         Point nearenearest(p);
--[ 2022.11.15.10.32.41.497.0 ]--
r 61         Point nearesnearest(p);
--[ 2022.11.15.10.32.41.655.0 ]--
r 61         Point nearestnearest(p);
--[ 2022.11.15.10.32.42.753.0 ]--
r 61         Point nearestPnearest(p);
--[ 2022.11.15.10.32.43.474.0 ]--
r 61         Point nearestPonearest(p);
--[ 2022.11.15.10.32.43.734.0 ]--
r 61         Point nearestPoinearest(p);
--[ 2022.11.15.10.32.43.895.0 ]--
r 61         Point nearestPoinnearest(p);
--[ 2022.11.15.10.32.44.022.0 ]--
r 61         Point nearestPointnearest(p);
--[ 2022.11.15.10.32.44.458.0 ]--
r 61         Point nearestPoint nearest(p);
--[ 2022.11.15.10.32.44.955.0 ]--
r 61         Point nearestPoint =nearest(p);
--[ 2022.11.15.10.32.45.035.0 ]--
r 61         Point nearestPoint = nearest(p);
--[ 2022.11.15.10.32.56.252.0 ]--
r 62         return n;
--[ 2022.11.15.10.32.56.321.0 ]--
r 62         return ne;
--[ 2022.11.15.10.32.56.514.0 ]--
r 62         return nea;
--[ 2022.11.15.10.32.56.617.0 ]--
r 62         return near;
--[ 2022.11.15.10.32.56.960.0 ]--
r 62         return nearestPoint;
--[ 2022.11.15.10.32.57.375.0 ]--
r 62         return nearestPoint.;
--[ 2022.11.15.10.33.00.253.0 ]--
r 62         return nearestPoint.v;
--[ 2022.11.15.10.33.01.878.0 ]--
r 62         return nearestPoint.val;
--[ 2022.11.15.10.33.01.889.0 ]--
r 62         return nearestPoint;
--[ 2022.11.15.10.33.01.938.0 ]--
r 62         return nearestPoint1;
--[ 2022.11.15.10.33.01.945.0 ]--
r 62         lombok.val nearestPoint1 = nearestPoint;return nearestPoint1;
--[ 2022.11.15.10.33.01.958.0 ]--
+ 62         lombok.val nearestPoint1 = nearestPoint;
r 63         return nearestPoint1;
--[ 2022.11.15.10.33.01.964.0 ]--
r 63         return nearestPoint;
--[ 2022.11.15.10.33.01.996.0 ]--
r 62           = nearestPoint;
r 63         return ;
--[ 2022.11.15.10.33.02.001.0 ]--
r 62         lombok.val  = nearestPoint;
--[ 2022.11.15.10.33.02.016.0 ]--
r 62         lombok.val nearestPoint1 = nearestPoint;
--[ 2022.11.15.10.33.02.018.0 ]--
r 63         return nearestPoint1;
--[ 2022.11.15.10.33.06.071.0 ]--
- 62
--[ 2022.11.15.10.33.07.775.0 ]--
r 62         return nearestPoint;
--[ 2022.11.15.10.33.31.777.0 ]--
r 62         return nearestPoint.;
--[ 2022.11.15.10.33.31.944.0 ]--
r 62         return nearestPoint.g;
--[ 2022.11.15.10.33.36.003.0 ]--
r 62         return nearestPoint.;
--[ 2022.11.15.10.33.36.125.0 ]--
r 62         return nearestPoint;
--[ 2022.11.15.10.33.39.462.0 ]--
r 62         return rnearestPoint;
--[ 2022.11.15.10.33.39.652.0 ]--
r 62         return rbnearestPoint;
--[ 2022.11.15.10.33.39.842.0 ]--
r 62         return rbsnearestPoint;
--[ 2022.11.15.10.33.40.012.0 ]--
r 62         return rbstnearestPoint;
--[ 2022.11.15.10.33.40.272.0 ]--
r 62         return rbst.nearestPoint;
--[ 2022.11.15.10.33.40.899.0 ]--
r 62         return rbst.gnearestPoint;
--[ 2022.11.15.10.33.41.175.0 ]--
r 62         return rbst.genearestPoint;
--[ 2022.11.15.10.33.41.372.0 ]--
r 62         return rbst.getnearestPoint;
--[ 2022.11.15.10.33.42.005.0 ]--
r 62         return rbst.get(nearestPoint;
--[ 2022.11.15.10.33.44.006.0 ]--
r 62         return rbst.get(nearestPoint);
--[ 2022.11.15.10.34.23.261.0 ]--
+ 79         
--[ 2022.11.15.10.34.30.746.0 ]--
r 79         I
--[ 2022.11.15.10.34.31.033.0 ]--
r 79         It
--[ 2022.11.15.10.34.31.180.0 ]--
r 79         Ite
--[ 2022.11.15.10.34.31.262.0 ]--
r 79         Iter
--[ 2022.11.15.10.34.32.503.0 ]--
r 79         Iterable
--[ 2022.11.15.10.34.33.605.0 ]--
r 79         Iterable<>
--[ 2022.11.15.10.34.34.242.0 ]--
r 79         Iterable<P>
--[ 2022.11.15.10.34.34.683.0 ]--
r 79         Iterable<Po>
--[ 2022.11.15.10.34.34.817.0 ]--
r 79         Iterable<Poi>
--[ 2022.11.15.10.34.35.046.0 ]--
r 79         Iterable<Poin>
--[ 2022.11.15.10.34.35.158.0 ]--
r 79         Iterable<Point>
--[ 2022.11.15.10.34.36.093.0 ]--
r 79         Iterable<Point> 
--[ 2022.11.15.10.34.38.141.0 ]--
r 79         Iterable<Point> p
--[ 2022.11.15.10.34.38.225.0 ]--
r 79         Iterable<Point> pt
--[ 2022.11.15.10.34.39.983.0 ]--
r 79         Iterable<Point> pti
--[ 2022.11.15.10.34.40.016.0 ]--
r 79         Iterable<Point> ptit
--[ 2022.11.15.10.34.41.164.0 ]--
r 79         Iterable<Point> ptit 
--[ 2022.11.15.10.34.41.722.0 ]--
r 79         Iterable<Point> ptit =
--[ 2022.11.15.10.34.41.808.0 ]--
r 79         Iterable<Point> ptit = 
--[ 2022.11.15.10.34.42.369.0 ]--
r 79         Iterable<Point> ptit = n
--[ 2022.11.15.10.34.42.424.0 ]--
r 79         Iterable<Point> ptit = ne
--[ 2022.11.15.10.34.42.521.0 ]--
r 79         Iterable<Point> ptit = new
--[ 2022.11.15.10.34.42.654.0 ]--
r 79         Iterable<Point> ptit = new 
--[ 2022.11.15.10.34.43.784.0 ]--
r 79         Iterable<Point> ptit = new Iterable
--[ 2022.11.15.10.34.43.797.0 ]--
r 79         Iterable<Point> ptit = new Iterable<Point>
--[ 2022.11.15.10.34.43.805.0 ]--
r 79         Iterable<Point> ptit = new Iterable<Point>() {}
--[ 2022.11.15.10.34.43.814.0 ]--
+ 79         Iterable<Point> ptit = new Iterable<Point>() {
r 80         }
--[ 2022.11.15.10.34.43.865.0 ]--
+ 80         @Override
+ 81             public Iterator<Point> iterator() {
+ 82                 return null;
r 83             }}
--[ 2022.11.15.10.34.43.878.0 ]--
r 80             @Override
+ 83             }
r 84         }
--[ 2022.11.15.10.35.45.682.0 ]--
- 80
- 80
- 80
r 80 
--[ 2022.11.15.10.35.46.687.0 ]--
- 80
--[ 2022.11.15.10.35.48.050.0 ]--
r 80         
--[ 2022.11.15.10.35.48.813.0 ]--
- 80
--[ 2022.11.15.10.35.53.595.0 ]--
r 79         Iterable<Point> ptit = new Iterable<>() {
--[ 2022.11.15.10.36.28.543.0 ]--
- 79
--[ 2022.11.15.11.28.46.487.0 ]--
:/src/PSBruteForce.java
r 8 // red-black trees
+ 12 
+ 13     RedBlackBST<Point, Value> rbst;
+ 14     double minx;
+ 15     double miny;
+ 16     double maxx;
+ 17     double maxy;
+ 18     public PSBruteForce() {
+ 19         rbst = new RedBlackBST<>();
r 20     }
+ 24         rbst.put(p,v);
+ 25         if(rbst.size() == 1) {
+ 26             minx = p.x();
+ 27             miny = p.y();
+ 28 
+ 29             maxx = p.x();
+ 30             maxy = p.y();
+ 31         }
+ 32         else {
+ 33             if(p.x() < minx) minx = p.x();
+ 34             if(p.y() < miny) miny = p.y();
+ 35 
+ 36             if(p.x() > maxx) maxx = p.x();
+ 37             if(p.y() > maxy) maxy = p.y();
+ 38         }
r 42         return rbst.get(p);
r 46         return rbst.contains(p);
r 51         return rbst.keys();
+ 56         Point currentNear = null;
+ 57         double nearDist = 0;
+ 58         int idx = 0;
+ 59         Iterable<Point> iter = points();
+ 60         for( Point i : iter ) {
+ 61             if(i != p ) {
+ 62                 double distance = p.dist(i);
+ 63                 if(idx == 0 || distance < nearDist) {
+ 64                     nearDist = distance;
+ 65                     currentNear = i;
+ 66                 }
+ 67             }
+ 68             idx++;
+ 69         }
r 70         return currentNear;
+ 75         Point nearestPoint = nearest(p);
r 76         return rbst.get(nearestPoint);
+ 82     public Point min() {
+ 83         //for each iterable loop, remember the min
+ 84         return new Point(minx, miny);
+ 85     }
+ 86     public Point max() {
+ 87         //same as min, but with max
+ 88         return new Point(maxx, maxy);
r 89     }
r 90 
+ 94         MaxPQ<PointDist> ptpq = new MaxPQ<>(k, PointDist::compareTo);
+ 95 
+ 96         Iterable<Point> iter = points();
+ 97         for( Point i : iter ) {
+ 98             if (i != p) {
+ 99                 PointDist distance = new PointDist(p, p.dist(i));
+ 100                 ptpq.insert(distance);
+ 101                 while (ptpq.size()>k) ptpq.delMax();
+ 102 
+ 103             }
+ 104 
+ 105         }
+ 106         Stack<Point> ptstack = new Stack<>();
+ 107         for(int idx=0; idx<k; idx++) {
+ 108             ptstack.push(ptpq.delMax().p());
+ 109         }
r 110         return ptstack;
r 116     public int size() { return rbst.size(); }
r 119     public boolean isEmpty() { return rbst.isEmpty(); }
--[ 2022.11.15.11.28.46.732.0 ]--
:/src/PSKDTree.java
+ 17 
r 26     public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inserting
+ 29 
r 34         return null; //search through the tree instead of returning null
r 38         return false; //searching again for p in the bst
r 47     public Iterable<Point> points() { return null; } //account for deletions?
--[ 2022.11.15.11.29.08.261.0 ]--
UpdateTree (AD): 24 0
+ /out/production/P05_KDTrees/.donotlog
+ /out/production/P05_KDTrees/algs4.jar
+ /out/production/P05_KDTrees/stdlib.jar
+ /out/production/P05_KDTrees/input1M.txt
+ /out/production/P05_KDTrees/Mouse.class
+ /out/production/P05_KDTrees/Point.class
+ /out/production/P05_KDTrees/input100K.txt
+ /out/production/P05_KDTrees/Point$1.class
+ /out/production/P05_KDTrees/Point$2.class
+ /out/production/P05_KDTrees/Point$3.class
+ /out/production/P05_KDTrees/Point$4.class
+ /out/production/P05_KDTrees/burgerking.csv
+ /out/production/P05_KDTrees/KeyPress.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/Partition.class
+ /out/production/P05_KDTrees/PointDist.class
+ /out/production/P05_KDTrees/Visualizer.class
+ /out/production/P05_KDTrees/PointSearch.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/FastFoodVisualizer.class
+ /out/production/P05_KDTrees/Partition$Direction.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__11_28_AM__Default_.xml

--[ 2022.11.15.11.29.08.262.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.15.11.30.34.532.0 ]--
UpdateTree (AD): 8 0
+ /.git/objects/21/5f9d8b463f594d7a29686b9e9be2c095a4e415
+ /.git/objects/2e/d4fe70b4e088ec2c3ac33ca08f741ed2d35a97
+ /.git/objects/6e/10e3d8976dabc74255b1ddce2024336f50d7e2
+ /.git/objects/9a/e8d0c18cb848aa651381c33a3fa44eddc40bcb
+ /.git/objects/b7/710fca979cfd5216bf2633dd1dfa8161d9f45f
+ /.git/objects/d4/85126c43a458d604c41191c3cd216e30972972
+ /.git/objects/ee/909fb82334c194c06fd779181ba31079f10d42
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_11_28_AM_[Default]/shelved.patch

--[ 2022.11.15.11.30.34.535.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.15.11.30.50.425.0 ]--
:/src/NearestNeighborVisualizer.java
r 18         return new PSBrut<>();
--[ 2022.11.15.11.30.50.643.0 ]--
r 18         return new PSBrute<>();
--[ 2022.11.15.11.30.51.762.0 ]--
r 18         return new PSBruteFo<>();
--[ 2022.11.15.11.30.51.924.0 ]--
r 18         return new PSBruteFor<>();
--[ 2022.11.15.11.30.52.247.0 ]--
r 18         return new PSBruteForc<>();
--[ 2022.11.15.11.30.52.462.0 ]--
r 18         return new PSBruteForce<>();
--[ 2022.11.15.11.30.56.494.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.15.20.38.16.942.0 ]--
:/src/PSBruteForce.java
r 94         MaxPQ<PointDist> ptpq = new MaxPQ<>();
r 98 
r 99                 PointDist distance = new PointDist(i, p.dist(i));
- 102
- 102
- 102
r 104         for(PointDist pd : ptpq) {
r 105             ptstack.push(pd.p());
--[ 2022.11.15.20.38.17.391.0 ]--
:/src/PSKDTree.java
r 25     // add the given Point to kD-tree -- here is 2D (x and y)
r 27         if (v == null) { return; } // can't do anything with a null value
r 28 
+ 30         count++;
--[ 2022.11.15.20.38.34.102.0 ]--
UpdateTree (AD): 8 0
+ /.git/objects/2d/684a62c75f8da8fc231206420108d204cbe252
+ /.git/objects/67/a3cbc10acb52f757cbd15ab1a2acaef561cf5d
+ /.git/objects/75/63d3f1a349009df7dbf21fee30194eead50ca0
+ /.git/objects/ce/2de51fa2f6dd8ca45683eb75ba132137da5a20
+ /.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
+ /.git/objects/e9/ce331a35ca02c33b0678d762c13fe57fe4a67a
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_8_38_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__8_38_PM__Default_.xml

--[ 2022.11.15.20.38.34.255.0 ]--
DisposeComponent
--[ 2022.11.16.13.13.05.618.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.16.13.13.05.908.0 ]--
InitTree:
/out/production/P05_KDTrees/.donotlog
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/input1M.txt
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/input100K.txt
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/burgerking.csv
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/main
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/main
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
/.git/objects/0f/05624ad8de377d4bdf3ec1558d477af125661c
/.git/objects/11/6f5b50e2bd7e5a645224f577c702fc62092122
/.git/objects/1a/49d62b998226393c172907eef021434d19be9a
/.git/objects/1f/b9dc988a5179e983b847d789447e3c5fa79e57
/.git/objects/21/5f9d8b463f594d7a29686b9e9be2c095a4e415
/.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
/.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
/.git/objects/2d/684a62c75f8da8fc231206420108d204cbe252
/.git/objects/2e/d4fe70b4e088ec2c3ac33ca08f741ed2d35a97
/.git/objects/30/6f36bddc52f2e08ccf8a41536340870eb1829c
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/39/5d98ffb25a1aa9df31eb7f0e6c2af2e28bc31d
/.git/objects/3c/91061820fd12503e015c3c19cec90b78494358
/.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4f/ce1d86b49521afe1cee4ed1c13b6396ebbc6f3
/.git/objects/54/0fd2392eaf74abc751e9970668bf235e56f803
/.git/objects/5c/98b428844d9f7d529e2b6fb918d15bf072f3df
/.git/objects/65/427e6010f1b59257bc8ac509401e7eeb2698d4
/.git/objects/67/a3cbc10acb52f757cbd15ab1a2acaef561cf5d
/.git/objects/68/2820a134168b0d23787b376165bef89b511f00
/.git/objects/6e/10e3d8976dabc74255b1ddce2024336f50d7e2
/.git/objects/6e/e6bdaf464e0f4adb373587a385e0875ebf8ba6
/.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
/.git/objects/75/63d3f1a349009df7dbf21fee30194eead50ca0
/.git/objects/7d/61ee6e1564fdc3e562582a8ca1c55185fd2b09
/.git/objects/80/8df08d052527e9a626a08c732fb0fb470708c8
/.git/objects/86/5b56d35df1dcfcbf5196eeddcef674c03a3a93
/.git/objects/8b/e37e197c873cbcd2952f364d9e3a447bc4e692
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/8d/e804238c33c653fe535bd162aabed440497ec7
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
/.git/objects/9a/8c6aff1f8871e01cacec32f40b40f4107494d2
/.git/objects/9a/e8d0c18cb848aa651381c33a3fa44eddc40bcb
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/aa/90a9d65e85ba8dedaeee57dbca845093794f15
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/39a65a74d4111e721807c06e27bd6754992fbb
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b7/710fca979cfd5216bf2633dd1dfa8161d9f45f
/.git/objects/c2/828bc31a68ae45ce1922d19323206b232cbda4
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/c7/ed19fcb2ed6617a23bd3e9a2efaa966bed42da
/.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
/.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
/.git/objects/ce/2de51fa2f6dd8ca45683eb75ba132137da5a20
/.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
/.git/objects/d4/85126c43a458d604c41191c3cd216e30972972
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/de/c87ed246fc3ca006dddb4db1972a0e1d67919e
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
/.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
/.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
/.git/objects/e9/ce331a35ca02c33b0678d762c13fe57fe4a67a
/.git/objects/ee/909fb82334c194c06fd779181ba31079f10d42
/.git/objects/ef/89a8450022222b69a62814d66e3f6c8ecb5a60
/.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
/.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
/.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_8_38_PM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_11_28_AM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22__1_29_PM__Default_.xml
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__8_38_PM__Default_.xml
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__11_28_AM__Default_.xml
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml

--[ 2022.11.16.13.13.05.911.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.16.13.13.05.911.1 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.16.13.13.05.911.2 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.16.13.13.05.912.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSBruteForce<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.16.13.13.05.913.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.16.13.13.05.913.1 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.16.13.13.05.915.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.16.13.13.05.916.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.16.13.13.05.916.1 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */

// red-black trees

public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection

    RedBlackBST<Point, Value> rbst;
    double minx;
    double miny;
    double maxx;
    double maxy;
    public PSBruteForce() {
        rbst = new RedBlackBST<>();
    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        rbst.put(p,v);
        if(rbst.size() == 1) {
            minx = p.x();
            miny = p.y();

            maxx = p.x();
            maxy = p.y();
        }
        else {
            if(p.x() < minx) minx = p.x();
            if(p.y() < miny) miny = p.y();

            if(p.x() > maxx) maxx = p.x();
            if(p.y() > maxy) maxy = p.y();
        }
    }

    public Value get(Point p) {
        return rbst.get(p);
    }

    public boolean contains(Point p) {
        return rbst.contains(p);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return rbst.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        Point currentNear = null;
        double nearDist = 0;
        int idx = 0;
        Iterable<Point> iter = points();
        for( Point i : iter ) {
            if(i != p ) {
                double distance = p.dist(i);
                if(idx == 0 || distance < nearDist) {
                    nearDist = distance;
                    currentNear = i;
                }
            }
            idx++;
        }
        return currentNear;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        Point nearestPoint = nearest(p);
        return rbst.get(nearestPoint);
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() {
        //for each iterable loop, remember the min
        return new Point(minx, miny);
    }
    public Point max() {
        //same as min, but with max
        return new Point(maxx, maxy);
    }


    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        MaxPQ<PointDist> ptpq = new MaxPQ<>();

        Iterable<Point> iter = points();
        for( Point i : iter ) {

                PointDist distance = new PointDist(i, p.dist(i));
                ptpq.insert(distance);
                while (ptpq.size()>k) ptpq.delMax();
        }
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return rbst.size(); }

    // return whether the KDTree is empty
    public boolean isEmpty() { return rbst.isEmpty(); }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2022.11.16.13.13.05.917.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;
    }
    BST<Point, Value> kdt;
    int count=0;

    Point minimum;
    Point maximum;
    // constructor makes empty kD-tree
    public PSKDTree() {
        kdt = new BST<Point, Value>();
    }

    // add the given Point to kD-tree -- here is 2D (x and y)
    public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inserting
        if (v == null) { return; } // can't do anything with a null value


        count++;
    }

    public Value get(Point p) {
        if(isEmpty()) return null;
        return null; //search through the tree instead of returning null
    }

    public boolean contains(Point p) {
        return false; //searching again for p in the bst
    }

    public Value getNearest(Point p) {
        if(isEmpty()) return null;
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; } //account for deletions?

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        return null;
    }
    public Point max() {
        if(isEmpty()) return null;
        return null;
    }

    // return the number of Points in kD-tree
    public int size() { return count; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return count==0; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.16.13.13.05.919.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.16.13.13.05.920.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.16.13.13.05.920.1 ]--
InitFile: /.cos265


--[ 2022.11.16.13.14.49.545.0 ]--
:/src/PSKDTree.java
+ 20     
--[ 2022.11.16.13.14.51.092.0 ]--
r 20     Popi
--[ 2022.11.16.13.14.51.783.0 ]--
r 20     Pop
--[ 2022.11.16.13.14.52.036.0 ]--
r 20     Po
--[ 2022.11.16.13.14.52.431.0 ]--
r 20     Poi
--[ 2022.11.16.13.14.52.657.0 ]--
r 20     Poin
--[ 2022.11.16.13.14.52.901.0 ]--
r 20     Point
--[ 2022.11.16.13.14.53.293.0 ]--
r 20     Point 
--[ 2022.11.16.13.14.53.833.0 ]--
r 20     Point ro
--[ 2022.11.16.13.14.54.053.0 ]--
r 20     Point root
--[ 2022.11.16.13.14.54.135.0 ]--
r 20     Point root;
--[ 2022.11.16.13.14.54.640.0 ]--
r 20     Point root; 
--[ 2022.11.16.13.14.56.693.0 ]--
r 20     Point root;
--[ 2022.11.16.13.14.56.888.0 ]--
r 20     Point root
--[ 2022.11.16.13.14.57.401.0 ]--
r 20     Point root=
--[ 2022.11.16.13.14.57.595.0 ]--
r 20     Point root=n
--[ 2022.11.16.13.14.57.848.0 ]--
r 20     Point root=nu
--[ 2022.11.16.13.14.58.037.0 ]--
r 20     Point root=nul
--[ 2022.11.16.13.14.58.172.0 ]--
r 20     Point root=null
--[ 2022.11.16.13.14.58.348.0 ]--
r 20     Point root=null;
--[ 2022.11.16.13.15.06.343.0 ]--
r 29     
--[ 2022.11.16.13.15.06.669.0 ]--
r 29         
--[ 2022.11.16.13.15.14.555.0 ]--
r 29         i
--[ 2022.11.16.13.15.14.824.0 ]--
r 29         if
--[ 2022.11.16.13.15.15.069.0 ]--
r 29         if()
--[ 2022.11.16.13.15.15.534.0 ]--
r 29         if(r)
--[ 2022.11.16.13.15.15.566.0 ]--
r 29         if(ro)
--[ 2022.11.16.13.15.15.731.0 ]--
r 29         if(roo)
--[ 2022.11.16.13.15.15.816.0 ]--
r 29         if(root)
--[ 2022.11.16.13.15.16.475.0 ]--
r 29         if(root=)
--[ 2022.11.16.13.15.16.630.0 ]--
r 29         if(root==)
--[ 2022.11.16.13.15.16.890.0 ]--
r 29         if(root==n)
--[ 2022.11.16.13.15.17.075.0 ]--
r 29         if(root==nu)
--[ 2022.11.16.13.15.17.246.0 ]--
r 29         if(root==nul)
--[ 2022.11.16.13.15.17.406.0 ]--
r 29         if(root==null)
--[ 2022.11.16.13.15.18.276.0 ]--
r 29         if(root==null) 
--[ 2022.11.16.13.15.22.741.0 ]--
r 29         if(root==null) ro
--[ 2022.11.16.13.15.22.922.0 ]--
r 29         if(root==null) roo
--[ 2022.11.16.13.15.23.050.0 ]--
r 29         if(root==null) root
--[ 2022.11.16.13.15.23.446.0 ]--
r 29         if(root==null) root=
--[ 2022.11.16.13.15.24.676.0 ]--
r 29         if(root==null) root=p
--[ 2022.11.16.13.15.25.518.0 ]--
r 29         if(root==null) root=p;
--[ 2022.11.16.13.15.35.120.0 ]--
r 30     
--[ 2022.11.16.13.15.35.289.0 ]--
r 30         
--[ 2022.11.16.13.17.33.375.0 ]--
r 20     N root=null;
--[ 2022.11.16.13.17.33.512.0 ]--
r 20     No root=null;
--[ 2022.11.16.13.17.33.684.0 ]--
r 20     Nod root=null;
--[ 2022.11.16.13.17.33.813.0 ]--
r 20     Node root=null;
--[ 2022.11.16.13.17.36.594.0 ]--
r 29         if(root==null) r
--[ 2022.11.16.13.17.36.749.0 ]--
r 29         if(root==null) 
--[ 2022.11.16.13.17.36.834.0 ]--
r 29         if(root==null)
--[ 2022.11.16.13.17.38.277.0 ]--
r 29         if(root==null) 
--[ 2022.11.16.13.17.39.529.0 ]--
+ 29         
--[ 2022.11.16.13.17.57.393.0 ]--
r 29         No
--[ 2022.11.16.13.17.57.662.0 ]--
r 29         Nod
--[ 2022.11.16.13.17.57.764.0 ]--
r 29         Node
--[ 2022.11.16.13.17.58.457.0 ]--
r 29         Node 
--[ 2022.11.16.13.18.00.002.0 ]--
r 29         Node x
--[ 2022.11.16.13.18.01.393.0 ]--
r 29         Node x 
--[ 2022.11.16.13.18.01.677.0 ]--
r 29         Node x =
--[ 2022.11.16.13.18.01.824.0 ]--
r 29         Node x = 
--[ 2022.11.16.13.18.01.992.0 ]--
r 29         Node x = n
--[ 2022.11.16.13.18.02.102.0 ]--
r 29         Node x = ne
--[ 2022.11.16.13.18.02.199.0 ]--
r 29         Node x = new
--[ 2022.11.16.13.18.02.396.0 ]--
r 29         Node x = new 
--[ 2022.11.16.13.18.02.528.0 ]--
r 29         Node x = new N
--[ 2022.11.16.13.18.02.682.0 ]--
r 29         Node x = new No
--[ 2022.11.16.13.18.02.791.0 ]--
r 29         Node x = new Nod
--[ 2022.11.16.13.18.02.931.0 ]--
r 29         Node x = new Node
--[ 2022.11.16.13.18.03.115.0 ]--
r 29         Node x = new Node;
--[ 2022.11.16.13.18.05.424.0 ]--
+ 30         
--[ 2022.11.16.13.18.18.171.0 ]--
r 29         Node x = new Node();
--[ 2022.11.16.13.18.22.987.0 ]--
r 30         x
--[ 2022.11.16.13.18.23.185.0 ]--
r 30         x.
--[ 2022.11.16.13.18.26.239.0 ]--
r 30         x.p
--[ 2022.11.16.13.18.28.057.0 ]--
r 30         x.p=
--[ 2022.11.16.13.18.29.173.0 ]--
r 30         x.p=p;
--[ 2022.11.16.13.18.29.471.0 ]--
+ 31         
--[ 2022.11.16.13.18.30.611.0 ]--
r 31         x
--[ 2022.11.16.13.18.30.798.0 ]--
r 31         x.
--[ 2022.11.16.13.18.31.023.0 ]--
r 31         x.v
--[ 2022.11.16.13.18.31.897.0 ]--
r 31         x.v=
--[ 2022.11.16.13.18.31.963.0 ]--
r 31         x.v=v
--[ 2022.11.16.13.18.32.416.0 ]--
r 31         x.v=v;
--[ 2022.11.16.13.18.36.765.0 ]--
+ 32         
--[ 2022.11.16.13.18.50.395.0 ]--
- 32
--[ 2022.11.16.13.18.51.803.0 ]--
r 32         if(root==null) {
--[ 2022.11.16.13.18.51.885.0 ]--
r 32         if(root==null) {}
--[ 2022.11.16.13.18.52.527.0 ]--
+ 32         if(root==null) {
r 33         }
--[ 2022.11.16.13.18.52.599.0 ]--
+ 33             
--[ 2022.11.16.13.18.52.693.0 ]--
+ 33             
--[ 2022.11.16.13.18.53.265.0 ]--
- 33
--[ 2022.11.16.13.19.00.251.0 ]--
r 33             x
--[ 2022.11.16.13.19.00.675.0 ]--
r 33             x.
--[ 2022.11.16.13.19.03.778.0 ]--
r 33             x.le
--[ 2022.11.16.13.19.03.903.0 ]--
r 33             x.lef
--[ 2022.11.16.13.19.04.118.0 ]--
r 33             x.left
--[ 2022.11.16.13.19.04.472.0 ]--
r 33             x.left=
--[ 2022.11.16.13.19.04.702.0 ]--
r 33             x.left=n
--[ 2022.11.16.13.19.04.985.0 ]--
r 33             x.left=nu
--[ 2022.11.16.13.19.05.582.0 ]--
r 33             x.left=nul
--[ 2022.11.16.13.19.05.798.0 ]--
r 33             x.left=null
--[ 2022.11.16.13.19.06.949.0 ]--
r 33             x.left=null;
--[ 2022.11.16.13.19.07.126.0 ]--
+ 34             
--[ 2022.11.16.13.19.07.880.0 ]--
r 34             x
--[ 2022.11.16.13.19.08.115.0 ]--
r 34             x.
--[ 2022.11.16.13.19.08.306.0 ]--
r 34             x.r
--[ 2022.11.16.13.19.08.337.0 ]--
r 34             x.ri
--[ 2022.11.16.13.19.08.441.0 ]--
r 34             x.rig
--[ 2022.11.16.13.19.08.487.0 ]--
r 34             x.righ
--[ 2022.11.16.13.19.08.637.0 ]--
r 34             x.right
--[ 2022.11.16.13.19.09.083.0 ]--
r 34             x.right=
--[ 2022.11.16.13.19.09.501.0 ]--
r 34             x.right=n
--[ 2022.11.16.13.19.09.722.0 ]--
r 34             x.right=nu
--[ 2022.11.16.13.19.09.959.0 ]--
r 34             x.right=nul
--[ 2022.11.16.13.19.10.118.0 ]--
r 34             x.right=null
--[ 2022.11.16.13.19.10.259.0 ]--
r 34             x.right=null;
--[ 2022.11.16.13.19.10.474.0 ]--
+ 35             
--[ 2022.11.16.13.19.11.128.0 ]--
r 35             x
--[ 2022.11.16.13.19.11.340.0 ]--
r 35             x.
--[ 2022.11.16.13.19.13.436.0 ]--
r 35             x.d
--[ 2022.11.16.13.19.14.055.0 ]--
r 35             x.di
--[ 2022.11.16.13.19.16.130.0 ]--
r 35             x.dir
--[ 2022.11.16.13.19.16.157.0 ]--
r 35             x.dire
--[ 2022.11.16.13.19.16.594.0 ]--
r 35             x.dir
--[ 2022.11.16.13.19.19.988.0 ]--
r 35             x.dir=
--[ 2022.11.16.13.19.22.498.0 ]--
r 35             x.dir=L
--[ 2022.11.16.13.19.22.794.0 ]--
r 35             x.dir=Le
--[ 2022.11.16.13.19.23.564.0 ]--
r 35             x.dir=L
--[ 2022.11.16.13.19.24.230.0 ]--
r 35             x.dir=LE
--[ 2022.11.16.13.19.25.780.0 ]--
r 35             x.dir=
--[ 2022.11.16.13.19.26.283.0 ]--
r 35             x.dir=D
--[ 2022.11.16.13.19.26.532.0 ]--
r 35             x.dir=Do
--[ 2022.11.16.13.19.26.663.0 ]--
r 35             x.dir=Dow
--[ 2022.11.16.13.19.26.831.0 ]--
r 35             x.dir=Down
--[ 2022.11.16.13.19.28.232.0 ]--
r 35             x.dir=Downu
--[ 2022.11.16.13.19.28.296.0 ]--
r 35             x.dir=Downup
--[ 2022.11.16.13.19.30.407.0 ]--
r 35             x.dir=Downup;
--[ 2022.11.16.13.19.30.756.0 ]--
r 35             x.dir=Downup; 
--[ 2022.11.16.13.19.34.422.0 ]--
r 35             x.dir=DO; 
--[ 2022.11.16.13.19.34.491.0 ]--
r 35             x.dir=DOW; 
--[ 2022.11.16.13.19.34.707.0 ]--
r 35             x.dir=DOWN; 
--[ 2022.11.16.13.19.34.963.0 ]--
r 35             x.dir=DOWNU; 
--[ 2022.11.16.13.19.35.086.0 ]--
r 35             x.dir=DOWNUP; 
--[ 2022.11.16.13.19.36.523.0 ]--
r 35             x.dir=Partition.Direction.DOWNUP; 
--[ 2022.11.16.13.19.36.549.0 ]--
r 35             x.dir=DOWNUP; 
--[ 2022.11.16.13.19.36.559.0 ]--
r 35             x.dir=.DOWNUP; 
--[ 2022.11.16.13.19.36.568.0 ]--
r 35             x.dir=Direction.DOWNUP; 
--[ 2022.11.16.13.19.36.617.0 ]--
r 35             x.dir=Partition.Direction.DOWNUP; 
--[ 2022.11.16.13.19.36.699.0 ]--
r 35             x.dir= Partition.Direction.DOWNUP; 
--[ 2022.11.16.13.19.43.423.0 ]--
+ 36             
--[ 2022.11.16.13.19.43.643.0 ]--
r 36             r
--[ 2022.11.16.13.19.43.742.0 ]--
r 36             ro
--[ 2022.11.16.13.19.43.817.0 ]--
r 36             roo
--[ 2022.11.16.13.19.44.415.0 ]--
r 36             root
--[ 2022.11.16.13.19.44.585.0 ]--
r 36             root=
--[ 2022.11.16.13.19.45.117.0 ]--
r 36             root=x
--[ 2022.11.16.13.19.45.211.0 ]--
r 36             root=x;
--[ 2022.11.16.13.22.50.232.0 ]--
+ 37             
--[ 2022.11.16.13.24.06.260.0 ]--
r 35             x.dir= Partition.Direction.DOWNUP;
r 37 
r 39 
--[ 2022.11.16.13.26.46.692.0 ]--
- 37
--[ 2022.11.16.13.26.47.895.0 ]--
- 38
--[ 2022.11.16.13.26.49.673.0 ]--
+ 40     
--[ 2022.11.16.13.26.51.927.0 ]--
r 40     p
--[ 2022.11.16.13.26.51.982.0 ]--
r 40     pr
--[ 2022.11.16.13.26.52.108.0 ]--
r 40     pri
--[ 2022.11.16.13.26.52.632.0 ]--
r 40     pr
--[ 2022.11.16.13.26.52.784.0 ]--
r 40     p
--[ 2022.11.16.13.26.52.972.0 ]--
r 40     
--[ 2022.11.16.13.26.53.196.0 ]--
+ 40     
--[ 2022.11.16.13.26.53.406.0 ]--
r 41     p
--[ 2022.11.16.13.26.53.587.0 ]--
r 41     pr
--[ 2022.11.16.13.26.53.733.0 ]--
r 41     pri
--[ 2022.11.16.13.26.53.873.0 ]--
r 41     priv
--[ 2022.11.16.13.26.54.174.0 ]--
r 41     priva
--[ 2022.11.16.13.26.54.471.0 ]--
r 41     privat
--[ 2022.11.16.13.26.54.781.0 ]--
r 41     private
--[ 2022.11.16.13.26.55.164.0 ]--
r 41     private 
--[ 2022.11.16.13.26.56.218.0 ]--
r 41     private N
--[ 2022.11.16.13.26.56.403.0 ]--
r 41     private No
--[ 2022.11.16.13.26.56.626.0 ]--
r 41     private Nod
--[ 2022.11.16.13.26.56.846.0 ]--
r 41     private Node
--[ 2022.11.16.13.26.58.636.0 ]--
r 41     private Node 
--[ 2022.11.16.13.26.58.669.0 ]--
r 41     private Node p
--[ 2022.11.16.13.26.58.874.0 ]--
r 41     private Node pu
--[ 2022.11.16.13.26.59.020.0 ]--
r 41     private Node put
--[ 2022.11.16.13.27.00.042.0 ]--
r 41     private Node put()
--[ 2022.11.16.13.27.06.785.0 ]--
r 41     private Node put(N)
--[ 2022.11.16.13.27.06.922.0 ]--
r 41     private Node put(No)
--[ 2022.11.16.13.27.07.043.0 ]--
r 41     private Node put(Nod)
--[ 2022.11.16.13.27.07.328.0 ]--
r 41     private Node put(Node)
--[ 2022.11.16.13.27.08.146.0 ]--
r 41     private Node put(Node )
--[ 2022.11.16.13.27.08.479.0 ]--
r 41     private Node put(Node x)
--[ 2022.11.16.13.27.08.777.0 ]--
r 41     private Node put(Node )
--[ 2022.11.16.13.27.08.879.0 ]--
r 41     private Node put(Node r)
--[ 2022.11.16.13.27.09.177.0 ]--
r 41     private Node put(Node ro)
--[ 2022.11.16.13.27.09.879.0 ]--
r 41     private Node put(Node r)
--[ 2022.11.16.13.27.09.986.0 ]--
r 41     private Node put(Node )
--[ 2022.11.16.13.27.10.471.0 ]--
r 41     private Node put(Node x)
--[ 2022.11.16.13.27.10.602.0 ]--
r 41     private Node put(Node x,)
--[ 2022.11.16.13.27.10.753.0 ]--
r 41     private Node put(Node x, )
--[ 2022.11.16.13.27.14.291.0 ]--
r 41     private Node put(Node x, {})
--[ 2022.11.16.13.27.14.470.0 ]--
r 41     private Node put(Node x, {p})
--[ 2022.11.16.13.27.14.634.0 ]--
r 41     private Node put(Node x, {pi})
--[ 2022.11.16.13.27.14.999.0 ]--
r 41     private Node put(Node x, {p})
--[ 2022.11.16.13.27.15.131.0 ]--
r 41     private Node put(Node x, {})
--[ 2022.11.16.13.27.15.274.0 ]--
r 41     private Node put(Node x, )
--[ 2022.11.16.13.27.15.598.0 ]--
r 41     private Node put(Node x, P)
--[ 2022.11.16.13.27.15.848.0 ]--
r 41     private Node put(Node x, Po)
--[ 2022.11.16.13.27.15.916.0 ]--
r 41     private Node put(Node x, Poi)
--[ 2022.11.16.13.27.16.069.0 ]--
r 41     private Node put(Node x, Poin)
--[ 2022.11.16.13.27.16.195.0 ]--
r 41     private Node put(Node x, Point)
--[ 2022.11.16.13.27.16.293.0 ]--
r 41     private Node put(Node x, Point )
--[ 2022.11.16.13.27.16.361.0 ]--
r 41     private Node put(Node x, Point p)
--[ 2022.11.16.13.27.16.708.0 ]--
r 41     private Node put(Node x, Point p,)
--[ 2022.11.16.13.27.17.733.0 ]--
r 41     private Node put(Node x, Point p, )
--[ 2022.11.16.13.27.18.250.0 ]--
r 41     private Node put(Node x, Point p, V)
--[ 2022.11.16.13.27.18.405.0 ]--
r 41     private Node put(Node x, Point p, Va)
--[ 2022.11.16.13.27.18.511.0 ]--
r 41     private Node put(Node x, Point p, Val)
--[ 2022.11.16.13.27.18.630.0 ]--
r 41     private Node put(Node x, Point p, Valu)
--[ 2022.11.16.13.27.18.782.0 ]--
r 41     private Node put(Node x, Point p, Value)
--[ 2022.11.16.13.27.19.294.0 ]--
r 41     private Node put(Node x, Point p, Value )
--[ 2022.11.16.13.27.19.375.0 ]--
r 41     private Node put(Node x, Point p, Value v)
--[ 2022.11.16.13.27.21.971.0 ]--
r 41     private Node put(Node x, Point p, Value v) 
--[ 2022.11.16.13.27.22.350.0 ]--
r 41     private Node put(Node x, Point p, Value v) {}
--[ 2022.11.16.13.27.23.044.0 ]--
+ 42     
--[ 2022.11.16.13.27.25.111.0 ]--
+ 41     private Node put(Node x, Point p, Value v) {
r 42     }
--[ 2022.11.16.13.27.25.274.0 ]--
+ 42         
--[ 2022.11.16.13.27.27.731.0 ]--
- 45
--[ 2022.11.16.13.27.28.717.0 ]--
r 43         }
--[ 2022.11.16.13.27.29.485.0 ]--
r 43     }
--[ 2022.11.16.13.27.30.969.0 ]--
r 42             
--[ 2022.11.16.13.27.33.382.0 ]--
+ 38         
--[ 2022.11.16.13.27.36.675.0 ]--
r 38         p
--[ 2022.11.16.13.27.36.740.0 ]--
r 38         pu
--[ 2022.11.16.13.27.36.910.0 ]--
r 38         put
--[ 2022.11.16.13.27.37.193.0 ]--
r 38         put()
--[ 2022.11.16.13.27.38.107.0 ]--
r 38         put(x)
--[ 2022.11.16.13.27.40.026.0 ]--
r 38         put()
--[ 2022.11.16.13.27.40.125.0 ]--
r 38         put
--[ 2022.11.16.13.27.40.267.0 ]--
r 38         pu
--[ 2022.11.16.13.27.40.422.0 ]--
r 38         p
--[ 2022.11.16.13.27.40.588.0 ]--
r 38         
--[ 2022.11.16.13.27.40.863.0 ]--
r 38         e
--[ 2022.11.16.13.27.40.987.0 ]--
r 38         el
--[ 2022.11.16.13.27.41.128.0 ]--
r 38         els
--[ 2022.11.16.13.27.41.257.0 ]--
r 38         else
--[ 2022.11.16.13.27.41.809.0 ]--
r 38         else()
--[ 2022.11.16.13.27.41.922.0 ]--
r 38         else()_
--[ 2022.11.16.13.27.43.005.0 ]--
r 38         else(
--[ 2022.11.16.13.27.43.751.0 ]--
r 38         else
--[ 2022.11.16.13.27.44.469.0 ]--
r 38         else 
--[ 2022.11.16.13.27.45.510.0 ]--
r 38         else p
--[ 2022.11.16.13.27.45.752.0 ]--
r 38         else pu
--[ 2022.11.16.13.27.46.133.0 ]--
r 38         else put
--[ 2022.11.16.13.27.46.519.0 ]--
r 38         else put()
--[ 2022.11.16.13.28.05.477.0 ]--
r 38         else put(r)
--[ 2022.11.16.13.28.05.613.0 ]--
r 38         else put(ro)
--[ 2022.11.16.13.28.05.711.0 ]--
r 38         else put(roo)
--[ 2022.11.16.13.28.05.867.0 ]--
r 38         else put(root)
--[ 2022.11.16.13.28.06.006.0 ]--
r 38         else put(root.)
--[ 2022.11.16.13.28.06.794.0 ]--
r 38         else put(root)
--[ 2022.11.16.13.28.06.933.0 ]--
r 38         else put(root,)
--[ 2022.11.16.13.28.07.565.0 ]--
r 38         else put(root)
--[ 2022.11.16.13.28.08.256.0 ]--
r 38         else put(root,)
--[ 2022.11.16.13.28.08.661.0 ]--
r 38         else put(root, )
--[ 2022.11.16.13.28.08.820.0 ]--
r 38         else put(root,  )
--[ 2022.11.16.13.28.08.954.0 ]--
r 38         else put(root,  p)
--[ 2022.11.16.13.28.09.311.0 ]--
r 38         else put(root,  )
--[ 2022.11.16.13.28.09.449.0 ]--
r 38         else put(root, )
--[ 2022.11.16.13.28.10.058.0 ]--
r 38         else put(root, p)
--[ 2022.11.16.13.28.10.385.0 ]--
r 38         else put(root, p,)
--[ 2022.11.16.13.28.10.532.0 ]--
r 38         else put(root, p, )
--[ 2022.11.16.13.28.11.094.0 ]--
r 38         else put(root, p, v)
--[ 2022.11.16.13.28.15.789.0 ]--
r 29 //        Node x = new Node();
r 30 //        x.p=p;
r 31 //        x.v=v;
r 32 //        if(root==null) {
r 33 //            x.left=null;
r 34 //            x.right=null;
r 35 //            x.dir= Partition.Direction.DOWNUP;
r 36 //            root=x;
r 37 //        }
--[ 2022.11.16.13.28.18.944.0 ]--
r 32         if(root==null) {
r 33             x.left=null;
r 34             x.right=null;
r 35             x.dir= Partition.Direction.DOWNUP;
r 36             root=x;
r 37         }
--[ 2022.11.16.13.28.22.220.0 ]--
r 29 /        Node x = new Node();
--[ 2022.11.16.13.28.22.310.0 ]--
r 29         Node x = new Node();
--[ 2022.11.16.13.28.27.196.0 ]--
r 29         
--[ 2022.11.16.13.28.27.610.0 ]--
+ 33             
--[ 2022.11.16.13.28.27.816.0 ]--
r 33             Node x = new Node();
--[ 2022.11.16.13.28.30.461.0 ]--
r 30 //       
--[ 2022.11.16.13.28.31.219.0 ]--
+ 34             
--[ 2022.11.16.13.28.31.443.0 ]--
r 34              x.p=p;
--[ 2022.11.16.13.28.31.496.0 ]--
r 34             x.p=p;
--[ 2022.11.16.13.28.33.626.0 ]--
r 31 //        
--[ 2022.11.16.13.28.34.930.0 ]--
+ 35             
--[ 2022.11.16.13.28.35.033.0 ]--
r 35             x.v=v;
--[ 2022.11.16.13.28.36.352.0 ]--
- 30
r 30  
--[ 2022.11.16.13.28.36.509.0 ]--
- 30
--[ 2022.11.16.13.28.38.855.0 ]--
r 39         else put(root, p, v);
--[ 2022.11.16.13.28.45.374.0 ]--
r 44         
--[ 2022.11.16.13.33.13.363.0 ]--
r 29 
r 42 
r 44 
r 46 
--[ 2022.11.16.13.35.32.636.0 ]--
r 44     
--[ 2022.11.16.13.35.32.666.0 ]--
r 44         
--[ 2022.11.16.13.36.02.051.0 ]--
r 44                 if (x == null) return new Node(key, val, 1);
--[ 2022.11.16.13.36.02.163.0 ]--
r 44                 if (x == null) return new BST.Node(key, val, 1);
--[ 2022.11.16.13.36.02.261.0 ]--
r 44         if (x == null) return new BST.Node(key, val, 1);
--[ 2022.11.16.13.36.06.850.0 ]--
r 44         if (x == null) return new BST.Node(key, v, 1);
--[ 2022.11.16.13.36.08.773.0 ]--
r 44         if (x == null) return new BST.Node(k, v, 1);
--[ 2022.11.16.13.36.16.386.0 ]--
r 44         if (x == null) return new BSTNode(k, v, 1);
--[ 2022.11.16.13.36.16.524.0 ]--
r 44         if (x == null) return new BSNode(k, v, 1);
--[ 2022.11.16.13.36.16.656.0 ]--
r 44         if (x == null) return new BNode(k, v, 1);
--[ 2022.11.16.13.36.16.780.0 ]--
r 44         if (x == null) return new Node(k, v, 1);
--[ 2022.11.16.13.36.42.446.0 ]--
r 44         if (x == null) return new Node(, v, 1);
--[ 2022.11.16.13.36.42.987.0 ]--
r 44         if (x == null) return new Node(x, v, 1);
--[ 2022.11.16.13.36.44.681.0 ]--
r 44         if (x == null) return new Node(x, , 1);
--[ 2022.11.16.13.36.45.228.0 ]--
r 44         if (x == null) return new Node(x, k, 1);
--[ 2022.11.16.13.36.48.301.0 ]--
r 44         if (x == null) return new Node(x, , 1);
--[ 2022.11.16.13.36.48.448.0 ]--
r 44         if (x == null) return new Node(x, p, 1);
--[ 2022.11.16.13.36.49.550.0 ]--
r 44         if (x == null) return new Node(x, p, );
--[ 2022.11.16.13.36.49.687.0 ]--
r 44         if (x == null) return new Node(x, p, v);
--[ 2022.11.16.13.37.04.664.0 ]--
+ 15     
--[ 2022.11.16.13.37.20.953.0 ]--
+ 14         
--[ 2022.11.16.13.37.21.377.0 ]--
+ 14         
--[ 2022.11.16.13.37.21.944.0 ]--
r 15         p
--[ 2022.11.16.13.37.22.063.0 ]--
r 15         pu
--[ 2022.11.16.13.37.22.303.0 ]--
r 15         pub
--[ 2022.11.16.13.37.22.382.0 ]--
r 15         publ
--[ 2022.11.16.13.37.22.544.0 ]--
r 15         publi
--[ 2022.11.16.13.37.22.860.0 ]--
r 15         public
--[ 2022.11.16.13.37.22.999.0 ]--
r 15         public 
--[ 2022.11.16.13.37.23.339.0 ]--
r 15         public N
--[ 2022.11.16.13.37.23.529.0 ]--
r 15         public No
--[ 2022.11.16.13.37.23.640.0 ]--
r 15         public Nod
--[ 2022.11.16.13.37.23.829.0 ]--
r 15         public Node
--[ 2022.11.16.13.37.24.296.0 ]--
r 15         public Node()
--[ 2022.11.16.13.37.27.477.0 ]--
r 15         public Node(P)
--[ 2022.11.16.13.37.27.738.0 ]--
r 15         public Node(Po)
--[ 2022.11.16.13.37.27.786.0 ]--
r 15         public Node(Poi)
--[ 2022.11.16.13.37.27.980.0 ]--
r 15         public Node(Poin)
--[ 2022.11.16.13.37.28.093.0 ]--
r 15         public Node(Point)
--[ 2022.11.16.13.37.28.274.0 ]--
r 15         public Node(Point )
--[ 2022.11.16.13.37.28.541.0 ]--
r 15         public Node(Point p)
--[ 2022.11.16.13.37.28.918.0 ]--
r 15         public Node(Point p,)
--[ 2022.11.16.13.37.28.986.0 ]--
r 15         public Node(Point p, )
--[ 2022.11.16.13.37.29.352.0 ]--
r 15         public Node(Point p, V)
--[ 2022.11.16.13.37.29.527.0 ]--
r 15         public Node(Point p, Va)
--[ 2022.11.16.13.37.29.607.0 ]--
r 15         public Node(Point p, Val)
--[ 2022.11.16.13.37.29.768.0 ]--
r 15         public Node(Point p, Valu)
--[ 2022.11.16.13.37.29.881.0 ]--
r 15         public Node(Point p, Value)
--[ 2022.11.16.13.37.30.343.0 ]--
r 15         public Node(Point p, Value )
--[ 2022.11.16.13.37.30.491.0 ]--
r 15         public Node(Point p, Value v)
--[ 2022.11.16.13.37.31.015.0 ]--
r 15         public Node(Point p, Value v,)
--[ 2022.11.16.13.37.31.117.0 ]--
r 15         public Node(Point p, Value v, )
--[ 2022.11.16.13.37.31.773.0 ]--
r 15         public Node(Point p, Value v, N)
--[ 2022.11.16.13.37.32.441.0 ]--
r 15         public Node(Point p, Value v, Node)
--[ 2022.11.16.13.37.32.701.0 ]--
r 15         public Node(Point p, Value v, Node )
--[ 2022.11.16.13.37.32.929.0 ]--
r 15         public Node(Point p, Value v, Node l)
--[ 2022.11.16.13.37.33.250.0 ]--
r 15         public Node(Point p, Value v, Node le)
--[ 2022.11.16.13.37.33.426.0 ]--
r 15         public Node(Point p, Value v, Node lef)
--[ 2022.11.16.13.37.33.641.0 ]--
r 15         public Node(Point p, Value v, Node left)
--[ 2022.11.16.13.37.34.230.0 ]--
r 15         public Node(Point p, Value v, Node left )
--[ 2022.11.16.13.37.34.683.0 ]--
r 15         public Node(Point p, Value v, Node left)
--[ 2022.11.16.13.37.35.000.0 ]--
r 15         public Node(Point p, Value v, Node left,)
--[ 2022.11.16.13.37.35.067.0 ]--
r 15         public Node(Point p, Value v, Node left, )
--[ 2022.11.16.13.37.35.501.0 ]--
r 15         public Node(Point p, Value v, Node left, N)
--[ 2022.11.16.13.37.35.936.0 ]--
r 15         public Node(Point p, Value v, Node left, No)
--[ 2022.11.16.13.37.36.092.0 ]--
r 15         public Node(Point p, Value v, Node left, Nod)
--[ 2022.11.16.13.37.36.249.0 ]--
r 15         public Node(Point p, Value v, Node left, Node)
--[ 2022.11.16.13.37.36.437.0 ]--
r 15         public Node(Point p, Value v, Node left, Node )
--[ 2022.11.16.13.37.36.783.0 ]--
r 15         public Node(Point p, Value v, Node left, Node r)
--[ 2022.11.16.13.37.36.874.0 ]--
r 15         public Node(Point p, Value v, Node left, Node ri)
--[ 2022.11.16.13.37.36.999.0 ]--
r 15         public Node(Point p, Value v, Node left, Node rig)
--[ 2022.11.16.13.37.37.119.0 ]--
r 15         public Node(Point p, Value v, Node left, Node righ)
--[ 2022.11.16.13.37.37.162.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right)
--[ 2022.11.16.13.37.37.577.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right,)
--[ 2022.11.16.13.37.37.637.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, )
--[ 2022.11.16.13.37.38.658.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, P)
--[ 2022.11.16.13.37.38.907.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Pa)
--[ 2022.11.16.13.37.38.938.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Par)
--[ 2022.11.16.13.37.39.156.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Part)
--[ 2022.11.16.13.37.39.277.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Parti)
--[ 2022.11.16.13.37.39.474.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partid)
--[ 2022.11.16.13.37.39.963.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Parti)
--[ 2022.11.16.13.37.40.067.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partit)
--[ 2022.11.16.13.37.40.206.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partiti)
--[ 2022.11.16.13.37.40.375.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partitio)
--[ 2022.11.16.13.37.40.568.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition)
--[ 2022.11.16.13.37.41.472.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.)
--[ 2022.11.16.13.37.42.655.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Dire)
--[ 2022.11.16.13.37.42.775.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Direc)
--[ 2022.11.16.13.37.42.992.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Direct)
--[ 2022.11.16.13.37.43.081.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Directi)
--[ 2022.11.16.13.37.43.161.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Directio)
--[ 2022.11.16.13.37.43.554.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Direction)
--[ 2022.11.16.13.37.43.727.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Direction )
--[ 2022.11.16.13.37.43.969.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Direction d)
--[ 2022.11.16.13.37.44.083.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Direction di)
--[ 2022.11.16.13.37.44.172.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Direction dir)
--[ 2022.11.16.13.37.45.674.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Direction dir) 
--[ 2022.11.16.13.37.45.822.0 ]--
r 15         public Node(Point p, Value v, Node left, Node right, Partition.Direction dir) {}
--[ 2022.11.16.13.37.46.042.0 ]--
+ 15         public Node(Point p, Value v, Node left, Node right, Partition.Direction dir) {
r 16         }
--[ 2022.11.16.13.37.46.102.0 ]--
+ 16             
--[ 2022.11.16.13.37.47.941.0 ]--
r 16             p
--[ 2022.11.16.13.37.48.191.0 ]--
r 16             p 
--[ 2022.11.16.13.37.48.314.0 ]--
r 16             p =
--[ 2022.11.16.13.37.48.439.0 ]--
r 16             p = 
--[ 2022.11.16.13.37.48.615.0 ]--
r 16             p = p
--[ 2022.11.16.13.37.49.398.0 ]--
r 16             p = p;
--[ 2022.11.16.13.37.52.336.0 ]--
r 15         public Node(Point poi, Value v, Node left, Node right, Partition.Direction dir) {
--[ 2022.11.16.13.37.52.518.0 ]--
r 15         public Node(Point poin, Value v, Node left, Node right, Partition.Direction dir) {
--[ 2022.11.16.13.37.52.618.0 ]--
r 15         public Node(Point point, Value v, Node left, Node right, Partition.Direction dir) {
--[ 2022.11.16.13.37.55.412.0 ]--
r 15         public Node(Point point, Value va, Node left, Node right, Partition.Direction dir) {
--[ 2022.11.16.13.37.55.449.0 ]--
r 15         public Node(Point point, Value val, Node left, Node right, Partition.Direction dir) {
--[ 2022.11.16.13.38.01.498.0 ]--
r 15         public Node(Point point, Value val, Node lef, Node right, Partition.Direction dir) {
--[ 2022.11.16.13.38.01.614.0 ]--
r 15         public Node(Point point, Value val, Node le, Node right, Partition.Direction dir) {
--[ 2022.11.16.13.38.01.745.0 ]--
r 15         public Node(Point point, Value val, Node l, Node right, Partition.Direction dir) {
--[ 2022.11.16.13.38.03.567.0 ]--
r 15         public Node(Point point, Value val, Node l, Node righ, Partition.Direction dir) {
--[ 2022.11.16.13.38.03.698.0 ]--
r 15         public Node(Point point, Value val, Node l, Node rig, Partition.Direction dir) {
--[ 2022.11.16.13.38.03.850.0 ]--
r 15         public Node(Point point, Value val, Node l, Node ri, Partition.Direction dir) {
--[ 2022.11.16.13.38.03.994.0 ]--
r 15         public Node(Point point, Value val, Node l, Node r, Partition.Direction dir) {
--[ 2022.11.16.13.38.05.673.0 ]--
r 15         public Node(Point point, Value val, Node l, Node r, Partition.Direction di) {
--[ 2022.11.16.13.38.05.764.0 ]--
r 15         public Node(Point point, Value val, Node l, Node r, Partition.Direction d) {
--[ 2022.11.16.13.38.08.876.0 ]--
r 15         public Node(Point poit, Value val, Node l, Node r, Partition.Direction d) {
--[ 2022.11.16.13.38.08.924.0 ]--
r 15         public Node(Point pot, Value val, Node l, Node r, Partition.Direction d) {
--[ 2022.11.16.13.38.09.535.0 ]--
r 15         public Node(Point pt, Value val, Node l, Node r, Partition.Direction d) {
--[ 2022.11.16.13.38.11.853.0 ]--
r 16             p = pt;
--[ 2022.11.16.13.38.12.710.0 ]--
+ 17             
--[ 2022.11.16.13.38.14.250.0 ]--
r 17             v
--[ 2022.11.16.13.38.14.578.0 ]--
r 17             v 
--[ 2022.11.16.13.38.14.613.0 ]--
r 17             v =
--[ 2022.11.16.13.38.14.755.0 ]--
r 17             v = 
--[ 2022.11.16.13.38.15.316.0 ]--
r 17             v = v
--[ 2022.11.16.13.38.15.402.0 ]--
r 17             v = va
--[ 2022.11.16.13.38.15.489.0 ]--
r 17             v = val
--[ 2022.11.16.13.38.15.942.0 ]--
+ 18             
--[ 2022.11.16.13.38.16.005.0 ]--
r 18                     
--[ 2022.11.16.13.38.16.597.0 ]--
- 18
--[ 2022.11.16.13.38.17.321.0 ]--
r 17             v = val;
--[ 2022.11.16.13.38.17.563.0 ]--
+ 18             
--[ 2022.11.16.13.38.18.590.0 ]--
r 18             l
--[ 2022.11.16.13.38.19.109.0 ]--
r 18             
--[ 2022.11.16.13.38.19.464.0 ]--
r 18             N
--[ 2022.11.16.13.38.20.228.0 ]--
r 18             
--[ 2022.11.16.13.38.20.508.0 ]--
r 18             l
--[ 2022.11.16.13.38.20.681.0 ]--
r 18             le
--[ 2022.11.16.13.38.20.746.0 ]--
r 18             lef
--[ 2022.11.16.13.38.20.956.0 ]--
r 18             left
--[ 2022.11.16.13.38.21.148.0 ]--
r 18             left 
--[ 2022.11.16.13.38.21.262.0 ]--
r 18             left =
--[ 2022.11.16.13.38.21.386.0 ]--
r 18             left = 
--[ 2022.11.16.13.38.22.423.0 ]--
r 18             left = l
--[ 2022.11.16.13.38.22.722.0 ]--
r 18             left = l;
--[ 2022.11.16.13.38.23.025.0 ]--
+ 19             
--[ 2022.11.16.13.38.23.676.0 ]--
r 19             r
--[ 2022.11.16.13.38.23.744.0 ]--
r 19             ri
--[ 2022.11.16.13.38.23.925.0 ]--
r 19             rig
--[ 2022.11.16.13.38.23.941.0 ]--
r 19             righ
--[ 2022.11.16.13.38.24.120.0 ]--
r 19             right
--[ 2022.11.16.13.38.24.493.0 ]--
r 19             right 
--[ 2022.11.16.13.38.24.625.0 ]--
r 19             right =
--[ 2022.11.16.13.38.24.652.0 ]--
r 19             right = 
--[ 2022.11.16.13.38.24.961.0 ]--
r 19             right = r
--[ 2022.11.16.13.38.25.357.0 ]--
r 19             right = r;
--[ 2022.11.16.13.38.25.636.0 ]--
+ 20             
--[ 2022.11.16.13.38.26.930.0 ]--
r 20             di
--[ 2022.11.16.13.38.27.024.0 ]--
r 20             dir
--[ 2022.11.16.13.38.27.307.0 ]--
r 20             dir 
--[ 2022.11.16.13.38.27.437.0 ]--
r 20             dir =
--[ 2022.11.16.13.38.27.532.0 ]--
r 20             dir = 
--[ 2022.11.16.13.38.27.886.0 ]--
r 20             dir = d
--[ 2022.11.16.13.38.28.179.0 ]--
r 20             dir = d;
--[ 2022.11.16.13.38.40.085.0 ]--
r 53         if (x == null) return new Node(x,p, v);
--[ 2022.11.16.13.38.40.138.0 ]--
r 53         if (x == null) return new Node(xp, v);
--[ 2022.11.16.13.38.40.259.0 ]--
r 53         if (x == null) return new Node(p, v);
--[ 2022.11.16.13.38.42.781.0 ]--
r 53         if (x == null) return new Node(p, v,);
--[ 2022.11.16.13.38.43.011.0 ]--
r 53         if (x == null) return new Node(p, v, );
--[ 2022.11.16.13.38.45.152.0 ]--
r 53         if (x == null) return new Node(p, v, n);
--[ 2022.11.16.13.38.45.376.0 ]--
r 53         if (x == null) return new Node(p, v, nu);
--[ 2022.11.16.13.38.45.582.0 ]--
r 53         if (x == null) return new Node(p, v, nul);
--[ 2022.11.16.13.38.45.723.0 ]--
r 53         if (x == null) return new Node(p, v, null);
--[ 2022.11.16.13.38.45.964.0 ]--
r 53         if (x == null) return new Node(p, v, null,);
--[ 2022.11.16.13.38.46.098.0 ]--
r 53         if (x == null) return new Node(p, v, null, );
--[ 2022.11.16.13.38.47.201.0 ]--
r 53         if (x == null) return new Node(p, v, null, n);
--[ 2022.11.16.13.38.47.337.0 ]--
r 53         if (x == null) return new Node(p, v, null, nu);
--[ 2022.11.16.13.38.47.516.0 ]--
r 53         if (x == null) return new Node(p, v, null, nul);
--[ 2022.11.16.13.38.47.658.0 ]--
r 53         if (x == null) return new Node(p, v, null, null);
--[ 2022.11.16.13.38.47.867.0 ]--
r 53         if (x == null) return new Node(p, v, null, null,);
--[ 2022.11.16.13.38.47.984.0 ]--
r 53         if (x == null) return new Node(p, v, null, null, );
--[ 2022.11.16.13.39.02.776.0 ]--
r 53         if (x == null) {return new Node(p, v, null, null, );
--[ 2022.11.16.13.39.02.995.0 ]--
+ 53         if (x == null) {
+ 54 return new Node(p, v, null, null, );
r 55 }
--[ 2022.11.16.13.39.03.027.0 ]--
r 54             return new Node(p, v, null, null, );
r 55         }
--[ 2022.11.16.13.39.05.809.0 ]--
+ 54             
--[ 2022.11.16.13.39.12.385.0 ]--
r 54             new Node(p, v, null, null, );
--[ 2022.11.16.13.39.16.381.0 ]--
r 54             new Node(p, v, null, null, D);
--[ 2022.11.16.13.39.16.594.0 ]--
r 54             new Node(p, v, null, null, DO);
--[ 2022.11.16.13.39.16.960.0 ]--
r 54             new Node(p, v, null, null, DOW);
--[ 2022.11.16.13.39.17.095.0 ]--
r 54             new Node(p, v, null, null, DOWN);
--[ 2022.11.16.13.39.18.177.0 ]--
r 54             new Node(p, v, null, null, Partition.Direction.DOWNUP);
--[ 2022.11.16.13.39.18.191.0 ]--
r 54             new Node(p, v, null, null, DOWNUP);
--[ 2022.11.16.13.39.18.205.0 ]--
r 54             new Node(p, v, null, null, .DOWNUP);
--[ 2022.11.16.13.39.18.215.0 ]--
r 54             new Node(p, v, null, null, Direction.DOWNUP);
--[ 2022.11.16.13.39.18.228.0 ]--
r 54             new Node(p, v, null, null, Partition.Direction.DOWNUP);
--[ 2022.11.16.13.39.22.387.0 ]--
+ 55             
--[ 2022.11.16.13.39.22.649.0 ]--
+ 55                         new Node(p, v, null, null, Partition.Direction.DOWNUP);
r 56 
--[ 2022.11.16.13.39.22.678.0 ]--
r 55             new Node(p, v, null, null, Partition.Direction.DOWNUP);
--[ 2022.11.16.13.39.24.600.0 ]--
r 55             new Node(p, v, null, null, Partition.Direction.L);
--[ 2022.11.16.13.39.25.603.0 ]--
r 55             new Node(p, v, null, null, Partition.Direction.LEFTRIGHT);
--[ 2022.11.16.13.39.28.154.0 ]--
+ 54             
--[ 2022.11.16.13.39.29.105.0 ]--
r 54             if
--[ 2022.11.16.13.39.50.164.0 ]--
r 15         public Node(Point pt, Value val) {
--[ 2022.11.16.13.39.56.645.0 ]--
- 18
- 18
r 18 
--[ 2022.11.16.13.39.57.225.0 ]--
- 18
--[ 2022.11.16.13.40.38.406.0 ]--
r 52             new Node(p, v\);
--[ 2022.11.16.13.40.39.313.0 ]--
r 52             new Node(p, v);
--[ 2022.11.16.13.40.43.641.0 ]--
r 53 
--[ 2022.11.16.13.40.43.935.0 ]--
- 53
--[ 2022.11.16.13.40.45.857.0 ]--
r 51             
--[ 2022.11.16.13.40.46.080.0 ]--
- 51
--[ 2022.11.16.13.40.46.282.0 ]--
r 50         if (x == null) 
--[ 2022.11.16.13.40.51.751.0 ]--
r 53             return new Node(p, v);
--[ 2022.11.16.13.40.55.800.0 ]--
- 51
- 51
--[ 2022.11.16.13.40.57.907.0 ]--
r 52         
--[ 2022.11.16.13.40.58.253.0 ]--
- 52
--[ 2022.11.16.13.41.03.596.0 ]--
- 50
r 50         if (x == null) return new Node(p, v);
--[ 2022.11.16.13.41.10.479.0 ]--
+ 51         
--[ 2022.11.16.13.41.11.189.0 ]--
r 51         r
--[ 2022.11.16.13.41.11.239.0 ]--
r 51         re
--[ 2022.11.16.13.41.11.502.0 ]--
r 51         reu
--[ 2022.11.16.13.41.11.566.0 ]--
r 51         reut
--[ 2022.11.16.13.41.11.877.0 ]--
r 51         reu
--[ 2022.11.16.13.41.11.996.0 ]--
r 51         re
--[ 2022.11.16.13.41.12.391.0 ]--
r 51         ret
--[ 2022.11.16.13.41.12.463.0 ]--
r 51         retu
--[ 2022.11.16.13.41.12.552.0 ]--
r 51         retur
--[ 2022.11.16.13.41.12.802.0 ]--
r 51         return
--[ 2022.11.16.13.41.13.019.0 ]--
r 51         return 
--[ 2022.11.16.13.41.13.977.0 ]--
r 51         return ;
--[ 2022.11.16.13.41.20.074.0 ]--
+ 51         
--[ 2022.11.16.13.41.35.988.0 ]--
r 51         P
--[ 2022.11.16.13.41.36.221.0 ]--
r 51         Pa
--[ 2022.11.16.13.41.36.613.0 ]--
r 51         P
--[ 2022.11.16.13.41.37.567.0 ]--
r 51         
--[ 2022.11.16.13.41.40.899.0 ]--
r 51         j
--[ 2022.11.16.13.41.41.482.0 ]--
r 51         
--[ 2022.11.16.13.41.41.968.0 ]--
r 51         P
--[ 2022.11.16.13.41.43.345.0 ]--
r 51         Par
--[ 2022.11.16.13.41.43.566.0 ]--
r 51         Part
--[ 2022.11.16.13.41.44.523.0 ]--
r 51         Part.
--[ 2022.11.16.13.41.44.976.0 ]--
r 51         Part
--[ 2022.11.16.13.41.45.012.0 ]--
r 51         Part    
--[ 2022.11.16.13.41.45.565.0 ]--
r 51         Part   
--[ 2022.11.16.13.41.45.697.0 ]--
r 51         Part  
--[ 2022.11.16.13.41.45.937.0 ]--
r 51         Part 
--[ 2022.11.16.13.41.46.914.0 ]--
r 51         Parti
--[ 2022.11.16.13.41.47.764.0 ]--
r 51         Partit
--[ 2022.11.16.13.41.47.841.0 ]--
r 51         Partiti
--[ 2022.11.16.13.41.47.912.0 ]--
r 51         Partitio
--[ 2022.11.16.13.41.48.126.0 ]--
r 51         Partition
--[ 2022.11.16.13.41.48.427.0 ]--
r 51         Partition.
--[ 2022.11.16.13.41.48.642.0 ]--
r 51         Partition.d
--[ 2022.11.16.13.41.51.544.0 ]--
r 51         Partition.
--[ 2022.11.16.13.41.51.900.0 ]--
r 51         Partition.D
--[ 2022.11.16.13.41.52.407.0 ]--
r 51         Partition.Direction
--[ 2022.11.16.13.41.54.378.0 ]--
r 51         Partition.Direction 
--[ 2022.11.16.13.41.58.112.0 ]--
r 51         Partition.Direction p
--[ 2022.11.16.13.41.58.202.0 ]--
r 51         Partition.Direction pa
--[ 2022.11.16.13.41.58.265.0 ]--
r 51         Partition.Direction par
--[ 2022.11.16.13.41.58.535.0 ]--
r 51         Partition.Direction pare
--[ 2022.11.16.13.41.58.803.0 ]--
r 51         Partition.Direction paren
--[ 2022.11.16.13.41.58.908.0 ]--
r 51         Partition.Direction parent
--[ 2022.11.16.13.41.59.470.0 ]--
r 51         Partition.Direction parentD
--[ 2022.11.16.13.41.59.852.0 ]--
r 51         Partition.Direction parentDi
--[ 2022.11.16.13.41.59.886.0 ]--
r 51         Partition.Direction parentDir
--[ 2022.11.16.13.42.01.092.0 ]--
r 51         Partition.Direction parentDir 
--[ 2022.11.16.13.42.01.189.0 ]--
r 51         Partition.Direction parentDir =
--[ 2022.11.16.13.42.01.279.0 ]--
r 51         Partition.Direction parentDir = 
--[ 2022.11.16.13.42.02.907.0 ]--
r 51         Partition.Direction parentDir = x
--[ 2022.11.16.13.42.03.284.0 ]--
r 51         Partition.Direction parentDir = x.
--[ 2022.11.16.13.42.04.102.0 ]--
r 51         Partition.Direction parentDir = x.dir
--[ 2022.11.16.13.42.04.604.0 ]--
r 51         Partition.Direction parentDir = x.dir;
--[ 2022.11.16.13.42.05.948.0 ]--
+ 52         
--[ 2022.11.16.13.42.10.100.0 ]--
r 52         i
--[ 2022.11.16.13.42.10.159.0 ]--
r 52         if
--[ 2022.11.16.13.42.12.684.0 ]--
r 52         if()
--[ 2022.11.16.13.42.13.272.0 ]--
r 52         if(d)
--[ 2022.11.16.13.42.13.356.0 ]--
r 52         if(di)
--[ 2022.11.16.13.42.13.473.0 ]--
r 52         if(dir)
--[ 2022.11.16.13.42.13.637.0 ]--
r 52         if(dir )
--[ 2022.11.16.13.42.13.928.0 ]--
r 52         if(dir =)
--[ 2022.11.16.13.42.14.028.0 ]--
r 52         if(dir ==)
--[ 2022.11.16.13.42.14.109.0 ]--
r 52         if(dir == )
--[ 2022.11.16.13.42.14.687.0 ]--
r 52         if(dir == D)
--[ 2022.11.16.13.42.14.891.0 ]--
r 52         if(dir == DO)
--[ 2022.11.16.13.42.15.076.0 ]--
r 52         if(dir == DOW)
--[ 2022.11.16.13.42.15.266.0 ]--
r 52         if(dir == DOWN)
--[ 2022.11.16.13.42.16.203.0 ]--
r 52         if(dir == DOWNU)
--[ 2022.11.16.13.42.16.275.0 ]--
r 52         if(dir == DOWNUP)
--[ 2022.11.16.13.42.21.681.0 ]--
r 52         if(dir == .DOWNUP)
--[ 2022.11.16.13.42.21.727.0 ]--
r 52         if(dir == Direction.DOWNUP)
--[ 2022.11.16.13.42.21.753.0 ]--
r 52         if(dir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.21.763.0 ]--
r 52         if(dir == Direction.DOWNUP)
--[ 2022.11.16.13.42.21.771.0 ]--
r 52         if(dir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.27.591.0 ]--
r 52         if(pdir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.27.708.0 ]--
r 52         if(padir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.27.762.0 ]--
r 52         if(pardir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.27.926.0 ]--
r 52         if(paredir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.28.072.0 ]--
r 52         if(parendir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.28.196.0 ]--
r 52         if(parentdir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.28.789.0 ]--
r 52         if(parentir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.29.053.0 ]--
r 52         if(parentDir == Partition.Direction.DOWNUP)
--[ 2022.11.16.13.42.30.661.0 ]--
r 52         if(parentDir == Partition.Direction.DOWNUP) 
--[ 2022.11.16.13.42.30.949.0 ]--
r 52         if(parentDir == Partition.Direction.DOWNUP) {
--[ 2022.11.16.13.42.31.151.0 ]--
+ 53 
+ 54 }
--[ 2022.11.16.13.42.31.183.0 ]--
r 54         }
--[ 2022.11.16.13.42.31.211.0 ]--
r 53             
--[ 2022.11.16.13.42.38.203.0 ]--
r 53             i
--[ 2022.11.16.13.42.38.261.0 ]--
r 53             if
--[ 2022.11.16.13.42.39.759.0 ]--
r 53             if()
--[ 2022.11.16.13.42.40.587.0 ]--
r 53             if(x)
--[ 2022.11.16.13.42.42.714.0 ]--
r 53             if(x.)
--[ 2022.11.16.13.42.43.711.0 ]--
r 53             if(x.x)
--[ 2022.11.16.13.42.45.052.0 ]--
r 53             if(x.x())
--[ 2022.11.16.13.42.48.679.0 ]--
r 53             if(x.x()
--[ 2022.11.16.13.42.48.829.0 ]--
r 53             if(x.x)
--[ 2022.11.16.13.42.49.084.0 ]--
r 53             if(x.)
--[ 2022.11.16.13.42.54.772.0 ]--
r 53             if(x.p)
--[ 2022.11.16.13.42.55.114.0 ]--
r 53             if(x.p.)
--[ 2022.11.16.13.42.55.532.0 ]--
r 53             if(x.p.x)
--[ 2022.11.16.13.42.56.063.0 ]--
r 53             if(x.p.x())
--[ 2022.11.16.13.42.58.476.0 ]--
r 53             if(x.p.x() )
--[ 2022.11.16.13.42.59.547.0 ]--
r 53             if(x.p.x() >)
--[ 2022.11.16.13.42.59.726.0 ]--
r 53             if(x.p.x() > )
--[ 2022.11.16.13.43.00.783.0 ]--
r 53             if(x.p.x() > p)
--[ 2022.11.16.13.43.01.144.0 ]--
r 53             if(x.p.x() > p.)
--[ 2022.11.16.13.43.01.536.0 ]--
r 53             if(x.p.x() > p.x)
--[ 2022.11.16.13.43.02.098.0 ]--
r 53             if(x.p.x() > p.x())
--[ 2022.11.16.13.43.05.029.0 ]--
r 53             if(x.p.x() > p.x()) 
--[ 2022.11.16.13.43.05.842.0 ]--
r 53             if(x.p.x() > p.x()) p
--[ 2022.11.16.13.43.05.890.0 ]--
r 53             if(x.p.x() > p.x()) pu
--[ 2022.11.16.13.43.06.045.0 ]--
r 53             if(x.p.x() > p.x()) put
--[ 2022.11.16.13.43.08.038.0 ]--
r 53             if(x.p.x() > p.x()) put()
--[ 2022.11.16.13.43.08.994.0 ]--
r 53             if(x.p.x() > p.x()) put(A)
--[ 2022.11.16.13.43.09.337.0 ]--
r 53             if(x.p.x() > p.x()) put(A.)
--[ 2022.11.16.13.43.13.655.0 ]--
r 53             if(x.p.x() > p.x()) put(A.l)
--[ 2022.11.16.13.43.13.897.0 ]--
r 53             if(x.p.x() > p.x()) put(A.le)
--[ 2022.11.16.13.43.15.526.0 ]--
r 53             if(x.p.x() > p.x()) put(A.lef)
--[ 2022.11.16.13.43.15.708.0 ]--
r 53             if(x.p.x() > p.x()) put(A.left)
--[ 2022.11.16.13.43.17.826.0 ]--
r 53             if(x.p.x() > p.x()) put(.left)
--[ 2022.11.16.13.43.18.733.0 ]--
r 53             if(x.p.x() > p.x()) put(x.left)
--[ 2022.11.16.13.43.20.910.0 ]--
r 53             if(x.p.x() > p.x()) put(x.left,)
--[ 2022.11.16.13.43.20.989.0 ]--
r 53             if(x.p.x() > p.x()) put(x.left, )
--[ 2022.11.16.13.43.21.481.0 ]--
r 53             if(x.p.x() > p.x()) put(x.left, p)
--[ 2022.11.16.13.43.22.097.0 ]--
r 53             if(x.p.x() > p.x()) put(x.left, p, )
--[ 2022.11.16.13.43.22.136.0 ]--
r 53             if(x.p.x() > p.x()) put(x.left, p, v)
--[ 2022.11.16.13.43.25.181.0 ]--
r 53             if(x.p.x() > p.x()) put(x.left, p, v);
--[ 2022.11.16.13.43.28.596.0 ]--
+ 54             
--[ 2022.11.16.13.43.29.111.0 ]--
r 54             e
--[ 2022.11.16.13.43.29.238.0 ]--
r 54             el
--[ 2022.11.16.13.43.29.311.0 ]--
r 54             els
--[ 2022.11.16.13.43.29.421.0 ]--
r 54             else
--[ 2022.11.16.13.43.31.490.0 ]--
r 54             else 
--[ 2022.11.16.13.43.31.976.0 ]--
r 54             else p
--[ 2022.11.16.13.43.32.089.0 ]--
r 54             else pu
--[ 2022.11.16.13.43.32.262.0 ]--
r 54             else put
--[ 2022.11.16.13.43.32.999.0 ]--
r 54             else put()
--[ 2022.11.16.13.43.33.625.0 ]--
r 54             else put(x)
--[ 2022.11.16.13.43.33.855.0 ]--
r 54             else put(x.)
--[ 2022.11.16.13.43.34.079.0 ]--
r 54             else put(x.r)
--[ 2022.11.16.13.43.34.179.0 ]--
r 54             else put(x.ri)
--[ 2022.11.16.13.43.34.298.0 ]--
r 54             else put(x.rig)
--[ 2022.11.16.13.43.34.383.0 ]--
r 54             else put(x.righ)
--[ 2022.11.16.13.43.34.478.0 ]--
r 54             else put(x.right)
--[ 2022.11.16.13.43.35.253.0 ]--
r 54             else put(x.right,)
--[ 2022.11.16.13.43.35.544.0 ]--
r 54             else put(x.right,p)
--[ 2022.11.16.13.43.36.228.0 ]--
r 54             else put(x.right,p,)
--[ 2022.11.16.13.43.36.488.0 ]--
r 54             else put(x.right,p,v)
--[ 2022.11.16.13.43.37.791.0 ]--
r 54             else put(x.right,p,v);
--[ 2022.11.16.13.43.38.168.0 ]--
+ 55             
--[ 2022.11.16.13.43.38.743.0 ]--
- 55
--[ 2022.11.16.13.43.40.246.0 ]--
+ 56         
--[ 2022.11.16.13.43.42.167.0 ]--
r 56         e
--[ 2022.11.16.13.43.42.280.0 ]--
r 56         el
--[ 2022.11.16.13.43.42.601.0 ]--
r 56         els
--[ 2022.11.16.13.43.42.702.0 ]--
r 56         else
--[ 2022.11.16.13.43.43.432.0 ]--
r 56         else 
--[ 2022.11.16.13.43.43.698.0 ]--
r 56         else {
--[ 2022.11.16.13.43.44.052.0 ]--
+ 57 
+ 58 }
--[ 2022.11.16.13.43.44.079.0 ]--
r 58         }
--[ 2022.11.16.13.43.44.091.0 ]--
r 57             
--[ 2022.11.16.13.43.49.075.0 ]--
+ 57             if(x.p.x() > p.x()) put(x.left, p, v);
r 58             else put(x.right,p,v);            
--[ 2022.11.16.13.43.50.981.0 ]--
r 57             if(x.p.() > p.x()) put(x.left, p, v);
--[ 2022.11.16.13.43.51.059.0 ]--
r 57             if(x.p.y() > p.x()) put(x.left, p, v);
--[ 2022.11.16.13.43.53.205.0 ]--
r 57             if(x.p.y() > p.()) put(x.left, p, v);
--[ 2022.11.16.13.43.53.243.0 ]--
r 57             if(x.p.y() > p.y()) put(x.left, p, v);
--[ 2022.11.16.13.44.13.244.0 ]--
r 60         return x;
--[ 2022.11.16.13.47.56.720.0 ]--
r 53             if(x.p.x() > p.x()) xput(x.left, p, v);
--[ 2022.11.16.13.47.56.914.0 ]--
r 53             if(x.p.x() > p.x()) x.put(x.left, p, v);
--[ 2022.11.16.13.47.57.841.0 ]--
r 53             if(x.p.x() > p.x()) x.lput(x.left, p, v);
--[ 2022.11.16.13.47.57.910.0 ]--
r 53             if(x.p.x() > p.x()) x.leput(x.left, p, v);
--[ 2022.11.16.13.47.58.014.0 ]--
r 53             if(x.p.x() > p.x()) x.lefput(x.left, p, v);
--[ 2022.11.16.13.47.58.314.0 ]--
r 53             if(x.p.x() > p.x()) x.leftput(x.left, p, v);
--[ 2022.11.16.13.47.58.633.0 ]--
r 53             if(x.p.x() > p.x()) x.left put(x.left, p, v);
--[ 2022.11.16.13.47.58.742.0 ]--
r 53             if(x.p.x() > p.x()) x.left =put(x.left, p, v);
--[ 2022.11.16.13.47.58.820.0 ]--
r 53             if(x.p.x() > p.x()) x.left = put(x.left, p, v);
--[ 2022.11.16.13.48.02.094.0 ]--
r 54             else xput(x.right,p,v);
--[ 2022.11.16.13.48.02.199.0 ]--
r 54             else x.put(x.right,p,v);
--[ 2022.11.16.13.48.02.416.0 ]--
r 54             else x.rput(x.right,p,v);
--[ 2022.11.16.13.48.02.522.0 ]--
r 54             else x.riput(x.right,p,v);
--[ 2022.11.16.13.48.02.704.0 ]--
r 54             else x.rigput(x.right,p,v);
--[ 2022.11.16.13.48.02.866.0 ]--
r 54             else x.righput(x.right,p,v);
--[ 2022.11.16.13.48.03.081.0 ]--
r 54             else x.rightput(x.right,p,v);
--[ 2022.11.16.13.48.03.633.0 ]--
r 54             else x.right put(x.right,p,v);
--[ 2022.11.16.13.48.03.721.0 ]--
r 54             else x.right =put(x.right,p,v);
--[ 2022.11.16.13.48.03.815.0 ]--
r 54             else x.right = put(x.right,p,v);
--[ 2022.11.16.13.48.06.828.0 ]--
r 57             if(x.p.y() > p.y()) xput(x.left, p, v);
--[ 2022.11.16.13.48.07.014.0 ]--
r 57             if(x.p.y() > p.y()) x.put(x.left, p, v);
--[ 2022.11.16.13.48.07.381.0 ]--
r 57             if(x.p.y() > p.y()) x.lput(x.left, p, v);
--[ 2022.11.16.13.48.07.522.0 ]--
r 57             if(x.p.y() > p.y()) x.leput(x.left, p, v);
--[ 2022.11.16.13.48.07.792.0 ]--
r 57             if(x.p.y() > p.y()) x.lefput(x.left, p, v);
--[ 2022.11.16.13.48.08.060.0 ]--
r 57             if(x.p.y() > p.y()) x.leftput(x.left, p, v);
--[ 2022.11.16.13.48.09.153.0 ]--
r 57             if(x.p.y() > p.y()) x.left = put(x.left, p, v);
--[ 2022.11.16.13.48.11.995.0 ]--
r 58             else xput(x.right,p,v);            
--[ 2022.11.16.13.48.12.157.0 ]--
r 58             else x.put(x.right,p,v);            
--[ 2022.11.16.13.48.12.323.0 ]--
r 58             else x.rput(x.right,p,v);            
--[ 2022.11.16.13.48.12.448.0 ]--
r 58             else x.riput(x.right,p,v);            
--[ 2022.11.16.13.48.12.561.0 ]--
r 58             else x.rigput(x.right,p,v);            
--[ 2022.11.16.13.48.12.639.0 ]--
r 58             else x.righput(x.right,p,v);            
--[ 2022.11.16.13.48.12.738.0 ]--
r 58             else x.rightput(x.right,p,v);            
--[ 2022.11.16.13.48.13.856.0 ]--
r 58             else x.right=put(x.right,p,v);            
--[ 2022.11.16.13.48.14.292.0 ]--
r 58             else x.right= put(x.right,p,v);            
--[ 2022.11.16.13.48.15.794.0 ]--
r 58             else x.right = put(x.right,p,v);            
--[ 2022.11.16.13.49.57.975.0 ]--
r 14 
r 20 
r 58             else x.right = put(x.right,p,v);
--[ 2022.11.18.16.44.42.149.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.18.16.44.42.348.0 ]--
InitTree:
/out/production/P05_KDTrees/.donotlog
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/input1M.txt
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/input100K.txt
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/burgerking.csv
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/main
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/main
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
/.git/objects/1a/49d62b998226393c172907eef021434d19be9a
/.git/objects/1f/fc97640cccefe0b1a237033b6373d6267daafb
/.git/objects/21/5f9d8b463f594d7a29686b9e9be2c095a4e415
/.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
/.git/objects/2b/146202332c98f33d1ab3db98dea03e6bbc1093
/.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
/.git/objects/2d/684a62c75f8da8fc231206420108d204cbe252
/.git/objects/2d/a01175c002a7aca63ea26eac5644d92eff4262
/.git/objects/2e/d4fe70b4e088ec2c3ac33ca08f741ed2d35a97
/.git/objects/3a/467db814b5de23a11971dfafc2a31dab54402b
/.git/objects/3e/ec82059c43fd48c2c87acbb5d3146919181ac4
/.git/objects/54/0fd2392eaf74abc751e9970668bf235e56f803
/.git/objects/67/a3cbc10acb52f757cbd15ab1a2acaef561cf5d
/.git/objects/6a/13eb1367395cad1f3ae5b2219d4d1a970335e1
/.git/objects/6e/10e3d8976dabc74255b1ddce2024336f50d7e2
/.git/objects/6e/e6bdaf464e0f4adb373587a385e0875ebf8ba6
/.git/objects/75/63d3f1a349009df7dbf21fee30194eead50ca0
/.git/objects/7c/f2891237ab51abd3dcfe41128b939aa54ae3a2
/.git/objects/86/5b56d35df1dcfcbf5196eeddcef674c03a3a93
/.git/objects/8d/e804238c33c653fe535bd162aabed440497ec7
/.git/objects/9a/8c6aff1f8871e01cacec32f40b40f4107494d2
/.git/objects/9a/e8d0c18cb848aa651381c33a3fa44eddc40bcb
/.git/objects/a4/1f4cf11f0c1e522a76feaaea7dd201322b74b2
/.git/objects/af/24b078cc669f5e4da5902ba1297a2ac0fa2339
/.git/objects/b2/0a2737119fe126fc0fc4d4284bed106ad85463
/.git/objects/b7/710fca979cfd5216bf2633dd1dfa8161d9f45f
/.git/objects/bd/dc962f4cacb8ce630d07f575b6668243250fb1
/.git/objects/c2/259fdab2fede23add0f6b409611094fb0ae13a
/.git/objects/c7/e29d8475f23acd8d328dc8074104b846f4bbbf
/.git/objects/c7/ed19fcb2ed6617a23bd3e9a2efaa966bed42da
/.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
/.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
/.git/objects/ce/2de51fa2f6dd8ca45683eb75ba132137da5a20
/.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
/.git/objects/d4/85126c43a458d604c41191c3cd216e30972972
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/e9/ce331a35ca02c33b0678d762c13fe57fe4a67a
/.git/objects/ee/909fb82334c194c06fd779181ba31079f10d42
/.git/objects/f5/001ef95b10cd55e1f28b609cd462b09cf24d06
/.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
/.git/objects/fc/e1363a394e590b51c742706992bebecae53b2b
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.idx
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.pack
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_10_01_AM_[Changes]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__10_01_AM__Changes_.xml
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml

--[ 2022.11.18.16.44.42.351.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.18.16.44.42.351.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.18.16.44.42.351.2 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.18.16.44.42.352.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */

// red-black trees

public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection

    RedBlackBST<Point, Value> rbst;
    double minx;
    double miny;
    double maxx;
    double maxy;

    public PSBruteForce() {
        rbst = new RedBlackBST<>();
    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        rbst.put(p,v);
        if(rbst.size() == 1) {
            minx = p.x();
            miny = p.y();

            maxx = p.x();
            maxy = p.y();
        }
        else {
            if(p.x() < minx) minx = p.x();
            if(p.y() < miny) miny = p.y();

            if(p.x() > maxx) maxx = p.x();
            if(p.y() > maxy) maxy = p.y();
        }
    }

    public Value get(Point p) {
        return rbst.get(p);
    }

    public boolean contains(Point p) {
        return rbst.contains(p);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return rbst.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        Point currentNear = null;
        double nearDist = 0;
        int idx = 0;
        Iterable<Point> iter = points();
        for( Point i : iter ) {
            if(i != p ) {
                double distance = p.dist(i);
                if(idx == 0 || distance < nearDist) {
                    nearDist = distance;
                    currentNear = i;
                }
            }
            idx++;
        }
        return currentNear;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        Point nearestPoint = nearest(p);
        return rbst.get(nearestPoint);
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() {
        //for each iterable loop, remember the min
        return new Point(minx, miny);
    }
    public Point max() {
        //same as min, but with max
        return new Point(maxx, maxy);
    }


    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        MaxPQ<PointDist> ptpq = new MaxPQ<>();

        Iterable<Point> iter = points();
        for( Point i : iter ) {

                PointDist distance = new PointDist(i, p.dist(i));
                ptpq.insert(distance);
                while (ptpq.size()>k) ptpq.delMax();
        }
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return rbst.size(); }

    // return whether the KDTree is empty
    public boolean isEmpty() { return rbst.isEmpty(); }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2022.11.18.16.44.42.352.1 ]--
InitFile: /.cos265


--[ 2022.11.18.16.44.42.352.2 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.18.16.44.42.352.3 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;

        public Node(Point pt, Value val) {
            p = pt;
            v = val;
        }
    }

    BST<Point, Value> kdt;
    int count=0;

    double minx;
    double miny;
    double maxx;
    double maxy;
    Node root=null;
    MaxPQ<PointDist> ptpq = new MaxPQ<>();


    //point stack
    Stack<Point> ps = new Stack<>();    //doesn't account for deletions
    //stack of partitions
    Stack<Partition> sp = new Stack<>();
    // constructor makes empty kD-tree
    public PSKDTree() {
        kdt = new BST<Point, Value>();
    }

    // add the given Point to kD-tree -- here is 2D (x and y)
    public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inserting
        if (v == null) { return; } // can't do anything with a null value

        if(root==null) {
            Node x = new Node(p,v);
            x.left=null;
            x.right=null;
            x.dir= Partition.Direction.DOWNUP;
            root=x;
            minx = x.p.x();
            miny = x.p.y();

            maxx = x.p.x();
            maxy = x.p.y();
            ps.push(x.p);
            sp.push(new Partition(x.p,x.p,x.dir));
        }
        else put(root, p, v, root);
        count++;
    }

    private Node put(Node x, Point p, Value v, Node parent) {
        if (x == null) {
            Node newNode = new Node(p,v);
            if(parent.dir == Partition.Direction.DOWNUP) {
                newNode.dir = Partition.Direction.LEFTRIGHT;
                newNode.left=null;
                newNode.right=null;
            }
            else {
                newNode.dir = Partition.Direction.DOWNUP;
                newNode.left=null;
                newNode.right=null;
            }
            if(newNode.p.x() < minx) minx = newNode.p.x();
            if(newNode.p.y() < miny) miny = newNode.p.y();

            if(newNode.p.x() > maxx) maxx = newNode.p.x();
            if(newNode.p.y() > maxy) maxy = newNode.p.y();
            ps.push(p);
            sp.push(new Partition(newNode.p,newNode.p,newNode.dir));
            return newNode;
        }
        else {
            Partition.Direction parentDir = x.dir;

            if (parentDir == Partition.Direction.DOWNUP) {
                if (x.p.x() > p.x()) x.left = put(x.left, p, v, x);
                else x.right = put(x.right, p, v, x);
            } else {
                if (x.p.y() > p.y()) x.left = put(x.left, p, v, x);
                else x.right = put(x.right, p, v, x);
            }
            return x;
        }
    }

    public Value get(Point p) {
        if(isEmpty()) return null;
        return get(root, p, root); //search through the tree instead of returning null
    }

    private Value get(Node current, Point p, Node parent) {
        if(current==null) return null;
        if(parent.dir == Partition.Direction.DOWNUP) {
            if (parent.p.x() < current.p.x()) return get(parent.right, p, parent);
            else if (parent.p.x() > current.p.x()) return get(parent.left, p, parent);
            else return current.v;
        }
        else {
            if (parent.p.y() < current.p.y()) return get(parent.right, p, parent);
            else if (parent.p.y() > current.p.y()) return get(parent.left, p, parent);
            else return current.v;
        }
    }

    public boolean contains(Point p) {
        return get(p)!=null; //searching again for p in the bst
    }

    public Value getNearest(Point p) {
        if(isEmpty()) return null;
        Point nearestPoint = nearest(p);
        return get(nearestPoint);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return ps; }

    // return an iterable of all partitions that make up the kD-tree
    //we didn't know what to do with two points in the partition constructor,
    //so the points in each partition are the same
    public Iterable<Partition> partitions() { return sp; }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        if(isEmpty()) return null;

        return nearest(root, p, root.p, root.p.dist(p));
    }
    private Point nearest(Node current, Point p, Point currentNear, double nearDist) {
        if(current == null) return currentNear;

        //1. Check against the current point...  closer?
        if(current.p.dist(p) < nearDist) {      //get distance to the query point from the partition point)
            currentNear = current.p;
            nearDist = current.p.dist(p);
        }
        //2. Check which side the query point is on
        if(current.dir == Partition.Direction.DOWNUP) {
            if(p.x() > current.p.x()) {
                currentNear = nearest(current.right, p, currentNear, nearDist);
            }
            else currentNear = nearest(current.left, p, currentNear, nearDist);

            //3. Check if we should check the other side!
            double partDist = current.p.x() - p.x();
            if (partDist < 0) partDist = -1 * partDist;
            if (nearDist < 0) nearDist = -1 * nearDist;
            if (nearDist > partDist) {
                if (p.x() > current.p.x()) nearest(current.left, p, currentNear, nearDist);
                else nearest(current.right, p, currentNear, nearDist);
            }
        }
        else {    // dir is LEFTRIGHT
            if(p.y() > current.p.y()) {
                currentNear = nearest(current.right, p, currentNear, nearDist);
            }
            else currentNear = nearest(current.left, p, currentNear, nearDist);

            //3. Check if we should check the other side!
            double partDist = current.p.y() - p.y();
            if (partDist < 0) partDist = -1 * partDist;
            if (nearDist < 0) nearDist = -1 * nearDist;
            if (nearDist > partDist) {
                if (p.y() > current.p.y()) nearest(current.left, p, currentNear, nearDist);
                else nearest(current.right, p, currentNear, nearDist);
            }
        }

        return currentNear;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        //add things to the global maxpq!
        kNearest(root, p, k);
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    private void kNearest(Node current, Point p, int k) {
        if(current == null) return;

        //1. Check against the current point...  closer?
        ptpq.insert(new PointDist(current.p, current.p.dist(p)));
        if( ptpq.size() > k ) ptpq.delMax();

        //stopped walking here 11/18
//
//        //2. Check which side the query point is on
//        if(current.dir == Partition.Direction.DOWNUP) {
//            if(p.x() > current.p.x()) {
//                kNearest(current.right, p, k);
//            }
//            else kNearest(current.left, p, k);
//
//            //3. Check if we should check the other side!
//            double partDist = current.p.x() - p.x();
//            if (partDist < 0) partDist = -1 * partDist;
//            if (nearDist < 0) nearDist = -1 * nearDist;
//            if (nearDist > partDist) {
//                if (p.x() > current.p.x()) kNearest(current.left, p, k);
//                else kNearest(current.right, p, k);
//            }
//        }
//        else {    // dir is LEFTRIGHT
//            if(p.y() > current.p.y()) {
//                kNearest(current.right, p, k);
//            }
//            else kNearest(current.left, p,  k);
//
//            //3. Check if we should check the other side!
//            double partDist = current.p.y() - p.y();
//            if (partDist < 0) partDist = -1 * partDist;
//            if (nearDist < 0) nearDist = -1 * nearDist;
//            if (nearDist > partDist) {
//                if (p.y() > current.p.y()) kNearest(current.left, p, k);
//                else kNearest(current.right, p, k);
//            }
//        }
    }


    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        return new Point(minx,miny);
    }
    public Point max() {
        if(isEmpty()) return null;
        return new Point(maxx,maxy);
    }

    // return the number of Points in kD-tree
    public int size() { return count; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return count==0; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.18.16.44.42.352.4 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.18.16.44.42.352.5 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.18.16.44.42.352.6 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.18.16.44.42.352.7 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.18.16.44.42.353.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.18.16.44.42.353.1 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.18.16.45.50.759.0 ]--
UpdateTree (AD): 1 0
+ /P05_KDTrees.zip

--[ 2022.11.18.16.46.11.698.0 ]--
DisposeComponent
--[ 2022.11.21.13.04.32.572.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.21.13.04.32.596.0 ]--
InitTree:
/out/production/P05_KDTrees/.donotlog
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/input1M.txt
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/input100K.txt
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/burgerking.csv
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/main
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/main
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
/.git/objects/1a/49d62b998226393c172907eef021434d19be9a
/.git/objects/1f/fc97640cccefe0b1a237033b6373d6267daafb
/.git/objects/21/5f9d8b463f594d7a29686b9e9be2c095a4e415
/.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
/.git/objects/2b/146202332c98f33d1ab3db98dea03e6bbc1093
/.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
/.git/objects/2d/684a62c75f8da8fc231206420108d204cbe252
/.git/objects/2d/a01175c002a7aca63ea26eac5644d92eff4262
/.git/objects/2e/d4fe70b4e088ec2c3ac33ca08f741ed2d35a97
/.git/objects/3a/467db814b5de23a11971dfafc2a31dab54402b
/.git/objects/3e/ec82059c43fd48c2c87acbb5d3146919181ac4
/.git/objects/54/0fd2392eaf74abc751e9970668bf235e56f803
/.git/objects/67/a3cbc10acb52f757cbd15ab1a2acaef561cf5d
/.git/objects/6a/13eb1367395cad1f3ae5b2219d4d1a970335e1
/.git/objects/6e/10e3d8976dabc74255b1ddce2024336f50d7e2
/.git/objects/6e/e6bdaf464e0f4adb373587a385e0875ebf8ba6
/.git/objects/75/63d3f1a349009df7dbf21fee30194eead50ca0
/.git/objects/7c/f2891237ab51abd3dcfe41128b939aa54ae3a2
/.git/objects/86/5b56d35df1dcfcbf5196eeddcef674c03a3a93
/.git/objects/8d/e804238c33c653fe535bd162aabed440497ec7
/.git/objects/9a/8c6aff1f8871e01cacec32f40b40f4107494d2
/.git/objects/9a/e8d0c18cb848aa651381c33a3fa44eddc40bcb
/.git/objects/a4/1f4cf11f0c1e522a76feaaea7dd201322b74b2
/.git/objects/af/24b078cc669f5e4da5902ba1297a2ac0fa2339
/.git/objects/b2/0a2737119fe126fc0fc4d4284bed106ad85463
/.git/objects/b7/710fca979cfd5216bf2633dd1dfa8161d9f45f
/.git/objects/bd/dc962f4cacb8ce630d07f575b6668243250fb1
/.git/objects/c2/259fdab2fede23add0f6b409611094fb0ae13a
/.git/objects/c7/e29d8475f23acd8d328dc8074104b846f4bbbf
/.git/objects/c7/ed19fcb2ed6617a23bd3e9a2efaa966bed42da
/.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
/.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
/.git/objects/ce/2de51fa2f6dd8ca45683eb75ba132137da5a20
/.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
/.git/objects/d4/85126c43a458d604c41191c3cd216e30972972
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/e9/ce331a35ca02c33b0678d762c13fe57fe4a67a
/.git/objects/ee/909fb82334c194c06fd779181ba31079f10d42
/.git/objects/f5/001ef95b10cd55e1f28b609cd462b09cf24d06
/.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
/.git/objects/fc/e1363a394e590b51c742706992bebecae53b2b
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.idx
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.pack
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_10_01_AM_[Changes]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__10_01_AM__Changes_.xml
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml
/P05_KDTrees.zip

--[ 2022.11.21.13.04.32.597.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.21.13.04.32.597.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.21.13.04.32.597.2 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.21.13.04.32.597.3 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */

// red-black trees

public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection

    RedBlackBST<Point, Value> rbst;
    double minx;
    double miny;
    double maxx;
    double maxy;

    public PSBruteForce() {
        rbst = new RedBlackBST<>();
    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        rbst.put(p,v);
        if(rbst.size() == 1) {
            minx = p.x();
            miny = p.y();

            maxx = p.x();
            maxy = p.y();
        }
        else {
            if(p.x() < minx) minx = p.x();
            if(p.y() < miny) miny = p.y();

            if(p.x() > maxx) maxx = p.x();
            if(p.y() > maxy) maxy = p.y();
        }
    }

    public Value get(Point p) {
        return rbst.get(p);
    }

    public boolean contains(Point p) {
        return rbst.contains(p);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return rbst.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        Point currentNear = null;
        double nearDist = 0;
        int idx = 0;
        Iterable<Point> iter = points();
        for( Point i : iter ) {
            if(i != p ) {
                double distance = p.dist(i);
                if(idx == 0 || distance < nearDist) {
                    nearDist = distance;
                    currentNear = i;
                }
            }
            idx++;
        }
        return currentNear;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        Point nearestPoint = nearest(p);
        return rbst.get(nearestPoint);
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() {
        //for each iterable loop, remember the min
        return new Point(minx, miny);
    }
    public Point max() {
        //same as min, but with max
        return new Point(maxx, maxy);
    }


    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        MaxPQ<PointDist> ptpq = new MaxPQ<>();

        Iterable<Point> iter = points();
        for( Point i : iter ) {

                PointDist distance = new PointDist(i, p.dist(i));
                ptpq.insert(distance);
                while (ptpq.size()>k) ptpq.delMax();
        }
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return rbst.size(); }

    // return whether the KDTree is empty
    public boolean isEmpty() { return rbst.isEmpty(); }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2022.11.21.13.04.32.597.4 ]--
InitFile: /.cos265


--[ 2022.11.21.13.04.32.597.5 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.21.13.04.32.597.6 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;

        public Node(Point pt, Value val) {
            p = pt;
            v = val;
        }
    }

    BST<Point, Value> kdt;
    int count=0;

    double minx;
    double miny;
    double maxx;
    double maxy;
    Node root=null;
    MaxPQ<PointDist> ptpq = new MaxPQ<>();


    //point stack
    Stack<Point> ps = new Stack<>();    //doesn't account for deletions
    //stack of partitions
    Stack<Partition> sp = new Stack<>();
    // constructor makes empty kD-tree
    public PSKDTree() {
        kdt = new BST<Point, Value>();
    }

    // add the given Point to kD-tree -- here is 2D (x and y)
    public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inserting
        if (v == null) { return; } // can't do anything with a null value

        if(root==null) {
            Node x = new Node(p,v);
            x.left=null;
            x.right=null;
            x.dir= Partition.Direction.DOWNUP;
            root=x;
            minx = x.p.x();
            miny = x.p.y();

            maxx = x.p.x();
            maxy = x.p.y();
            ps.push(x.p);
            sp.push(new Partition(x.p,x.p,x.dir));
        }
        else put(root, p, v, root);
        count++;
    }

    private Node put(Node x, Point p, Value v, Node parent) {
        if (x == null) {
            Node newNode = new Node(p,v);
            if(parent.dir == Partition.Direction.DOWNUP) {
                newNode.dir = Partition.Direction.LEFTRIGHT;
                newNode.left=null;
                newNode.right=null;
            }
            else {
                newNode.dir = Partition.Direction.DOWNUP;
                newNode.left=null;
                newNode.right=null;
            }
            if(newNode.p.x() < minx) minx = newNode.p.x();
            if(newNode.p.y() < miny) miny = newNode.p.y();

            if(newNode.p.x() > maxx) maxx = newNode.p.x();
            if(newNode.p.y() > maxy) maxy = newNode.p.y();
            ps.push(p);
            sp.push(new Partition(newNode.p,newNode.p,newNode.dir));
            return newNode;
        }
        else {
            Partition.Direction parentDir = x.dir;

            if (parentDir == Partition.Direction.DOWNUP) {
                if (x.p.x() > p.x()) x.left = put(x.left, p, v, x);
                else x.right = put(x.right, p, v, x);
            } else {
                if (x.p.y() > p.y()) x.left = put(x.left, p, v, x);
                else x.right = put(x.right, p, v, x);
            }
            return x;
        }
    }

    public Value get(Point p) {
        if(isEmpty()) return null;
        return get(root, p, root); //search through the tree instead of returning null
    }

    private Value get(Node current, Point p, Node parent) {
        if(current==null) return null;
        if(parent.dir == Partition.Direction.DOWNUP) {
            if (parent.p.x() < current.p.x()) return get(parent.right, p, parent);
            else if (parent.p.x() > current.p.x()) return get(parent.left, p, parent);
            else return current.v;
        }
        else {
            if (parent.p.y() < current.p.y()) return get(parent.right, p, parent);
            else if (parent.p.y() > current.p.y()) return get(parent.left, p, parent);
            else return current.v;
        }
    }

    public boolean contains(Point p) {
        return get(p)!=null; //searching again for p in the bst
    }

    public Value getNearest(Point p) {
        if(isEmpty()) return null;
        Point nearestPoint = nearest(p);
        return get(nearestPoint);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return ps; }

    // return an iterable of all partitions that make up the kD-tree
    //we didn't know what to do with two points in the partition constructor,
    //so the points in each partition are the same
    public Iterable<Partition> partitions() { return sp; }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        if(isEmpty()) return null;

        return nearest(root, p, root.p, root.p.dist(p));
    }
    private Point nearest(Node current, Point p, Point currentNear, double nearDist) {
        if(current == null) return currentNear;

        //1. Check against the current point...  closer?
        if(current.p.dist(p) < nearDist) {      //get distance to the query point from the partition point)
            currentNear = current.p;
            nearDist = current.p.dist(p);
        }
        //2. Check which side the query point is on
        if(current.dir == Partition.Direction.DOWNUP) {
            if(p.x() > current.p.x()) {
                currentNear = nearest(current.right, p, currentNear, nearDist);
            }
            else currentNear = nearest(current.left, p, currentNear, nearDist);

            //3. Check if we should check the other side!
            double partDist = current.p.x() - p.x();
            if (partDist < 0) partDist = -1 * partDist;
            if (nearDist < 0) nearDist = -1 * nearDist;
            if (nearDist > partDist) {
                if (p.x() > current.p.x()) nearest(current.left, p, currentNear, nearDist);
                else nearest(current.right, p, currentNear, nearDist);
            }
        }
        else {    // dir is LEFTRIGHT
            if(p.y() > current.p.y()) {
                currentNear = nearest(current.right, p, currentNear, nearDist);
            }
            else currentNear = nearest(current.left, p, currentNear, nearDist);

            //3. Check if we should check the other side!
            double partDist = current.p.y() - p.y();
            if (partDist < 0) partDist = -1 * partDist;
            if (nearDist < 0) nearDist = -1 * nearDist;
            if (nearDist > partDist) {
                if (p.y() > current.p.y()) nearest(current.left, p, currentNear, nearDist);
                else nearest(current.right, p, currentNear, nearDist);
            }
        }

        return currentNear;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        //add things to the global maxpq!
        kNearest(root, p, k);
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    private void kNearest(Node current, Point p, int k) {
        if(current == null) return;

        //1. Check against the current point...  closer?
        ptpq.insert(new PointDist(current.p, current.p.dist(p)));
        if( ptpq.size() > k ) ptpq.delMax();

        //stopped walking here 11/18
//
//        //2. Check which side the query point is on
//        if(current.dir == Partition.Direction.DOWNUP) {
//            if(p.x() > current.p.x()) {
//                kNearest(current.right, p, k);
//            }
//            else kNearest(current.left, p, k);
//
//            //3. Check if we should check the other side!
//            double partDist = current.p.x() - p.x();
//            if (partDist < 0) partDist = -1 * partDist;
//            if (nearDist < 0) nearDist = -1 * nearDist;
//            if (nearDist > partDist) {
//                if (p.x() > current.p.x()) kNearest(current.left, p, k);
//                else kNearest(current.right, p, k);
//            }
//        }
//        else {    // dir is LEFTRIGHT
//            if(p.y() > current.p.y()) {
//                kNearest(current.right, p, k);
//            }
//            else kNearest(current.left, p,  k);
//
//            //3. Check if we should check the other side!
//            double partDist = current.p.y() - p.y();
//            if (partDist < 0) partDist = -1 * partDist;
//            if (nearDist < 0) nearDist = -1 * nearDist;
//            if (nearDist > partDist) {
//                if (p.y() > current.p.y()) kNearest(current.left, p, k);
//                else kNearest(current.right, p, k);
//            }
//        }
    }


    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        return new Point(minx,miny);
    }
    public Point max() {
        if(isEmpty()) return null;
        return new Point(maxx,maxy);
    }

    // return the number of Points in kD-tree
    public int size() { return count; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return count==0; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.21.13.04.32.597.7 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.21.13.04.32.597.8 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.21.13.04.32.597.9 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.21.13.04.32.598.0 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.21.13.04.32.598.1 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.21.13.04.32.598.2 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.17.18.10.34.593.0 ]--
DisposeComponent
--[ 2022.11.17.19.16.01.326.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.17.19.16.01.620.0 ]--
InitTree:
/out/production/P05_KDTrees/.donotlog
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/input1M.txt
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/input100K.txt
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/burgerking.csv
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/main
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/main
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
/.git/objects/0f/05624ad8de377d4bdf3ec1558d477af125661c
/.git/objects/11/6f5b50e2bd7e5a645224f577c702fc62092122
/.git/objects/1a/49d62b998226393c172907eef021434d19be9a
/.git/objects/1f/b9dc988a5179e983b847d789447e3c5fa79e57
/.git/objects/1f/fc97640cccefe0b1a237033b6373d6267daafb
/.git/objects/21/5f9d8b463f594d7a29686b9e9be2c095a4e415
/.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
/.git/objects/2b/146202332c98f33d1ab3db98dea03e6bbc1093
/.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
/.git/objects/2d/684a62c75f8da8fc231206420108d204cbe252
/.git/objects/2e/d4fe70b4e088ec2c3ac33ca08f741ed2d35a97
/.git/objects/30/6f36bddc52f2e08ccf8a41536340870eb1829c
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/39/5d98ffb25a1aa9df31eb7f0e6c2af2e28bc31d
/.git/objects/3c/91061820fd12503e015c3c19cec90b78494358
/.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4f/ce1d86b49521afe1cee4ed1c13b6396ebbc6f3
/.git/objects/54/0fd2392eaf74abc751e9970668bf235e56f803
/.git/objects/5c/98b428844d9f7d529e2b6fb918d15bf072f3df
/.git/objects/65/427e6010f1b59257bc8ac509401e7eeb2698d4
/.git/objects/67/a3cbc10acb52f757cbd15ab1a2acaef561cf5d
/.git/objects/68/2820a134168b0d23787b376165bef89b511f00
/.git/objects/6e/10e3d8976dabc74255b1ddce2024336f50d7e2
/.git/objects/6e/e6bdaf464e0f4adb373587a385e0875ebf8ba6
/.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
/.git/objects/75/63d3f1a349009df7dbf21fee30194eead50ca0
/.git/objects/7d/61ee6e1564fdc3e562582a8ca1c55185fd2b09
/.git/objects/80/8df08d052527e9a626a08c732fb0fb470708c8
/.git/objects/86/5b56d35df1dcfcbf5196eeddcef674c03a3a93
/.git/objects/8b/e37e197c873cbcd2952f364d9e3a447bc4e692
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/8d/e804238c33c653fe535bd162aabed440497ec7
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
/.git/objects/9a/8c6aff1f8871e01cacec32f40b40f4107494d2
/.git/objects/9a/e8d0c18cb848aa651381c33a3fa44eddc40bcb
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/a4/1f4cf11f0c1e522a76feaaea7dd201322b74b2
/.git/objects/aa/90a9d65e85ba8dedaeee57dbca845093794f15
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/39a65a74d4111e721807c06e27bd6754992fbb
/.git/objects/af/24b078cc669f5e4da5902ba1297a2ac0fa2339
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b7/710fca979cfd5216bf2633dd1dfa8161d9f45f
/.git/objects/bd/dc962f4cacb8ce630d07f575b6668243250fb1
/.git/objects/c2/828bc31a68ae45ce1922d19323206b232cbda4
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/c7/e29d8475f23acd8d328dc8074104b846f4bbbf
/.git/objects/c7/ed19fcb2ed6617a23bd3e9a2efaa966bed42da
/.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
/.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
/.git/objects/ce/2de51fa2f6dd8ca45683eb75ba132137da5a20
/.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
/.git/objects/d4/85126c43a458d604c41191c3cd216e30972972
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/de/c87ed246fc3ca006dddb4db1972a0e1d67919e
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
/.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
/.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
/.git/objects/e9/ce331a35ca02c33b0678d762c13fe57fe4a67a
/.git/objects/ee/909fb82334c194c06fd779181ba31079f10d42
/.git/objects/ef/89a8450022222b69a62814d66e3f6c8ecb5a60
/.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
/.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
/.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_8_38_PM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_11_28_AM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22__1_29_PM__Default_.xml
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__8_38_PM__Default_.xml
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__11_28_AM__Default_.xml
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml

--[ 2022.11.17.19.16.01.621.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.17.19.16.01.621.1 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.17.19.16.01.621.2 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.17.19.16.01.621.3 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSBruteForce<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.17.19.16.01.622.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.17.19.16.01.622.1 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.17.19.16.01.623.0 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.17.19.16.01.623.1 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.17.19.16.01.624.0 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */

// red-black trees

public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection

    RedBlackBST<Point, Value> rbst;
    double minx;
    double miny;
    double maxx;
    double maxy;
    public PSBruteForce() {
        rbst = new RedBlackBST<>();
    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        rbst.put(p,v);
        if(rbst.size() == 1) {
            minx = p.x();
            miny = p.y();

            maxx = p.x();
            maxy = p.y();
        }
        else {
            if(p.x() < minx) minx = p.x();
            if(p.y() < miny) miny = p.y();

            if(p.x() > maxx) maxx = p.x();
            if(p.y() > maxy) maxy = p.y();
        }
    }

    public Value get(Point p) {
        return rbst.get(p);
    }

    public boolean contains(Point p) {
        return rbst.contains(p);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return rbst.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        Point currentNear = null;
        double nearDist = 0;
        int idx = 0;
        Iterable<Point> iter = points();
        for( Point i : iter ) {
            if(i != p ) {
                double distance = p.dist(i);
                if(idx == 0 || distance < nearDist) {
                    nearDist = distance;
                    currentNear = i;
                }
            }
            idx++;
        }
        return currentNear;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        Point nearestPoint = nearest(p);
        return rbst.get(nearestPoint);
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() {
        //for each iterable loop, remember the min
        return new Point(minx, miny);
    }
    public Point max() {
        //same as min, but with max
        return new Point(maxx, maxy);
    }


    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        MaxPQ<PointDist> ptpq = new MaxPQ<>();

        Iterable<Point> iter = points();
        for( Point i : iter ) {

                PointDist distance = new PointDist(i, p.dist(i));
                ptpq.insert(distance);
                while (ptpq.size()>k) ptpq.delMax();
        }
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return rbst.size(); }

    // return whether the KDTree is empty
    public boolean isEmpty() { return rbst.isEmpty(); }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2022.11.17.19.16.01.625.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;

        public Node(Point pt, Value val) {
            p = pt;
            v = val;
        }
    }

    BST<Point, Value> kdt;
    int count=0;

    Point minimum;
    Point maximum;
    Node root=null;
    // constructor makes empty kD-tree
    public PSKDTree() {
        kdt = new BST<Point, Value>();
    }

    // add the given Point to kD-tree -- here is 2D (x and y)
    public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inserting
        if (v == null) { return; } // can't do anything with a null value

        if(root==null) {
            Node x = new Node();
            x.p=p;
            x.v=v;
            x.left=null;
            x.right=null;
            x.dir= Partition.Direction.DOWNUP;
            root=x;
        }
        else put(root, p, v);
        count++;
    }

    private Node put(Node x, Point p, Value v) {
        if (x == null) return new Node(p, v);
        Partition.Direction parentDir = x.dir;
        if(parentDir == Partition.Direction.DOWNUP) {
            if(x.p.x() > p.x()) x.left = put(x.left, p, v);
            else x.right = put(x.right,p,v);
        }
        else {
            if(x.p.y() > p.y()) x.left = put(x.left, p, v);
            else x.right = put(x.right,p,v);
        }
        return x;
    }

    public Value get(Point p) {
        if(isEmpty()) return null;
        return null; //search through the tree instead of returning null
    }

    public boolean contains(Point p) {
        return false; //searching again for p in the bst
    }

    public Value getNearest(Point p) {
        if(isEmpty()) return null;
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; } //account for deletions?

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        return null;
    }
    public Point max() {
        if(isEmpty()) return null;
        return null;
    }

    // return the number of Points in kD-tree
    public int size() { return count; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return count==0; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.17.19.16.01.625.1 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.17.19.16.01.625.2 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.17.19.16.01.625.3 ]--
InitFile: /.cos265


--[ 2022.11.17.19.54.48.990.0 ]--
DisposeComponent
--[ 2022.11.18.13.20.30.477.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.18.13.20.30.730.0 ]--
InitTree:
/out/production/P05_KDTrees/.donotlog
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/input1M.txt
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/input100K.txt
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/burgerking.csv
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/main
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/main
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/01/93c2673203020e3726e397a6870107f9e38aa9
/.git/objects/05/054a55af449d7a3d22569a0d9278837d3116b7
/.git/objects/05/aa0754159021ad4bb196249ebed23fcaee0f05
/.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
/.git/objects/0f/05624ad8de377d4bdf3ec1558d477af125661c
/.git/objects/11/6f5b50e2bd7e5a645224f577c702fc62092122
/.git/objects/1a/49d62b998226393c172907eef021434d19be9a
/.git/objects/1f/b9dc988a5179e983b847d789447e3c5fa79e57
/.git/objects/1f/fc97640cccefe0b1a237033b6373d6267daafb
/.git/objects/21/5f9d8b463f594d7a29686b9e9be2c095a4e415
/.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
/.git/objects/2b/146202332c98f33d1ab3db98dea03e6bbc1093
/.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
/.git/objects/2d/684a62c75f8da8fc231206420108d204cbe252
/.git/objects/2e/d4fe70b4e088ec2c3ac33ca08f741ed2d35a97
/.git/objects/30/6f36bddc52f2e08ccf8a41536340870eb1829c
/.git/objects/34/c40469b8879baee4fbd8d7ee3c930ed59cb6f3
/.git/objects/39/5d98ffb25a1aa9df31eb7f0e6c2af2e28bc31d
/.git/objects/3c/91061820fd12503e015c3c19cec90b78494358
/.git/objects/43/34e267d8776aabbeb38713c0a502fa328ceb68
/.git/objects/49/554703073ae63a7122c05b80a894ac3ff48370
/.git/objects/4f/ce1d86b49521afe1cee4ed1c13b6396ebbc6f3
/.git/objects/54/0fd2392eaf74abc751e9970668bf235e56f803
/.git/objects/5c/98b428844d9f7d529e2b6fb918d15bf072f3df
/.git/objects/65/427e6010f1b59257bc8ac509401e7eeb2698d4
/.git/objects/67/a3cbc10acb52f757cbd15ab1a2acaef561cf5d
/.git/objects/68/2820a134168b0d23787b376165bef89b511f00
/.git/objects/6e/10e3d8976dabc74255b1ddce2024336f50d7e2
/.git/objects/6e/e6bdaf464e0f4adb373587a385e0875ebf8ba6
/.git/objects/74/a6a5d585c5ea37685f0464c4d008732ed403d9
/.git/objects/75/63d3f1a349009df7dbf21fee30194eead50ca0
/.git/objects/7d/61ee6e1564fdc3e562582a8ca1c55185fd2b09
/.git/objects/80/8df08d052527e9a626a08c732fb0fb470708c8
/.git/objects/86/5b56d35df1dcfcbf5196eeddcef674c03a3a93
/.git/objects/8b/e37e197c873cbcd2952f364d9e3a447bc4e692
/.git/objects/8c/333a97e7dbd1f8d32d947ad097e8e247f9f041
/.git/objects/8d/e804238c33c653fe535bd162aabed440497ec7
/.git/objects/91/4c3a82a059ff11e1e2248c3ee1ce32a78bc63a
/.git/objects/96/cc43efa6a0885098044e976cd780bb42c68a70
/.git/objects/9a/8c6aff1f8871e01cacec32f40b40f4107494d2
/.git/objects/9a/e8d0c18cb848aa651381c33a3fa44eddc40bcb
/.git/objects/9c/780ff1eacdac600ca19795de4e5f1220a1bf3e
/.git/objects/a4/1f4cf11f0c1e522a76feaaea7dd201322b74b2
/.git/objects/aa/90a9d65e85ba8dedaeee57dbca845093794f15
/.git/objects/aa/d3f0402094e10cd99e06ba2a544a57396b1919
/.git/objects/ae/39a65a74d4111e721807c06e27bd6754992fbb
/.git/objects/af/24b078cc669f5e4da5902ba1297a2ac0fa2339
/.git/objects/b4/a758f2f8c8a18b851825e056e555c5620ae676
/.git/objects/b6/90d19ac158bfa6e1ae11cef101f0d1a7434bd9
/.git/objects/b7/710fca979cfd5216bf2633dd1dfa8161d9f45f
/.git/objects/bd/dc962f4cacb8ce630d07f575b6668243250fb1
/.git/objects/c2/828bc31a68ae45ce1922d19323206b232cbda4
/.git/objects/c3/fde00d07458f153bdb5082ceb011de8dcc9721
/.git/objects/c7/e29d8475f23acd8d328dc8074104b846f4bbbf
/.git/objects/c7/ed19fcb2ed6617a23bd3e9a2efaa966bed42da
/.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
/.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
/.git/objects/ce/2de51fa2f6dd8ca45683eb75ba132137da5a20
/.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
/.git/objects/d4/85126c43a458d604c41191c3cd216e30972972
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/de/c87ed246fc3ca006dddb4db1972a0e1d67919e
/.git/objects/e2/3a8b692a016f63a83e1997a2326d3be18d8d1e
/.git/objects/e5/f5f06b6f0fb91e529051f1cb6651cc60ce2f48
/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
/.git/objects/e7/bedf3377d40335424fd605124d4761390218bb
/.git/objects/e9/6534fb27b68192f27f985d3879e173ec77adb8
/.git/objects/e9/ce331a35ca02c33b0678d762c13fe57fe4a67a
/.git/objects/ee/909fb82334c194c06fd779181ba31079f10d42
/.git/objects/ef/89a8450022222b69a62814d66e3f6c8ecb5a60
/.git/objects/f1/9e236587050cfbf8e8761a3460ac0c95e5fb0c
/.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
/.git/objects/fb/e4187a868130477a51ea5c1bc60e0dce69cec4
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_8_38_PM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_11_28_AM_[Default]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22__1_29_PM__Default_.xml
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__8_38_PM__Default_.xml
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__11_28_AM__Default_.xml
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml

--[ 2022.11.18.13.20.30.733.0 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.18.13.20.30.733.1 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.18.13.20.30.733.2 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.18.13.20.30.734.0 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 100;
    private final static int nUniform  = 100;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSBruteForce<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 10;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.18.13.20.30.734.1 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.18.13.20.30.734.2 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.18.13.20.30.734.3 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.18.13.20.30.734.4 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.18.13.20.30.734.5 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */

// red-black trees

public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection

    RedBlackBST<Point, Value> rbst;
    double minx;
    double miny;
    double maxx;
    double maxy;
    public PSBruteForce() {
        rbst = new RedBlackBST<>();
    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        rbst.put(p,v);
        if(rbst.size() == 1) {
            minx = p.x();
            miny = p.y();

            maxx = p.x();
            maxy = p.y();
        }
        else {
            if(p.x() < minx) minx = p.x();
            if(p.y() < miny) miny = p.y();

            if(p.x() > maxx) maxx = p.x();
            if(p.y() > maxy) maxy = p.y();
        }
    }

    public Value get(Point p) {
        return rbst.get(p);
    }

    public boolean contains(Point p) {
        return rbst.contains(p);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return rbst.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        Point currentNear = null;
        double nearDist = 0;
        int idx = 0;
        Iterable<Point> iter = points();
        for( Point i : iter ) {
            if(i != p ) {
                double distance = p.dist(i);
                if(idx == 0 || distance < nearDist) {
                    nearDist = distance;
                    currentNear = i;
                }
            }
            idx++;
        }
        return currentNear;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        Point nearestPoint = nearest(p);
        return rbst.get(nearestPoint);
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() {
        //for each iterable loop, remember the min
        return new Point(minx, miny);
    }
    public Point max() {
        //same as min, but with max
        return new Point(maxx, maxy);
    }


    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        MaxPQ<PointDist> ptpq = new MaxPQ<>();

        Iterable<Point> iter = points();
        for( Point i : iter ) {

                PointDist distance = new PointDist(i, p.dist(i));
                ptpq.insert(distance);
                while (ptpq.size()>k) ptpq.delMax();
        }
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return rbst.size(); }

    // return whether the KDTree is empty
    public boolean isEmpty() { return rbst.isEmpty(); }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }
}

--[ 2022.11.18.13.20.30.735.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;

        public Node(Point pt, Value val) {
            p = pt;
            v = val;
        }
    }

    BST<Point, Value> kdt;
    int count=0;

    Point minimum;
    Point maximum;
    Node root=null;
    // constructor makes empty kD-tree
    public PSKDTree() {
        kdt = new BST<Point, Value>();
    }

    // add the given Point to kD-tree -- here is 2D (x and y)
    public void put(Point p, Value v) {  //change?? remember to alternate x and y coords for inserting
        if (v == null) { return; } // can't do anything with a null value

        if(root==null) {
            Node x = new Node();
            x.p=p;
            x.v=v;
            x.left=null;
            x.right=null;
            x.dir= Partition.Direction.DOWNUP;
            root=x;
        }
        else put(root, p, v);
        count++;
    }

    private Node put(Node x, Point p, Value v) {
        if (x == null) return new Node(p, v);
        Partition.Direction parentDir = x.dir;
        if(parentDir == Partition.Direction.DOWNUP) {
            if(x.p.x() > p.x()) x.left = put(x.left, p, v);
            else x.right = put(x.right,p,v);
        }
        else {
            if(x.p.y() > p.y()) x.left = put(x.left, p, v);
            else x.right = put(x.right,p,v);
        }
        return x;
    }

    public Value get(Point p) {
        if(isEmpty()) return null;
        return null; //search through the tree instead of returning null
    }

    public boolean contains(Point p) {
        return false; //searching again for p in the bst
    }

    public Value getNearest(Point p) {
        if(isEmpty()) return null;
        return null;
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return null; } //account for deletions?

    // return an iterable of all partitions that make up the kD-tree
    public Iterable<Partition> partitions() {
        return null;
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        return null;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        return null;
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        return null;
    }
    public Point max() {
        if(isEmpty()) return null;
        return null;
    }

    // return the number of Points in kD-tree
    public int size() { return count; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return count==0; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.18.13.20.30.736.0 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.18.13.20.30.737.0 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.18.13.20.30.737.1 ]--
InitFile: /.cos265


--[ 2022.11.18.13.21.12.042.0 ]--
:/src/NearestNeighborVisualizer.java
r 18         return new PSKDTree<>();
--[ 2022.11.18.13.21.12.592.0 ]--
:/src/PSBruteForce.java
+ 18 
--[ 2022.11.18.13.21.13.403.0 ]--
:/src/PSKDTree.java
+ 24     double minx;
+ 25     double miny;
r 26     double maxx;
r 27     double maxy;
+ 29 
+ 30     //point stack
+ 31     Stack<Point> ps = new Stack<>();    //doesn't account for deletions
+ 32     //stack of partitions
+ 33     Stack<Partition> sp = new Stack<>();
- 44
- 44
r 44             Node x = new Node(p,v);
+ 49             minx = x.p.x();
+ 50             miny = x.p.y();
+ 51 
+ 52             maxx = x.p.x();
+ 53             maxy = x.p.y();
+ 54             ps.push(x.p);
+ 55             sp.push(new Partition(x.p,x.p,x.dir));
r 57         else put(root, p, v, root);
+ 61     private Node put(Node x, Point p, Value v, Node parent) {
+ 62         if (x == null) {
+ 63             Node newNode = new Node(p,v);
+ 64             if(parent.dir == Partition.Direction.DOWNUP) {
+ 65                 newNode.dir = Partition.Direction.LEFTRIGHT;
+ 66                 newNode.left=null;
+ 67                 newNode.right=null;
+ 68             }
+ 69             else {
+ 70                 newNode.dir = Partition.Direction.DOWNUP;
+ 71                 newNode.left=null;
+ 72                 newNode.right=null;
+ 73             }
+ 74             if(newNode.p.x() < minx) minx = newNode.p.x();
+ 75             if(newNode.p.y() < miny) miny = newNode.p.y();
r 76 
r 77             if(newNode.p.x() > maxx) maxx = newNode.p.x();
r 78             if(newNode.p.y() > maxy) maxy = newNode.p.y();
r 79             ps.push(p);
r 80             sp.push(new Partition(newNode.p,newNode.p,newNode.dir));
r 81             return newNode;
+ 84             Partition.Direction parentDir = x.dir;
+ 85 
+ 86             if (parentDir == Partition.Direction.DOWNUP) {
+ 87                 if (x.p.x() > p.x()) x.left = put(x.left, p, v, x);
+ 88                 else x.right = put(x.right, p, v, x);
+ 89             } else {
+ 90                 if (x.p.y() > p.y()) x.left = put(x.left, p, v, x);
r 91                 else x.right = put(x.right, p, v, x);
r 92             }
r 93             return x;
r 94         }
+ 99         return get(root, p, root); //search through the tree instead of returning null
+ 100     }
+ 101 
+ 102     private Value get(Node current, Point p, Node parent) {
+ 103         if(current==null) return null;
+ 104         if(parent.dir == Partition.Direction.DOWNUP) {
+ 105             if (parent.p.x() < current.p.x()) return get(parent.right, p, parent);
+ 106             else if (parent.p.x() > current.p.x()) return get(parent.left, p, parent);
+ 107             else return current.v;
+ 108         }
+ 109         else {
+ 110             if (parent.p.y() < current.p.y()) return get(parent.right, p, parent);
+ 111             else if (parent.p.y() > current.p.y()) return get(parent.left, p, parent);
+ 112             else return current.v;
r 113         }
r 117         return get(p)!=null; //searching again for p in the bst
+ 122         Point nearestPoint = nearest(p);
r 123         return get(nearestPoint);
r 127     public Iterable<Point> points() { return ps; }
r 130     //we didn't know what to do with two points in the partition constructor,
r 131     //so the points in each partition are the same
r 132     public Iterable<Partition> partitions() { return sp; }
+ 136         Point currentNear = root.p;
+ 137         double nearDist = p.dist(root.p);
+ 138 
+ 139 
r 140         return currentNear;
r 153         return new Point(minx,miny);
r 157         return new Point(maxx,maxy);
--[ 2022.11.18.16.46.21.438.0 ]--
UpdateTree (AD): 5 0
+ /.git/objects/2d/a01175c002a7aca63ea26eac5644d92eff4262
+ /.git/objects/3a/467db814b5de23a11971dfafc2a31dab54402b
+ /.git/objects/6a/13eb1367395cad1f3ae5b2219d4d1a970335e1
+ /.git/objects/b2/0a2737119fe126fc0fc4d4284bed106ad85463
+ /.git/objects/f5/001ef95b10cd55e1f28b609cd462b09cf24d06

--[ 2022.11.21.13.02.54.785.0 ]--
+ 29     MaxPQ<PointDist> ptpq = new MaxPQ<>();
+ 30 
+ 138         if(isEmpty()) return null;
+ 139 
+ 140         return nearest(root, p, root.p, root.p.dist(p));
+ 141     }
+ 142     private Point nearest(Node current, Point p, Point currentNear, double nearDist) {
+ 143         if(current == null) return currentNear;
+ 144 
+ 145         //1. Check against the current point...  closer?
+ 146         if(current.p.dist(p) < nearDist) {      //get distance to the query point from the partition point)
+ 147             currentNear = current.p;
+ 148             nearDist = current.p.dist(p);
+ 149         }
+ 150         //2. Check which side the query point is on
+ 151         if(current.dir == Partition.Direction.DOWNUP) {
+ 152             if(p.x() > current.p.x()) {
+ 153                 currentNear = nearest(current.right, p, currentNear, nearDist);
+ 154             }
+ 155             else currentNear = nearest(current.left, p, currentNear, nearDist);
+ 156 
+ 157             //3. Check if we should check the other side!
+ 158             double partDist = current.p.x() - p.x();
+ 159             if (partDist < 0) partDist = -1 * partDist;
+ 160             if (nearDist < 0) nearDist = -1 * nearDist;
+ 161             if (nearDist > partDist) {
+ 162                 if (p.x() > current.p.x()) nearest(current.left, p, currentNear, nearDist);
+ 163                 else nearest(current.right, p, currentNear, nearDist);
+ 164             }
+ 165         }
+ 166         else {    // dir is LEFTRIGHT
+ 167             if(p.y() > current.p.y()) {
+ 168                 currentNear = nearest(current.right, p, currentNear, nearDist);
r 169             }
r 170             else currentNear = nearest(current.left, p, currentNear, nearDist);
+ 172             //3. Check if we should check the other side!
+ 173             double partDist = current.p.y() - p.y();
+ 174             if (partDist < 0) partDist = -1 * partDist;
+ 175             if (nearDist < 0) nearDist = -1 * nearDist;
+ 176             if (nearDist > partDist) {
+ 177                 if (p.y() > current.p.y()) nearest(current.left, p, currentNear, nearDist);
+ 178                 else nearest(current.right, p, currentNear, nearDist);
+ 179             }
+ 180         }
+ 187         //add things to the global maxpq!
+ 188         kNearest(root, p, k);
+ 189         Stack<Point> ptstack = new Stack<>();
+ 190         for(PointDist pd : ptpq) {
+ 191             ptstack.push(pd.p());
+ 192         }
+ 193         return ptstack;
+ 194     }
+ 195 
+ 196     private void kNearest(Node current, Point p, int k) {
+ 197         if(current == null) return;
+ 198 
+ 199         //1. Check against the current point...  closer?
+ 200         ptpq.insert(new PointDist(current.p, current.p.dist(p)));
+ 201         if( ptpq.size() > k ) ptpq.delMax();
+ 202 
+ 203         //stopped walking here 11/18
+ 204 
+ 205         //2. Check which side the query point is on
+ 206         if(current.dir == Partition.Direction.DOWNUP) {
+ 207             if(p.x() > current.p.x()) {
+ 208                 kNearest(current.right, p, k);
+ 209             }
+ 210             else kNearest(current.left, p, k);
+ 211 
+ 212             //3. Check if we should check the other side!
+ 213             double partDist = current.p.x() - p.x();
+ 214             if (partDist < 0) partDist = -1 * partDist;
+ 215             if (nearDist < 0) nearDist = -1 * nearDist;
+ 216             if (nearDist > partDist) {
+ 217                 if (p.x() > current.p.x()) kNearest(current.left, p, k);
+ 218                 else kNearest(current.right, p, k);
+ 219             }
+ 220         }
+ 221         else {    // dir is LEFTRIGHT
+ 222             if(p.y() > current.p.y()) {
+ 223                 kNearest(current.right, p, k);
+ 224             }
+ 225             else kNearest(current.left, p,  k);
+ 226 
+ 227             //3. Check if we should check the other side!
+ 228             double partDist = current.p.y() - p.y();
+ 229             if (partDist < 0) partDist = -1 * partDist;
+ 230             if (nearDist < 0) nearDist = -1 * nearDist;
+ 231             if (nearDist > partDist) {
+ 232                 if (p.y() > current.p.y()) kNearest(current.left, p, k);
+ 233                 else kNearest(current.right, p, k);
+ 234             }
r 235         }
+ 237 
--[ 2022.11.21.13.03.35.629.0 ]--
UpdateTree (AD): 4 0
+ /.git/objects/3e/ec82059c43fd48c2c87acbb5d3146919181ac4
+ /.git/objects/7c/f2891237ab51abd3dcfe41128b939aa54ae3a2
+ /.git/objects/c2/259fdab2fede23add0f6b409611094fb0ae13a
+ /.git/objects/fc/e1363a394e590b51c742706992bebecae53b2b

--[ 2022.11.21.13.05.54.426.0 ]--
:/src/PSBruteForce.java
+ 84         
--[ 2022.11.21.13.05.54.639.0 ]--
r 84         if
--[ 2022.11.21.13.05.54.888.0 ]--
r 84         if()
--[ 2022.11.21.13.05.56.580.0 ]--
r 84         if(m)
--[ 2022.11.21.13.05.56.813.0 ]--
r 84         if(mi)
--[ 2022.11.21.13.05.58.124.0 ]--
r 84         if(min)
--[ 2022.11.21.13.05.58.618.0 ]--
r 84         if(minx)
--[ 2022.11.21.13.06.00.735.0 ]--
r 84         if(minx,)
--[ 2022.11.21.13.06.01.112.0 ]--
r 84         if(minx)
--[ 2022.11.21.13.06.01.323.0 ]--
r 84         if(min)
--[ 2022.11.21.13.06.01.451.0 ]--
r 84         if(mi)
--[ 2022.11.21.13.06.01.639.0 ]--
r 84         if(m)
--[ 2022.11.21.13.06.01.782.0 ]--
r 84         if()
--[ 2022.11.21.13.06.01.974.0 ]--
r 84         if
--[ 2022.11.21.13.06.02.167.0 ]--
r 84         i
--[ 2022.11.21.13.06.02.537.0 ]--
r 84         
--[ 2022.11.21.13.06.39.616.0 ]--
- 84
--[ 2022.11.21.13.07.36.940.0 ]--
+ 57         
--[ 2022.11.21.13.07.37.513.0 ]--
r 57         i
--[ 2022.11.21.13.07.37.642.0 ]--
r 57         if
--[ 2022.11.21.13.07.37.769.0 ]--
r 57         if()
--[ 2022.11.21.13.07.38.069.0 ]--
r 57         if(s)
--[ 2022.11.21.13.07.38.172.0 ]--
r 57         if(si)
--[ 2022.11.21.13.07.38.363.0 ]--
r 57         if(siz)
--[ 2022.11.21.13.07.38.722.0 ]--
r 57         if(size)
--[ 2022.11.21.13.07.38.937.0 ]--
r 57         if(size=)
--[ 2022.11.21.13.07.39.047.0 ]--
r 57         if(size==)
--[ 2022.11.21.13.07.40.132.0 ]--
r 57         if(size==1)
--[ 2022.11.21.13.07.40.933.0 ]--
r 57         if(size==1) 
--[ 2022.11.21.13.07.41.054.0 ]--
r 57         if(size==1) r
--[ 2022.11.21.13.07.42.259.0 ]--
r 57         if(size==1) re
--[ 2022.11.21.13.07.42.607.0 ]--
r 57         if(size==1) ret
--[ 2022.11.21.13.07.42.865.0 ]--
r 57         if(size==1) retu
--[ 2022.11.21.13.07.43.014.0 ]--
r 57         if(size==1) retur
--[ 2022.11.21.13.07.43.156.0 ]--
r 57         if(size==1) return
--[ 2022.11.21.13.07.43.283.0 ]--
r 57         if(size==1) return 
--[ 2022.11.21.13.07.43.687.0 ]--
r 57         if(size==1) return p
--[ 2022.11.21.13.07.45.069.0 ]--
r 57         if(size==1) return p;
--[ 2022.11.21.13.07.46.895.0 ]--
r 57         if(size==1) return p
--[ 2022.11.21.13.07.47.983.0 ]--
r 57         if(size==1) return 
--[ 2022.11.21.13.07.49.713.0 ]--
r 57         if(size==1) return
--[ 2022.11.21.13.07.50.966.0 ]--
r 57         if(size==1) return 
--[ 2022.11.21.13.07.52.028.0 ]--
r 57         if(size==1) return p
--[ 2022.11.21.13.07.52.223.0 ]--
r 57         if(size==1) return p;
--[ 2022.11.21.13.07.57.584.0 ]--
r 57         if(psize==1) return p;
--[ 2022.11.21.13.07.57.974.0 ]--
r 57         if(pksize==1) return p;
--[ 2022.11.21.13.08.00.947.0 ]--
r 57         if(psize==1) return p;
--[ 2022.11.21.13.08.01.154.0 ]--
r 57         if(size==1) return p;
--[ 2022.11.21.13.08.04.487.0 ]--
r 57         i
--[ 2022.11.21.13.08.04.565.0 ]--
r 57         
--[ 2022.11.21.13.08.04.719.0 ]--
- 57
--[ 2022.11.21.13.08.06.897.0 ]--
+ 61         
--[ 2022.11.21.13.08.07.930.0 ]--
r 61         if
--[ 2022.11.21.13.08.08.224.0 ]--
r 61         if()
--[ 2022.11.21.13.08.09.299.0 ]--
r 61         if(i)
--[ 2022.11.21.13.08.09.388.0 ]--
r 61         if(it)
--[ 2022.11.21.13.08.09.598.0 ]--
r 61         if(ite)
--[ 2022.11.21.13.08.09.711.0 ]--
r 61         if(iter)
--[ 2022.11.21.13.08.10.009.0 ]--
r 61         if(iter.)
--[ 2022.11.21.13.08.10.609.0 ]--
r 61         if(iter.si)
--[ 2022.11.21.13.08.10.701.0 ]--
r 61         if(iter.siz)
--[ 2022.11.21.13.08.10.910.0 ]--
r 61         if(iter.size)
--[ 2022.11.21.13.08.12.027.0 ]--
r 61         if(iter.size )
--[ 2022.11.21.13.08.12.284.0 ]--
r 61         if(iter.size =)
--[ 2022.11.21.13.08.12.709.0 ]--
r 61         if(iter.size ==)
--[ 2022.11.21.13.08.12.927.0 ]--
r 61         if(iter.size == )
--[ 2022.11.21.13.08.13.435.0 ]--
r 61         if(iter.size == 1)
--[ 2022.11.21.13.08.26.410.0 ]--
r 61         if(rbst.size == 1)
--[ 2022.11.21.13.08.28.857.0 ]--
r 61         if(rbst.size() == 1)
--[ 2022.11.21.13.08.30.654.0 ]--
r 61         if(rbst.size() == 1) 
--[ 2022.11.21.13.08.32.487.0 ]--
r 61         if(rbst.size() == 1) r
--[ 2022.11.21.13.08.33.630.0 ]--
r 61         if(rbst.size() == 1) re
--[ 2022.11.21.13.08.33.891.0 ]--
r 61         if(rbst.size() == 1) ret
--[ 2022.11.21.13.08.34.028.0 ]--
r 61         if(rbst.size() == 1) retu
--[ 2022.11.21.13.08.34.248.0 ]--
r 61         if(rbst.size() == 1) retur
--[ 2022.11.21.13.08.34.411.0 ]--
r 61         if(rbst.size() == 1) return
--[ 2022.11.21.13.08.34.740.0 ]--
r 61         if(rbst.size() == 1) returni
--[ 2022.11.21.13.08.34.790.0 ]--
r 61         if(rbst.size() == 1) returnin
--[ 2022.11.21.13.08.35.166.0 ]--
r 61         if(rbst.size() == 1) returni
--[ 2022.11.21.13.08.35.291.0 ]--
r 61         if(rbst.size() == 1) return
--[ 2022.11.21.13.08.35.537.0 ]--
r 61         if(rbst.size() == 1) return 
--[ 2022.11.21.13.08.58.558.0 ]--
r 61         
--[ 2022.11.21.13.09.22.153.0 ]--
r 63             i
--[ 2022.11.21.13.09.22.260.0 ]--
r 63             
--[ 2022.11.21.13.09.22.456.0 ]--
- 63
--[ 2022.11.21.13.09.24.116.0 ]--
r 67                 
--[ 2022.11.21.13.09.27.207.0 ]--
r 63             double distance = p.dist(i);
--[ 2022.11.21.13.09.28.631.0 ]--
r 64             if(idx == 0 || distance < nearDist) {
--[ 2022.11.21.13.09.30.133.0 ]--
r 65                 nearDist = distance;
--[ 2022.11.21.13.09.31.303.0 ]--
r 66                 currentNear = i;
--[ 2022.11.21.13.09.33.381.0 ]--
- 67
--[ 2022.11.21.13.09.33.572.0 ]--
r 66                 currentNear = i
--[ 2022.11.21.13.09.34.607.0 ]--
r 66                 currentNear = i;
--[ 2022.11.21.13.09.40.337.0 ]--
r 61 
--[ 2022.11.21.13.11.27.226.0 ]--
+ 83         
--[ 2022.11.21.13.11.27.230.0 ]--
UpdateTree (AD): 0 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.235.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.416.0 ]--
r 83         i
--[ 2022.11.21.13.11.27.418.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.424.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.432.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.436.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.534.0 ]--
r 83         if
--[ 2022.11.21.13.11.27.537.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.541.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.839.0 ]--
r 83         if()
--[ 2022.11.21.13.11.27.840.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.849.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.854.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.857.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.858.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.27.860.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.29.478.0 ]--
r 83         if(s)
--[ 2022.11.21.13.11.29.483.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.29.498.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.29.648.0 ]--
r 83         if(si)
--[ 2022.11.21.13.11.29.650.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.29.654.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.30.183.0 ]--
r 83         if(siz)
--[ 2022.11.21.13.11.30.185.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.30.187.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.30.749.0 ]--
r 83         if(size)
--[ 2022.11.21.13.11.30.752.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.30.755.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.31.820.0 ]--
r 83         if(siz)
--[ 2022.11.21.13.11.31.822.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.31.824.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.31.938.0 ]--
r 83         if(si)
--[ 2022.11.21.13.11.31.939.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.31.942.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.32.105.0 ]--
r 83         if(s)
--[ 2022.11.21.13.11.32.107.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.32.110.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.32.291.0 ]--
r 83         if()
--[ 2022.11.21.13.11.32.292.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.32.294.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.32.770.0 ]--
r 83         if(i)
--[ 2022.11.21.13.11.32.771.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.32.780.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.33.441.0 ]--
r 83         if(is)
--[ 2022.11.21.13.11.33.444.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.33.447.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.34.199.0 ]--
r 83         if(isE)
--[ 2022.11.21.13.11.34.202.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.34.208.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.34.960.0 ]--
r 83         if(isEmpty)
--[ 2022.11.21.13.11.34.962.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.34.974.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.34.993.0 ]--
r 83         if(isEmpty())
--[ 2022.11.21.13.11.34.995.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.35.000.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.35.916.0 ]--
r 83         if(isEmpty()=)
--[ 2022.11.21.13.11.35.917.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.35.920.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.36.035.0 ]--
r 83         if(isEmpty()==)
--[ 2022.11.21.13.11.36.037.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.36.041.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.36.495.0 ]--
r 83         if(isEmpty()==n)
--[ 2022.11.21.13.11.36.499.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.36.502.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.37.077.0 ]--
r 83         if(isEmpty()==nul)
--[ 2022.11.21.13.11.37.081.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.37.089.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.37.143.0 ]--
r 83         if(isEmpty()==null)
--[ 2022.11.21.13.11.37.145.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.37.148.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.38.025.0 ]--
r 83         if(isEmpty()==nul)
--[ 2022.11.21.13.11.38.027.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.38.031.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.38.153.0 ]--
r 83         if(isEmpty()==nu)
--[ 2022.11.21.13.11.38.154.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.38.157.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.38.284.0 ]--
r 83         if(isEmpty()==n)
--[ 2022.11.21.13.11.38.285.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.38.288.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.38.751.0 ]--
r 83         if(isEmpty()==)
--[ 2022.11.21.13.11.38.753.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.38.756.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.41.089.0 ]--
r 83         if(isEmpty()=)
--[ 2022.11.21.13.11.41.094.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.41.101.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.41.156.0 ]--
r 83         if(isEmpty())
--[ 2022.11.21.13.11.41.158.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.41.160.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.42.594.0 ]--
r 83         if(isEmpty()) 
--[ 2022.11.21.13.11.42.596.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.42.598.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.44.999.0 ]--
r 83         if(isEmpty()) r
--[ 2022.11.21.13.11.45.003.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.45.041.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.45.044.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.45.047.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.45.049.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.45.053.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.45.477.0 ]--
r 83         if(isEmpty()) re
--[ 2022.11.21.13.11.45.479.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.45.483.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.46.148.0 ]--
r 83         if(isEmpty()) ret
--[ 2022.11.21.13.11.46.150.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.46.153.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.46.407.0 ]--
r 83         if(isEmpty()) retu
--[ 2022.11.21.13.11.46.408.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.46.411.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.46.781.0 ]--
r 83         if(isEmpty()) retur
--[ 2022.11.21.13.11.46.784.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.46.791.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.47.006.0 ]--
r 83         if(isEmpty()) return
--[ 2022.11.21.13.11.47.008.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.47.013.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.48.256.0 ]--
r 83         if(isEmpty()) return 
--[ 2022.11.21.13.11.48.259.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.48.266.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.48.716.0 ]--
r 83         if(isEmpty()) return n
--[ 2022.11.21.13.11.48.718.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.48.720.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.48.723.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.48.919.0 ]--
r 83         if(isEmpty()) return nu
--[ 2022.11.21.13.11.48.921.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.48.923.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.49.111.0 ]--
r 83         if(isEmpty()) return nul
--[ 2022.11.21.13.11.49.114.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.49.116.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.49.244.0 ]--
r 83         if(isEmpty()) return null
--[ 2022.11.21.13.11.49.246.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.49.249.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.49.446.0 ]--
r 83         if(isEmpty()) return null;
--[ 2022.11.21.13.11.49.449.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.49.454.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.55.195.0 ]--
+ 88         
--[ 2022.11.21.13.11.55.198.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.55.204.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.55.316.0 ]--
+ 88                 if(isEmpty()) return null;
r 89 
--[ 2022.11.21.13.11.55.318.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.55.329.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.55.336.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.55.339.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.55.370.0 ]--
r 88         if(isEmpty()) return null;
--[ 2022.11.21.13.11.55.373.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.55.377.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.56.157.0 ]--
- 89
--[ 2022.11.21.13.11.56.159.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.11.56.162.0 ]--
UpdateTree (AD): 1 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22,_1_29_PM_[Default]/shelved.patch

--[ 2022.11.21.13.17.22.819.0 ]--
+ 43         
--[ 2022.11.21.13.17.22.827.0 ]--
UpdateTree (AD): 0 1
- /.idea/shelf/Uncommitted_changes_before_Update_at_11_11_22__1_29_PM__Default_.xml

--[ 2022.11.21.13.17.24.424.0 ]--
r 43         if
--[ 2022.11.21.13.17.24.568.0 ]--
r 43         if()
--[ 2022.11.21.13.17.25.034.0 ]--
r 43         if(p)
--[ 2022.11.21.13.17.27.870.0 ]--
r 43         if(p=)
--[ 2022.11.21.13.17.27.894.0 ]--
r 43         if(p==)
--[ 2022.11.21.13.17.28.613.0 ]--
r 43         if(p=)
--[ 2022.11.21.13.17.28.710.0 ]--
r 43         if(p)
--[ 2022.11.21.13.17.28.862.0 ]--
r 43         if()
--[ 2022.11.21.13.17.29.013.0 ]--
r 43         if
--[ 2022.11.21.13.17.29.168.0 ]--
r 43         i
--[ 2022.11.21.13.17.29.575.0 ]--
r 43         
--[ 2022.11.21.13.17.29.976.0 ]--
- 43
--[ 2022.11.21.13.23.17.106.0 ]--
+ 122         
--[ 2022.11.21.13.23.29.093.0 ]--
r 122         ;
--[ 2022.11.21.13.23.30.209.0 ]--
r 122         
--[ 2022.11.21.13.23.37.194.0 ]--
r 122         rbst = new RedBlackBST<>();
--[ 2022.11.21.13.23.50.523.0 ]--
r 122         RedBlackBST<Point, Value>rbst = new RedBlackBST<>();
--[ 2022.11.21.13.23.51.989.0 ]--
r 122         RedBlackBST<Point, Value> rbst = new RedBlackBST<>();
--[ 2022.11.21.13.23.53.320.0 ]--
r 122         RedBlackBST<Point, Value> rbs = new RedBlackBST<>();
--[ 2022.11.21.13.23.54.437.0 ]--
r 122         RedBlackBST<Point, Value> rb = new RedBlackBST<>();
--[ 2022.11.21.13.24.02.073.0 ]--
r 122         RedBlackBST<Point, I> rb = new RedBlackBST<>();
--[ 2022.11.21.13.24.02.378.0 ]--
r 122         RedBlackBST<Point, In> rb = new RedBlackBST<>();
--[ 2022.11.21.13.24.02.490.0 ]--
r 122         RedBlackBST<Point, Int> rb = new RedBlackBST<>();
--[ 2022.11.21.13.24.02.902.0 ]--
r 122         RedBlackBST<Point, Inte> rb = new RedBlackBST<>();
--[ 2022.11.21.13.24.03.714.0 ]--
r 122         RedBlackBST<Point, Integ> rb = new RedBlackBST<>();
--[ 2022.11.21.13.24.03.930.0 ]--
r 122         RedBlackBST<Point, Integer> rb = new RedBlackBST<>();
--[ 2022.11.21.13.24.07.317.0 ]--
+ 123         
--[ 2022.11.21.13.24.09.020.0 ]--
r 123         r
--[ 2022.11.21.13.24.09.211.0 ]--
r 123         rb
--[ 2022.11.21.13.24.09.403.0 ]--
r 123         rb.
--[ 2022.11.21.13.24.10.322.0 ]--
r 123         rb.p
--[ 2022.11.21.13.24.11.919.0 ]--
r 123         rb.put
--[ 2022.11.21.13.24.11.950.0 ]--
r 123         rb.put()
--[ 2022.11.21.13.24.11.961.0 ]--
r 123         rb.put();
--[ 2022.11.21.13.24.25.554.0 ]--
+ 123         
--[ 2022.11.21.13.24.26.675.0 ]--
r 123         n
--[ 2022.11.21.13.24.26.923.0 ]--
r 123         new
--[ 2022.11.21.13.24.27.088.0 ]--
r 123         new 
--[ 2022.11.21.13.24.27.586.0 ]--
r 123         new
--[ 2022.11.21.13.24.27.693.0 ]--
r 123         ne
--[ 2022.11.21.13.24.27.818.0 ]--
r 123         n
--[ 2022.11.21.13.24.27.951.0 ]--
r 123         
--[ 2022.11.21.13.24.29.298.0 ]--
r 123         Po
--[ 2022.11.21.13.24.29.398.0 ]--
r 123         Poi
--[ 2022.11.21.13.24.29.545.0 ]--
r 123         Poin
--[ 2022.11.21.13.24.29.650.0 ]--
r 123         Point
--[ 2022.11.21.13.24.30.962.0 ]--
r 123         Point 
--[ 2022.11.21.13.24.32.434.0 ]--
r 123         Point p
--[ 2022.11.21.13.24.32.987.0 ]--
r 123         Point p 
--[ 2022.11.21.13.24.33.077.0 ]--
r 123         Point p =
--[ 2022.11.21.13.24.33.176.0 ]--
r 123         Point p = 
--[ 2022.11.21.13.24.34.414.0 ]--
r 123         Point p = n
--[ 2022.11.21.13.24.34.483.0 ]--
r 123         Point p = ne
--[ 2022.11.21.13.24.34.582.0 ]--
r 123         Point p = new
--[ 2022.11.21.13.24.34.721.0 ]--
r 123         Point p = new 
--[ 2022.11.21.13.24.35.441.0 ]--
r 123         Point p = new P
--[ 2022.11.21.13.24.35.641.0 ]--
r 123         Point p = new P`
--[ 2022.11.21.13.24.36.327.0 ]--
r 123         Point p = new P 
--[ 2022.11.21.13.24.36.723.0 ]--
r 123         Point p = new P
--[ 2022.11.21.13.24.36.969.0 ]--
r 123         Point p = new 
--[ 2022.11.21.13.24.37.743.0 ]--
r 123         Point p = new P
--[ 2022.11.21.13.24.37.895.0 ]--
r 123         Point p = new Po
--[ 2022.11.21.13.24.37.945.0 ]--
r 123         Point p = new Poi
--[ 2022.11.21.13.24.38.171.0 ]--
r 123         Point p = new Point
--[ 2022.11.21.13.24.38.201.0 ]--
r 123         Point p = new Point()
--[ 2022.11.21.13.24.39.967.0 ]--
r 123         Point p = new Point();
--[ 2022.11.21.13.24.48.816.0 ]--
r 123         Point p = new Point(1);
--[ 2022.11.21.13.24.48.895.0 ]--
r 123         Point p = new Point(1.);
--[ 2022.11.21.13.24.49.128.0 ]--
r 123         Point p = new Point(1.0);
--[ 2022.11.21.13.24.50.292.0 ]--
r 123         Point p = new Point(1.0, );
--[ 2022.11.21.13.24.50.749.0 ]--
r 123         Point p = new Point(1.0, 2);
--[ 2022.11.21.13.24.50.868.0 ]--
r 123         Point p = new Point(1.0, 2.);
--[ 2022.11.21.13.24.51.180.0 ]--
r 123         Point p = new Point(1.0, 2.0);
--[ 2022.11.21.13.24.56.566.0 ]--
+ 123         Point p = new Point(1.0, 2.0);
--[ 2022.11.21.13.24.56.750.0 ]--
+ 123         Point p = new Point(1.0, 2.0);
--[ 2022.11.21.13.25.00.164.0 ]--
r 124         Point p = new Point(3.0, 2.0);
--[ 2022.11.21.13.25.02.957.0 ]--
r 124         Point p = new Point(2.0, 2.0);
--[ 2022.11.21.13.25.07.985.0 ]--
r 123         Point p = new Point(1.0, 1.0);
--[ 2022.11.21.13.25.10.455.0 ]--
r 125         Point p = new Point(1.0, .0);
--[ 2022.11.21.13.25.10.537.0 ]--
r 125         Point p = new Point(1.0, 3.0);
--[ 2022.11.21.13.25.13.048.0 ]--
r 125         Point p = new Point(.0, 3.0);
--[ 2022.11.21.13.25.13.119.0 ]--
r 125         Point p = new Point(3.0, 3.0);
--[ 2022.11.21.13.25.16.065.0 ]--
r 124         Point  = new Point(2.0, 2.0);
--[ 2022.11.21.13.25.17.004.0 ]--
r 124         Point t = new Point(2.0, 2.0);
--[ 2022.11.21.13.25.20.287.0 ]--
r 125         Point  = new Point(3.0, 3.0);
--[ 2022.11.21.13.25.20.404.0 ]--
r 125         Point q = new Point(3.0, 3.0);
--[ 2022.11.21.13.25.22.877.0 ]--
r 126         rb.put(p);
--[ 2022.11.21.13.25.25.732.0 ]--
+ 126         rb.put(p);
--[ 2022.11.21.13.25.25.856.0 ]--
+ 126         rb.put(p);
--[ 2022.11.21.13.25.28.040.0 ]--
r 127         rb.put();
--[ 2022.11.21.13.25.28.103.0 ]--
r 127         rb.put(t);
--[ 2022.11.21.13.25.31.756.0 ]--
r 128         rb.put(q);
--[ 2022.11.21.13.25.45.987.0 ]--
r 126         rb.put(p,);
--[ 2022.11.21.13.25.46.176.0 ]--
r 126         rb.put(p, );
--[ 2022.11.21.13.25.48.474.0 ]--
r 126         rb.put(p, 1);
--[ 2022.11.21.13.25.48.532.0 ]--
r 126         rb.put(p, 10);
--[ 2022.11.21.13.25.50.756.0 ]--
r 127         rb.put(t, );
--[ 2022.11.21.13.25.50.907.0 ]--
r 127         rb.put(t, 2);
--[ 2022.11.21.13.25.50.987.0 ]--
r 127         rb.put(t, 20);
--[ 2022.11.21.13.25.53.159.0 ]--
r 128         rb.put(q );
--[ 2022.11.21.13.25.53.524.0 ]--
r 128         rb.put(q);
--[ 2022.11.21.13.25.53.840.0 ]--
r 128         rb.put(q,);
--[ 2022.11.21.13.25.53.953.0 ]--
r 128         rb.put(q, );
--[ 2022.11.21.13.25.54.091.0 ]--
r 128         rb.put(q, 3);
--[ 2022.11.21.13.25.54.178.0 ]--
r 128         rb.put(q, 30);
--[ 2022.11.21.13.25.57.202.0 ]--
+ 129         
--[ 2022.11.21.13.26.01.234.0 ]--
r 129         S
--[ 2022.11.21.13.26.01.480.0 ]--
r 129         St
--[ 2022.11.21.13.26.01.646.0 ]--
r 129         Std
--[ 2022.11.21.13.26.02.101.0 ]--
r 129         Std.
--[ 2022.11.21.13.26.02.773.0 ]--
r 129         Std
--[ 2022.11.21.13.26.03.258.0 ]--
r 129         StdO
--[ 2022.11.21.13.26.03.805.0 ]--
r 129         StdOut
--[ 2022.11.21.13.26.04.301.0 ]--
r 129         StdOut.
--[ 2022.11.21.13.26.04.548.0 ]--
r 129         StdOut.p
--[ 2022.11.21.13.26.04.806.0 ]--
r 129         StdOut.pr
--[ 2022.11.21.13.26.05.065.0 ]--
r 129         StdOut.print
--[ 2022.11.21.13.26.05.083.0 ]--
r 129         StdOut.print()
--[ 2022.11.21.13.26.05.093.0 ]--
r 129         StdOut.print();
--[ 2022.11.21.13.26.06.764.0 ]--
r 129         StdOut.print(
--[ 2022.11.21.13.26.06.806.0 ]--
r 129         StdOut.print
--[ 2022.11.21.13.26.07.297.0 ]--
r 129         StdOut.printl
--[ 2022.11.21.13.26.07.528.0 ]--
r 129         StdOut.println
--[ 2022.11.21.13.26.08.451.0 ]--
r 129         StdOut.println()
--[ 2022.11.21.13.26.09.950.0 ]--
r 129         StdOut.println("")
--[ 2022.11.21.13.26.11.085.0 ]--
r 129         StdOut.println("\")
--[ 2022.11.21.13.26.12.363.0 ]--
r 129         StdOut.println("\)
--[ 2022.11.21.13.26.12.438.0 ]--
r 129         StdOut.println(")
--[ 2022.11.21.13.26.13.096.0 ]--
r 129         StdOut.println()
--[ 2022.11.21.13.26.15.586.0 ]--
r 129         StdOut.println(r)
--[ 2022.11.21.13.26.15.688.0 ]--
r 129         StdOut.println(rb)
--[ 2022.11.21.13.26.16.111.0 ]--
r 129         StdOut.println(rb.)
--[ 2022.11.21.13.26.16.524.0 ]--
r 129         StdOut.println(rb.k)
--[ 2022.11.21.13.26.16.728.0 ]--
r 129         StdOut.println(rb.key)
--[ 2022.11.21.13.26.16.833.0 ]--
r 129         StdOut.println(rb.keys)
--[ 2022.11.21.13.26.17.406.0 ]--
r 129         StdOut.println(rb.keys())
--[ 2022.11.21.13.26.18.393.0 ]--
r 129         StdOut.println(rb.keys());
--[ 2022.11.21.13.26.31.178.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class

--[ 2022.11.21.13.26.31.180.0 ]--
CompilationStatus (AEW): 0 8 0
[Ljava.lang.String;@1bf4d91d
--[ 2022.11.21.13.26.46.937.0 ]--
:/src/PSKDTree.java
r 211 //
r 212 //            //3. Check if we should check the other side!
r 213 //            double partDist = current.p.x() - p.x();
r 214 //            if (partDist < 0) partDist = -1 * partDist;
r 215 //            if (nearDist < 0) nearDist = -1 * nearDist;
r 216 //            if (nearDist > partDist) {
r 217 //                if (p.x() > current.p.x()) kNearest(current.left, p, k);
r 218 //                else kNearest(current.right, p, k);
r 219 //            }
r 220 //        }
r 221 //        else {    // dir is LEFTRIGHT
r 222 //            if(p.y() > current.p.y()) {
r 223 //                kNearest(current.right, p, k);
r 224 //            }
r 225 //            else kNearest(current.left, p,  k);
r 226 //
r 227 //            //3. Check if we should check the other side!
r 228 //            double partDist = current.p.y() - p.y();
r 229 //            if (partDist < 0) partDist = -1 * partDist;
r 230 //            if (nearDist < 0) nearDist = -1 * nearDist;
r 231 //            if (nearDist > partDist) {
r 232 //                if (p.y() > current.p.y()) kNearest(current.left, p, k);
r 233 //                else kNearest(current.right, p, k);
r 234 //            }
r 235 //        }
--[ 2022.11.21.13.26.46.941.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.946.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.949.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.951.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.953.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.955.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.958.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.960.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.962.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.963.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.965.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.967.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.968.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.46.974.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.26.53.153.0 ]--
UpdateTree (AD): 3 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.27.03.536.0 ]--
r 235 /        }
--[ 2022.11.21.13.27.03.540.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.545.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.547.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.550.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.552.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.554.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.556.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.558.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.560.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.563.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.566.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.567.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.570.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.574.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.640.0 ]--
r 235         }
--[ 2022.11.21.13.27.03.642.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.644.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.646.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.03.651.0 ]--
UpdateTree (AD): 4 4
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
- /out/production/P05_KDTrees/NearestNeighborVisualizer.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.21.354.0 ]--
UpdateTree (AD): 4 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class
+ /out/production/P05_KDTrees/NearestNeighborVisualizer.class

--[ 2022.11.21.13.27.21.357.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.27.52.273.0 ]--
:/src/PSBruteForce.java
+ 130         
--[ 2022.11.21.13.27.54.618.0 ]--
r 129         StdOut.println(rb.n());
--[ 2022.11.21.13.27.54.643.0 ]--
r 129         StdOut.println(rb.ne());
--[ 2022.11.21.13.27.54.793.0 ]--
r 129         StdOut.println(rb.nea());
--[ 2022.11.21.13.27.54.923.0 ]--
r 129         StdOut.println(rb.near());
--[ 2022.11.21.13.27.55.034.0 ]--
r 129         StdOut.println(rb.neare());
--[ 2022.11.21.13.27.55.217.0 ]--
r 129         StdOut.println(rb.neares());
--[ 2022.11.21.13.27.55.373.0 ]--
r 129         StdOut.println(rb.nearest());
--[ 2022.11.21.13.27.57.181.0 ]--
r 129         StdOut.println(rb.nearest(ne));
--[ 2022.11.21.13.27.57.265.0 ]--
r 129         StdOut.println(rb.nearest(new));
--[ 2022.11.21.13.27.57.377.0 ]--
r 129         StdOut.println(rb.nearest(new ));
--[ 2022.11.21.13.27.57.672.0 ]--
r 129         StdOut.println(rb.nearest(new P));
--[ 2022.11.21.13.27.58.037.0 ]--
r 129         StdOut.println(rb.nearest(new Po));
--[ 2022.11.21.13.27.58.095.0 ]--
r 129         StdOut.println(rb.nearest(new Poi));
--[ 2022.11.21.13.27.58.475.0 ]--
r 129         StdOut.println(rb.nearest(new Poin));
--[ 2022.11.21.13.27.58.596.0 ]--
r 129         StdOut.println(rb.nearest(new Point));
--[ 2022.11.21.13.27.59.036.0 ]--
r 129         StdOut.println(rb.nearest(new Point ));
--[ 2022.11.21.13.27.59.393.0 ]--
r 129         StdOut.println(rb.nearest(new Point ()));
--[ 2022.11.21.13.28.02.153.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.)));
--[ 2022.11.21.13.28.03.297.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.3)));
--[ 2022.11.21.13.28.03.475.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.3\)));
--[ 2022.11.21.13.28.03.578.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.3\\)));
--[ 2022.11.21.13.28.03.839.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.3\)));
--[ 2022.11.21.13.28.03.955.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.3)));
--[ 2022.11.21.13.28.04.082.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.)));
--[ 2022.11.21.13.28.04.966.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.0)));
--[ 2022.11.21.13.28.07.532.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.0,)));
--[ 2022.11.21.13.28.07.967.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.0,3)));
--[ 2022.11.21.13.28.08.496.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.0,)));
--[ 2022.11.21.13.28.09.313.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.0,4)));
--[ 2022.11.21.13.28.10.213.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.0,4.)));
--[ 2022.11.21.13.28.10.413.0 ]--
r 129         StdOut.println(rb.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.13.28.17.576.0 ]--
r 129         StdOut.println(rbnearest(new Point (4.0,4.0)));
--[ 2022.11.21.13.28.17.624.0 ]--
r 129         StdOut.println(rnearest(new Point (4.0,4.0)));
--[ 2022.11.21.13.28.17.802.0 ]--
r 129         StdOut.println(nearest(new Point (4.0,4.0)));
--[ 2022.11.21.13.28.34.557.0 ]--
+ 122         
--[ 2022.11.21.13.28.35.512.0 ]--
r 122         PSBruteForce<Value>
--[ 2022.11.21.13.28.37.306.0 ]--
r 122         PSBruteForce<Valu>
--[ 2022.11.21.13.28.37.454.0 ]--
r 122         PSBruteForce<Val>
--[ 2022.11.21.13.28.37.596.0 ]--
r 122         PSBruteForce<Va>
--[ 2022.11.21.13.28.37.734.0 ]--
r 122         PSBruteForce<V>
--[ 2022.11.21.13.28.37.907.0 ]--
r 122         PSBruteForce<>
--[ 2022.11.21.13.28.38.954.0 ]--
r 122         PSBruteForce<Inte>
--[ 2022.11.21.13.28.39.425.0 ]--
r 122         PSBruteForce<Integ>
--[ 2022.11.21.13.28.39.603.0 ]--
r 122         PSBruteForce<Intege>
--[ 2022.11.21.13.28.39.684.0 ]--
r 122         PSBruteForce<Integer>
--[ 2022.11.21.13.28.40.828.0 ]--
r 122         PSBruteForce<Integer> 
--[ 2022.11.21.13.28.42.378.0 ]--
r 122         PSBruteForce<Integer> b
--[ 2022.11.21.13.28.42.629.0 ]--
r 122         PSBruteForce<Integer> bf
--[ 2022.11.21.13.28.43.854.0 ]--
r 122         PSBruteForce<Integer> bf = 
--[ 2022.11.21.13.28.44.033.0 ]--
r 122         PSBruteForce<Integer> bf = n
--[ 2022.11.21.13.28.44.119.0 ]--
r 122         PSBruteForce<Integer> bf = ne
--[ 2022.11.21.13.28.44.187.0 ]--
r 122         PSBruteForce<Integer> bf = new
--[ 2022.11.21.13.28.44.406.0 ]--
r 122         PSBruteForce<Integer> bf = new 
--[ 2022.11.21.13.28.45.771.0 ]--
r 122         PSBruteForce<Integer> bf = new `    
--[ 2022.11.21.13.28.46.298.0 ]--
r 122         PSBruteForce<Integer> bf = new `   
--[ 2022.11.21.13.28.46.416.0 ]--
r 122         PSBruteForce<Integer> bf = new `  
--[ 2022.11.21.13.28.46.543.0 ]--
r 122         PSBruteForce<Integer> bf = new ` 
--[ 2022.11.21.13.28.46.649.0 ]--
r 122         PSBruteForce<Integer> bf = new `
--[ 2022.11.21.13.28.47.016.0 ]--
r 122         PSBruteForce<Integer> bf = new 
--[ 2022.11.21.13.28.47.814.0 ]--
r 122         PSBruteForce<Integer> bf = new P
--[ 2022.11.21.13.28.49.452.0 ]--
r 122         PSBruteForce<Integer> bf = new PSBruteForce
--[ 2022.11.21.13.28.49.530.0 ]--
r 122         PSBruteForce<Integer> bf = new PSBruteForce<>
--[ 2022.11.21.13.28.49.548.0 ]--
r 122         PSBruteForce<Integer> bf = new PSBruteForce<>()
--[ 2022.11.21.13.28.50.780.0 ]--
r 122         PSBruteForce<Integer> bf = new PSBruteForce<>();
--[ 2022.11.21.13.28.54.071.0 ]--
r 130         StdOut.println(bnearest(new Point (4.0,4.0)));
--[ 2022.11.21.13.28.54.300.0 ]--
r 130         StdOut.println(bfnearest(new Point (4.0,4.0)));
--[ 2022.11.21.13.28.54.446.0 ]--
r 130         StdOut.println(bf.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.13.29.00.451.0 ]--
r 131 
--[ 2022.11.21.13.29.02.660.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.29.10.564.0 ]--
r 130         StdOut.println(bf.nearest(new Point (.0,4.0)));
--[ 2022.11.21.13.29.10.704.0 ]--
r 130         StdOut.println(bf.nearest(new Point (3.0,4.0)));
--[ 2022.11.21.13.29.12.360.0 ]--
r 130         StdOut.println(bf.nearest(new Point (3.0,.0)));
--[ 2022.11.21.13.29.12.441.0 ]--
r 130         StdOut.println(bf.nearest(new Point (3.0,3.0)));
--[ 2022.11.21.13.29.16.453.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.29.40.080.0 ]--
+ 69             
--[ 2022.11.21.13.29.41.226.0 ]--
- 69
--[ 2022.11.21.13.29.43.565.0 ]--
+ 63             
--[ 2022.11.21.13.29.44.436.0 ]--
r 63             S
--[ 2022.11.21.13.29.44.584.0 ]--
r 63             St
--[ 2022.11.21.13.29.44.823.0 ]--
r 63             Std
--[ 2022.11.21.13.29.45.606.0 ]--
r 63             StdOut
--[ 2022.11.21.13.29.46.025.0 ]--
r 63             StdOut.
--[ 2022.11.21.13.29.46.218.0 ]--
r 63             StdOut.p
--[ 2022.11.21.13.29.46.941.0 ]--
r 63             StdOut.print
--[ 2022.11.21.13.29.46.960.0 ]--
r 63             StdOut.print()
--[ 2022.11.21.13.29.46.970.0 ]--
r 63             StdOut.print();
--[ 2022.11.21.13.29.48.246.0 ]--
r 63             StdOut.print
--[ 2022.11.21.13.29.48.746.0 ]--
r 63             StdOut.printl
--[ 2022.11.21.13.29.49.240.0 ]--
r 63             StdOut.println
--[ 2022.11.21.13.29.49.258.0 ]--
r 63             StdOut.println()
--[ 2022.11.21.13.29.49.268.0 ]--
r 63             StdOut.println();
--[ 2022.11.21.13.29.52.264.0 ]--
r 63             StdOut.println(i);
--[ 2022.11.21.13.29.57.074.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.30.03.740.0 ]--
r 63             StdOut.println("ii);
--[ 2022.11.21.13.30.03.936.0 ]--
r 63             StdOut.println("i"i);
--[ 2022.11.21.13.30.04.232.0 ]--
r 63             StdOut.println("i" i);
--[ 2022.11.21.13.30.04.508.0 ]--
r 63             StdOut.println("i" :i);
--[ 2022.11.21.13.30.05.120.0 ]--
r 63             StdOut.println("i" i);
--[ 2022.11.21.13.30.05.285.0 ]--
r 63             StdOut.println("i"i);
--[ 2022.11.21.13.30.05.388.0 ]--
r 63             StdOut.println("ii);
--[ 2022.11.21.13.30.05.859.0 ]--
r 63             StdOut.println("i:i);
--[ 2022.11.21.13.30.06.019.0 ]--
r 63             StdOut.println("i: i);
--[ 2022.11.21.13.30.06.433.0 ]--
r 63             StdOut.println("i: "i);
--[ 2022.11.21.13.30.06.705.0 ]--
r 63             StdOut.println("i: " i);
--[ 2022.11.21.13.30.06.978.0 ]--
r 63             StdOut.println("i: " +i);
--[ 2022.11.21.13.30.07.825.0 ]--
r 63             StdOut.println("i: " + i);
--[ 2022.11.21.13.30.12.155.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.30.23.304.0 ]--
- 63
--[ 2022.11.21.13.30.24.730.0 ]--
+ 61             StdOut.println("i: " + i);
--[ 2022.11.21.13.30.24.773.0 ]--
r 61         StdOut.println("i: " + i);
--[ 2022.11.21.13.30.27.950.0 ]--
r 61         StdOut.println(it);
--[ 2022.11.21.13.30.28.092.0 ]--
r 61         StdOut.println(ite);
--[ 2022.11.21.13.30.28.180.0 ]--
r 61         StdOut.println(iter);
--[ 2022.11.21.13.30.35.754.0 ]--
r 61         StdOut.println(ite);
--[ 2022.11.21.13.30.35.860.0 ]--
r 61         StdOut.println(it);
--[ 2022.11.21.13.30.36.010.0 ]--
r 61         StdOut.println(i);
--[ 2022.11.21.13.30.36.118.0 ]--
r 61         StdOut.println();
--[ 2022.11.21.13.30.36.890.0 ]--
r 61         StdOut.println(p);
--[ 2022.11.21.13.30.37.031.0 ]--
r 61         StdOut.println(po);
--[ 2022.11.21.13.30.37.057.0 ]--
r 61         StdOut.println(poi);
--[ 2022.11.21.13.30.37.220.0 ]--
r 61         StdOut.println(poin);
--[ 2022.11.21.13.30.37.329.0 ]--
r 61         StdOut.println(point);
--[ 2022.11.21.13.30.37.524.0 ]--
r 61         StdOut.println(points);
--[ 2022.11.21.13.30.38.168.0 ]--
r 61         StdOut.println(points`);
--[ 2022.11.21.13.30.39.248.0 ]--
r 61         StdOut.println(points);
--[ 2022.11.21.13.30.39.580.0 ]--
r 61         StdOut.println(points());
--[ 2022.11.21.13.30.44.196.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.30.54.062.0 ]--
r 61         StdOut.println(r);
--[ 2022.11.21.13.30.54.084.0 ]--
r 61         StdOut.println(re);
--[ 2022.11.21.13.30.54.480.0 ]--
r 61         StdOut.println(r);
--[ 2022.11.21.13.30.54.585.0 ]--
r 61         StdOut.println(rb);
--[ 2022.11.21.13.30.54.798.0 ]--
r 61         StdOut.println(rbs);
--[ 2022.11.21.13.30.54.967.0 ]--
r 61         StdOut.println(rbst);
--[ 2022.11.21.13.30.55.578.0 ]--
r 61         StdOut.println(rbst.);
--[ 2022.11.21.13.30.55.815.0 ]--
r 61         StdOut.println(rbst.j);
--[ 2022.11.21.13.30.56.186.0 ]--
r 61         StdOut.println(rbst.);
--[ 2022.11.21.13.30.56.473.0 ]--
r 61         StdOut.println(rbst.k);
--[ 2022.11.21.13.30.56.616.0 ]--
r 61         StdOut.println(rbst.ke);
--[ 2022.11.21.13.30.56.713.0 ]--
r 61         StdOut.println(rbst.keu);
--[ 2022.11.21.13.30.57.014.0 ]--
r 61         StdOut.println(rbst.keus);
--[ 2022.11.21.13.30.57.386.0 ]--
r 61         StdOut.println(rbst.keu);
--[ 2022.11.21.13.30.57.500.0 ]--
r 61         StdOut.println(rbst.ke);
--[ 2022.11.21.13.30.57.618.0 ]--
r 61         StdOut.println(rbst.k);
--[ 2022.11.21.13.30.58.706.0 ]--
r 61         StdOut.println(rbst.keys);
--[ 2022.11.21.13.30.59.456.0 ]--
r 61         StdOut.println(rbst.keys());
--[ 2022.11.21.13.31.03.532.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.32.25.324.0 ]--
r 128         b.put(p, 10);
--[ 2022.11.21.13.32.27.834.0 ]--
r 128         bf.put(p, 10);
--[ 2022.11.21.13.32.33.206.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.32.55.498.0 ]--
r 129         b.put(t, 20);
--[ 2022.11.21.13.32.55.546.0 ]--
r 129         bf.put(t, 20);
--[ 2022.11.21.13.32.56.821.0 ]--
r 130         r.put(q, 30);
--[ 2022.11.21.13.32.56.951.0 ]--
r 130         .put(q, 30);
--[ 2022.11.21.13.32.57.392.0 ]--
r 130         b.put(q, 30);
--[ 2022.11.21.13.32.57.539.0 ]--
r 130         bf.put(q, 30);
--[ 2022.11.21.13.33.05.843.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.33.11.673.0 ]--
r 131         StdOut.println(bf.nearest(new Point (3.0,.0)));
--[ 2022.11.21.13.33.11.749.0 ]--
r 131         StdOut.println(bf.nearest(new Point (3.0,4.0)));
--[ 2022.11.21.13.33.13.275.0 ]--
r 131         StdOut.println(bf.nearest(new Point (.0,4.0)));
--[ 2022.11.21.13.33.13.321.0 ]--
r 131         StdOut.println(bf.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.13.33.17.323.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.33.28.673.0 ]--
- 61
--[ 2022.11.21.13.33.30.260.0 ]--
+ 63             
--[ 2022.11.21.13.33.30.688.0 ]--
+ 63                     StdOut.println(rbst.keys());
r 64 
--[ 2022.11.21.13.33.30.728.0 ]--
r 63             StdOut.println(rbst.keys());
--[ 2022.11.21.13.33.34.449.0 ]--
r 63             StdOut.println(i);
--[ 2022.11.21.13.33.38.645.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.33.44.264.0 ]--
- 63
--[ 2022.11.21.13.34.12.391.0 ]--
:/src/PSKDTree.java
r 211 
r 212             //3. Check if we should check the other side!
r 213             double partDist = current.p.x() - p.x();
r 214             if (partDist < 0) partDist = -1 * partDist;
r 215             if (nearDist < 0) nearDist = -1 * nearDist;
r 216             if (nearDist > partDist) {
r 217                 if (p.x() > current.p.x()) kNearest(current.left, p, k);
r 218                 else kNearest(current.right, p, k);
r 219             }
r 220         }
r 221         else {    // dir is LEFTRIGHT
r 222             if(p.y() > current.p.y()) {
r 223                 kNearest(current.right, p, k);
r 224             }
r 225             else kNearest(current.left, p,  k);
r 226 
r 227             //3. Check if we should check the other side!
r 228             double partDist = current.p.y() - p.y();
r 229             if (partDist < 0) partDist = -1 * partDist;
r 230             if (nearDist < 0) nearDist = -1 * nearDist;
r 231             if (nearDist > partDist) {
r 232                 if (p.y() > current.p.y()) kNearest(current.left, p, k);
r 233                 else kNearest(current.right, p, k);
r 234             }
--[ 2022.11.21.13.38.29.829.0 ]--
- 214
r 214 =
--[ 2022.11.21.13.38.34.487.0 ]--
r 228 //            if (partDist < 0) partDist = -1 * partDist;
r 229 //            if (nearDist < 0) nearDist = -1 * nearDist;
--[ 2022.11.21.13.38.37.186.0 ]--
r 214 
--[ 2022.11.21.13.38.37.606.0 ]--
- 214
--[ 2022.11.21.13.40.42.099.0 ]--
UpdateTree (AD): 0 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class

--[ 2022.11.21.13.40.42.101.0 ]--
CompilationStatus (AEW): 0 2 0
[Ljava.lang.String;@36d6e7ab
--[ 2022.11.21.13.43.04.274.0 ]--
r 188         kNearest(root, p, k,);
--[ 2022.11.21.13.43.04.280.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.286.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.288.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.296.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.478.0 ]--
r 188         kNearest(root, p, k, );
--[ 2022.11.21.13.43.04.480.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.482.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.668.0 ]--
r 188         kNearest(root, p, k, r);
--[ 2022.11.21.13.43.04.670.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.673.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.677.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.680.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.770.0 ]--
r 188         kNearest(root, p, k, ro);
--[ 2022.11.21.13.43.04.772.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.775.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.877.0 ]--
r 188         kNearest(root, p, k, roo);
--[ 2022.11.21.13.43.04.879.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.04.881.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.05.855.0 ]--
r 188         kNearest(root, p, k, root);
--[ 2022.11.21.13.43.05.859.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.05.867.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.05.978.0 ]--
r 188         kNearest(root, p, k, root.);
--[ 2022.11.21.13.43.05.979.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.05.982.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.05.984.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.05.988.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.200.0 ]--
r 188         kNearest(root, p, k, root.d);
--[ 2022.11.21.13.43.06.201.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.204.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.308.0 ]--
r 188         kNearest(root, p, k, root.di);
--[ 2022.11.21.13.43.06.309.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.312.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.526.0 ]--
r 188         kNearest(root, p, k, root.dis);
--[ 2022.11.21.13.43.06.527.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.530.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.595.0 ]--
r 188         kNearest(root, p, k, root.dist);
--[ 2022.11.21.13.43.06.597.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.601.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.912.0 ]--
r 188         kNearest(root, p, k, root.dist.);
--[ 2022.11.21.13.43.06.914.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.917.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.06.921.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.07.219.0 ]--
r 188         kNearest(root, p, k, root.dist.p);
--[ 2022.11.21.13.43.07.224.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.07.229.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.08.381.0 ]--
r 188         kNearest(root, p, k, root.dist);
--[ 2022.11.21.13.43.08.382.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.08.384.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.08.387.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.08.537.0 ]--
r 188         kNearest(root, p, k, root.dis);
--[ 2022.11.21.13.43.08.538.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.08.541.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.08.707.0 ]--
r 188         kNearest(root, p, k, root.di);
--[ 2022.11.21.13.43.08.710.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.08.713.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.08.858.0 ]--
r 188         kNearest(root, p, k, root.d);
--[ 2022.11.21.13.43.08.860.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.08.862.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.09.024.0 ]--
r 188         kNearest(root, p, k, root.);
--[ 2022.11.21.13.43.09.027.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.09.030.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.09.567.0 ]--
r 188         kNearest(root, p, k, root.p);
--[ 2022.11.21.13.43.09.568.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.09.570.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.09.888.0 ]--
r 188         kNearest(root, p, k, root.p.);
--[ 2022.11.21.13.43.09.891.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.09.895.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.09.899.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.140.0 ]--
r 188         kNearest(root, p, k, root.p.d);
--[ 2022.11.21.13.43.10.143.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.148.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.250.0 ]--
r 188         kNearest(root, p, k, root.p.di);
--[ 2022.11.21.13.43.10.252.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.256.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.337.0 ]--
r 188         kNearest(root, p, k, root.p.dis);
--[ 2022.11.21.13.43.10.339.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.344.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.559.0 ]--
r 188         kNearest(root, p, k, root.p.dist);
--[ 2022.11.21.13.43.10.561.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.567.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.824.0 ]--
r 188         kNearest(root, p, k, root.p.dist());
--[ 2022.11.21.13.43.10.826.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.831.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.894.0 ]--
r 188         kNearest(root, p, k, root.p.dist(_));
--[ 2022.11.21.13.43.10.896.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.10.899.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.11.352.0 ]--
r 188         kNearest(root, p, k, root.p.dist());
--[ 2022.11.21.13.43.11.354.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.11.358.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.13.823.0 ]--
r 188         kNearest(root, p, k, root.p.dist(p));
--[ 2022.11.21.13.43.13.827.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.13.831.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.23.694.0 ]--
r 196     private void kNearest(Node current, Point p, int k,) {
--[ 2022.11.21.13.43.23.698.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.23.705.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.23.716.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.23.880.0 ]--
r 196     private void kNearest(Node current, Point p, int k, ) {
--[ 2022.11.21.13.43.23.882.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.23.886.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.047.0 ]--
r 196     private void kNearest(Node current, Point p, int k, d) {
--[ 2022.11.21.13.43.24.050.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.053.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.056.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.058.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.062.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.230.0 ]--
r 196     private void kNearest(Node current, Point p, int k, dou) {
--[ 2022.11.21.13.43.24.232.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.237.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.328.0 ]--
r 196     private void kNearest(Node current, Point p, int k, doub) {
--[ 2022.11.21.13.43.24.329.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.332.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.436.0 ]--
r 196     private void kNearest(Node current, Point p, int k, doubl) {
--[ 2022.11.21.13.43.24.437.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.440.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.644.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double) {
--[ 2022.11.21.13.43.24.646.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.649.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.688.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double ) {
--[ 2022.11.21.13.43.24.690.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.24.696.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.25.382.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double n) {
--[ 2022.11.21.13.43.25.384.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.25.389.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.25.391.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.25.392.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.25.396.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.091.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double ne) {
--[ 2022.11.21.13.43.26.093.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.096.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.226.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double nea) {
--[ 2022.11.21.13.43.26.228.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.230.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.330.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double near) {
--[ 2022.11.21.13.43.26.331.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.333.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.714.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double nearD) {
--[ 2022.11.21.13.43.26.716.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.719.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.903.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double nearDi) {
--[ 2022.11.21.13.43.26.905.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.26.908.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.27.079.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double nearDis) {
--[ 2022.11.21.13.43.27.081.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.27.084.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.27.240.0 ]--
r 196     private void kNearest(Node current, Point p, int k, double nearDist) {
--[ 2022.11.21.13.43.27.242.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.27.244.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.330.0 ]--
r 208                 kNearest(current.right, p, k,);
--[ 2022.11.21.13.43.31.334.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.339.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.341.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.346.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.656.0 ]--
r 208                 kNearest(current.right, p, k, );
--[ 2022.11.21.13.43.31.658.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.661.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.770.0 ]--
r 208                 kNearest(current.right, p, k, n);
--[ 2022.11.21.13.43.31.772.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.774.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.776.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.779.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.890.0 ]--
r 208                 kNearest(current.right, p, k, ne);
--[ 2022.11.21.13.43.31.891.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.31.894.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.32.132.0 ]--
r 208                 kNearest(current.right, p, k, nea);
--[ 2022.11.21.13.43.32.134.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.32.136.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.32.819.0 ]--
r 208                 kNearest(current.right, p, k, near);
--[ 2022.11.21.13.43.32.822.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.32.826.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.33.082.0 ]--
r 208                 kNearest(current.right, p, k, nearD);
--[ 2022.11.21.13.43.33.085.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.33.089.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.33.240.0 ]--
r 208                 kNearest(current.right, p, k, nearDi);
--[ 2022.11.21.13.43.33.242.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.33.245.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.33.341.0 ]--
r 208                 kNearest(current.right, p, k, nearDis);
--[ 2022.11.21.13.43.33.342.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.33.345.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.33.493.0 ]--
r 208                 kNearest(current.right, p, k, nearDist);
--[ 2022.11.21.13.43.33.494.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.33.497.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.039.0 ]--
r 210             else kNearest(current.left, p, k,);
--[ 2022.11.21.13.43.35.041.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.045.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.048.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.052.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.478.0 ]--
r 210             else kNearest(current.left, p, k, );
--[ 2022.11.21.13.43.35.480.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.482.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.790.0 ]--
r 210             else kNearest(current.left, p, k, n);
--[ 2022.11.21.13.43.35.793.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.797.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.801.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.806.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.936.0 ]--
r 210             else kNearest(current.left, p, k, ne);
--[ 2022.11.21.13.43.35.938.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.35.940.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.36.049.0 ]--
r 210             else kNearest(current.left, p, k, nea);
--[ 2022.11.21.13.43.36.051.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.36.053.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.36.234.0 ]--
r 210             else kNearest(current.left, p, k, near);
--[ 2022.11.21.13.43.36.237.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.36.242.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.36.861.0 ]--
r 210             else kNearest(current.left, p, k, nearD);
--[ 2022.11.21.13.43.36.865.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.36.873.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.36.975.0 ]--
r 210             else kNearest(current.left, p, k, nearDi);
--[ 2022.11.21.13.43.36.977.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.36.980.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.37.065.0 ]--
r 210             else kNearest(current.left, p, k, nearDis);
--[ 2022.11.21.13.43.37.067.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.37.070.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.37.207.0 ]--
r 210             else kNearest(current.left, p, k, nearDist);
--[ 2022.11.21.13.43.37.209.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.37.211.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.457.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k),;
--[ 2022.11.21.13.43.38.462.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.467.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.469.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.471.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.473.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.474.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.476.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.481.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.558.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k), ;
--[ 2022.11.21.13.43.38.560.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.38.562.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.035.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k), n;
--[ 2022.11.21.13.43.39.037.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.039.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.041.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.042.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.044.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.046.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.048.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.050.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.052.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.142.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k), ne;
--[ 2022.11.21.13.43.39.143.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.146.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.342.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k), nea;
--[ 2022.11.21.13.43.39.344.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.346.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.375.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k), near;
--[ 2022.11.21.13.43.39.377.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.39.379.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.003.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k), nea;
--[ 2022.11.21.13.43.40.005.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.007.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.131.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k), ne;
--[ 2022.11.21.13.43.40.132.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.135.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.287.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k), n;
--[ 2022.11.21.13.43.40.289.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.291.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.454.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k), ;
--[ 2022.11.21.13.43.40.455.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.457.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.459.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.461.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.464.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.466.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.469.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.471.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.473.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.590.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k),;
--[ 2022.11.21.13.43.40.592.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.597.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.728.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k);
--[ 2022.11.21.13.43.40.730.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.732.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.734.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.736.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.738.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.743.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.745.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.747.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.881.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k;
--[ 2022.11.21.13.43.40.882.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.40.885.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.431.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k,;
--[ 2022.11.21.13.43.41.432.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.434.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.436.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.439.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.587.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, ;
--[ 2022.11.21.13.43.41.589.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.592.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.713.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, n;
--[ 2022.11.21.13.43.41.715.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.718.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.720.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.722.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.725.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.853.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, ne;
--[ 2022.11.21.13.43.41.854.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.856.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.981.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, nea;
--[ 2022.11.21.13.43.41.983.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.41.985.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.067.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, near;
--[ 2022.11.21.13.43.42.068.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.071.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.346.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, nearD;
--[ 2022.11.21.13.43.42.350.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.354.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.472.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, nearDi;
--[ 2022.11.21.13.43.42.474.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.476.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.550.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, nearDis;
--[ 2022.11.21.13.43.42.552.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.554.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.673.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, nearDist;
--[ 2022.11.21.13.43.42.674.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.42.677.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.43.164.0 ]--
r 215                 if (p.x() > current.p.x()) kNearest(current.left, p, k, nearDist);
--[ 2022.11.21.13.43.43.165.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.43.167.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.44.885.0 ]--
r 216                 else kNearest(current.right, p, k,);
--[ 2022.11.21.13.43.44.887.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.44.890.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.44.892.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.44.894.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.210.0 ]--
r 216                 else kNearest(current.right, p, k, );
--[ 2022.11.21.13.43.45.213.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.217.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.299.0 ]--
r 216                 else kNearest(current.right, p, k, n);
--[ 2022.11.21.13.43.45.301.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.304.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.307.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.310.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.418.0 ]--
r 216                 else kNearest(current.right, p, k, ne);
--[ 2022.11.21.13.43.45.420.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.422.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.525.0 ]--
r 216                 else kNearest(current.right, p, k, nea);
--[ 2022.11.21.13.43.45.527.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.547.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.621.0 ]--
r 216                 else kNearest(current.right, p, k, near);
--[ 2022.11.21.13.43.45.623.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.626.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.880.0 ]--
r 216                 else kNearest(current.right, p, k, nearD);
--[ 2022.11.21.13.43.45.882.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.45.885.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.46.649.0 ]--
r 216                 else kNearest(current.right, p, k, nearDi);
--[ 2022.11.21.13.43.46.651.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.46.656.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.46.713.0 ]--
r 216                 else kNearest(current.right, p, k, nearDis);
--[ 2022.11.21.13.43.46.715.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.46.717.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.46.828.0 ]--
r 216                 else kNearest(current.right, p, k, nearDist);
--[ 2022.11.21.13.43.46.830.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.46.832.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.251.0 ]--
r 221                 kNearest(current.right, p, k,);
--[ 2022.11.21.13.43.50.254.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.259.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.261.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.266.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.489.0 ]--
r 221                 kNearest(current.right, p, k, );
--[ 2022.11.21.13.43.50.491.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.494.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.785.0 ]--
r 221                 kNearest(current.right, p, k, n);
--[ 2022.11.21.13.43.50.788.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.792.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.795.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.798.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.900.0 ]--
r 221                 kNearest(current.right, p, k, ne);
--[ 2022.11.21.13.43.50.903.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.50.905.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.51.090.0 ]--
r 221                 kNearest(current.right, p, k, nea);
--[ 2022.11.21.13.43.51.091.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.51.094.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.51.122.0 ]--
r 221                 kNearest(current.right, p, k, near);
--[ 2022.11.21.13.43.51.124.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.51.126.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.51.586.0 ]--
r 221                 kNearest(current.right, p, k, nearN);
--[ 2022.11.21.13.43.51.588.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.51.593.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.51.968.0 ]--
r 221                 kNearest(current.right, p, k, near);
--[ 2022.11.21.13.43.51.970.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.51.973.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.52.229.0 ]--
r 221                 kNearest(current.right, p, k, nearD);
--[ 2022.11.21.13.43.52.231.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.52.235.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.52.383.0 ]--
r 221                 kNearest(current.right, p, k, nearDi);
--[ 2022.11.21.13.43.52.385.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.52.387.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.52.476.0 ]--
r 221                 kNearest(current.right, p, k, nearDis);
--[ 2022.11.21.13.43.52.478.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.52.481.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.52.623.0 ]--
r 221                 kNearest(current.right, p, k, nearDist);
--[ 2022.11.21.13.43.52.625.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.52.628.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.54.650.0 ]--
r 223             else kNearest(current.left, p,k);
--[ 2022.11.21.13.43.54.654.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.54.658.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.54.938.0 ]--
r 223             else kNearest(current.left, p, k);
--[ 2022.11.21.13.43.54.942.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.54.946.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.164.0 ]--
r 223             else kNearest(current.left, p, k,);
--[ 2022.11.21.13.43.57.168.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.173.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.175.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.180.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.353.0 ]--
r 223             else kNearest(current.left, p, k, );
--[ 2022.11.21.13.43.57.354.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.357.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.488.0 ]--
r 223             else kNearest(current.left, p, k, n);
--[ 2022.11.21.13.43.57.490.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.493.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.495.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.497.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.576.0 ]--
r 223             else kNearest(current.left, p, k, ne);
--[ 2022.11.21.13.43.57.577.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.580.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.803.0 ]--
r 223             else kNearest(current.left, p, k, nea);
--[ 2022.11.21.13.43.57.805.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.807.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.822.0 ]--
r 223             else kNearest(current.left, p, k, near);
--[ 2022.11.21.13.43.57.823.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.57.826.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.58.161.0 ]--
r 223             else kNearest(current.left, p, k, nearD);
--[ 2022.11.21.13.43.58.163.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.58.167.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.58.275.0 ]--
r 223             else kNearest(current.left, p, k, nearDi);
--[ 2022.11.21.13.43.58.277.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.58.280.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.58.386.0 ]--
r 223             else kNearest(current.left, p, k, nearDis);
--[ 2022.11.21.13.43.58.388.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.58.391.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.58.514.0 ]--
r 223             else kNearest(current.left, p, k, nearDist);
--[ 2022.11.21.13.43.58.516.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.43.58.518.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.392.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k,);
--[ 2022.11.21.13.44.00.394.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.397.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.400.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.403.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.452.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, );
--[ 2022.11.21.13.44.00.454.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.456.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.748.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, N);
--[ 2022.11.21.13.44.00.752.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.756.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.760.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.764.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.966.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, Ne);
--[ 2022.11.21.13.44.00.967.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.00.970.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.261.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, N);
--[ 2022.11.21.13.44.01.263.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.265.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.439.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, );
--[ 2022.11.21.13.44.01.441.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.443.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.445.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.447.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.574.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, n);
--[ 2022.11.21.13.44.01.576.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.579.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.581.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.584.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.705.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, ne);
--[ 2022.11.21.13.44.01.707.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.709.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.791.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nea);
--[ 2022.11.21.13.44.01.792.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.795.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.869.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, near);
--[ 2022.11.21.13.44.01.871.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.01.873.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.02.155.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearD);
--[ 2022.11.21.13.44.02.157.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.02.161.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.02.235.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearDI);
--[ 2022.11.21.13.44.02.237.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.02.239.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.02.536.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearDIs);
--[ 2022.11.21.13.44.02.539.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.02.543.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.02.628.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearDIst);
--[ 2022.11.21.13.44.02.630.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.02.633.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.030.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearDIs);
--[ 2022.11.21.13.44.03.034.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.038.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.130.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearDI);
--[ 2022.11.21.13.44.03.132.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.135.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.279.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearD);
--[ 2022.11.21.13.44.03.280.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.283.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.660.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearDi);
--[ 2022.11.21.13.44.03.663.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.668.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.713.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearDis);
--[ 2022.11.21.13.44.03.714.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.717.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.834.0 ]--
r 230                 if (p.y() > current.p.y()) kNearest(current.left, p, k, nearDist);
--[ 2022.11.21.13.44.03.835.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.03.838.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.347.0 ]--
r 231                 else kNearest(current.right, p, k,);
--[ 2022.11.21.13.44.05.351.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.356.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.358.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.363.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.454.0 ]--
r 231                 else kNearest(current.right, p, k, );
--[ 2022.11.21.13.44.05.455.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.457.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.543.0 ]--
r 231                 else kNearest(current.right, p, k, n);
--[ 2022.11.21.13.44.05.545.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.547.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.549.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.551.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.645.0 ]--
r 231                 else kNearest(current.right, p, k, ne);
--[ 2022.11.21.13.44.05.647.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.650.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.867.0 ]--
r 231                 else kNearest(current.right, p, k, nea);
--[ 2022.11.21.13.44.05.868.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.870.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.889.0 ]--
r 231                 else kNearest(current.right, p, k, near);
--[ 2022.11.21.13.44.05.891.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.05.893.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.06.165.0 ]--
r 231                 else kNearest(current.right, p, k, nearD);
--[ 2022.11.21.13.44.06.167.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.06.170.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.06.309.0 ]--
r 231                 else kNearest(current.right, p, k, nearDi);
--[ 2022.11.21.13.44.06.311.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.06.313.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.06.376.0 ]--
r 231                 else kNearest(current.right, p, k, nearDis);
--[ 2022.11.21.13.44.06.378.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.06.380.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.06.488.0 ]--
r 231                 else kNearest(current.right, p, k, nearDist);
--[ 2022.11.21.13.44.06.489.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.44.06.492.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.28.920.0 ]--
+ 189         
--[ 2022.11.21.13.45.28.924.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.28.931.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.29.484.0 ]--
- 189
--[ 2022.11.21.13.45.29.485.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.29.487.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.30.824.0 ]--
+ 188         
--[ 2022.11.21.13.45.30.827.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.30.851.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.31.309.0 ]--
r 188         p
--[ 2022.11.21.13.45.31.310.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.31.312.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.31.314.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.31.316.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.31.318.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.31.448.0 ]--
r 188         pt
--[ 2022.11.21.13.45.31.449.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.31.451.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.32.002.0 ]--
r 188         ptp
--[ 2022.11.21.13.45.32.005.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.32.010.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.32.836.0 ]--
r 188         ptpq
--[ 2022.11.21.13.45.32.839.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.32.843.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.33.087.0 ]--
r 188         ptpq.
--[ 2022.11.21.13.45.33.090.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.33.095.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.33.100.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.33.104.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.34.546.0 ]--
r 188         ptpq.i
--[ 2022.11.21.13.45.34.548.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.34.551.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.34.554.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.34.557.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.34.855.0 ]--
r 188         ptpq.in
--[ 2022.11.21.13.45.34.858.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.34.863.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.35.122.0 ]--
r 188         ptpq.ins
--[ 2022.11.21.13.45.35.125.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.35.129.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.35.458.0 ]--
r 188         ptpq.inse
--[ 2022.11.21.13.45.35.462.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.35.467.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.35.606.0 ]--
r 188         ptpq.inser
--[ 2022.11.21.13.45.35.609.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.35.613.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.35.820.0 ]--
r 188         ptpq.insert
--[ 2022.11.21.13.45.35.823.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.35.827.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.36.463.0 ]--
r 188         ptpq.insert()
--[ 2022.11.21.13.45.36.466.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.36.471.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.39.522.0 ]--
r 188         ptpq.insert(r)
--[ 2022.11.21.13.45.39.525.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.39.532.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.39.547.0 ]--
r 188         ptpq.insert(ro)
--[ 2022.11.21.13.45.39.548.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.39.552.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.40.622.0 ]--
r 188         ptpq.insert(roo)
--[ 2022.11.21.13.45.40.625.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.40.629.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.41.011.0 ]--
r 188         ptpq.insert(root)
--[ 2022.11.21.13.45.41.014.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.41.018.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.43.126.0 ]--
r 188         ptpq.insert(root.)
--[ 2022.11.21.13.45.43.129.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.43.133.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.43.135.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.43.141.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.48.933.0 ]--
r 188         ptpq.insert(root)
--[ 2022.11.21.13.45.48.935.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.48.939.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.48.941.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.48.944.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.49.032.0 ]--
r 188         ptpq.insert(roo)
--[ 2022.11.21.13.45.49.034.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.49.036.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.49.187.0 ]--
r 188         ptpq.insert(ro)
--[ 2022.11.21.13.45.49.189.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.49.191.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.49.347.0 ]--
r 188         ptpq.insert(r)
--[ 2022.11.21.13.45.49.349.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.49.352.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.49.507.0 ]--
r 188         ptpq.insert()
--[ 2022.11.21.13.45.49.509.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.49.512.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.50.633.0 ]--
r 188         ptpq.insert(N)
--[ 2022.11.21.13.45.50.637.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.50.641.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.50.862.0 ]--
r 188         ptpq.insert(Ne)
--[ 2022.11.21.13.45.50.864.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.50.868.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.51.082.0 ]--
r 188         ptpq.insert(New)
--[ 2022.11.21.13.45.51.084.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.51.088.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.51.715.0 ]--
r 188         ptpq.insert(Ne)
--[ 2022.11.21.13.45.51.719.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.51.727.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.51.813.0 ]--
r 188         ptpq.insert(N)
--[ 2022.11.21.13.45.51.815.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.51.817.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.51.939.0 ]--
r 188         ptpq.insert()
--[ 2022.11.21.13.45.51.941.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.51.957.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.180.0 ]--
r 188         ptpq.insert(n)
--[ 2022.11.21.13.45.52.183.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.188.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.301.0 ]--
r 188         ptpq.insert(ne)
--[ 2022.11.21.13.45.52.302.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.306.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.354.0 ]--
r 188         ptpq.insert(new)
--[ 2022.11.21.13.45.52.356.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.358.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.661.0 ]--
r 188         ptpq.insert(new )
--[ 2022.11.21.13.45.52.663.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.665.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.830.0 ]--
r 188         ptpq.insert(new P)
--[ 2022.11.21.13.45.52.832.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.834.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.52.836.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.53.033.0 ]--
r 188         ptpq.insert(new Po)
--[ 2022.11.21.13.45.53.035.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.53.037.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.53.562.0 ]--
r 188         ptpq.insert(new Poi)
--[ 2022.11.21.13.45.53.564.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.53.567.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.53.649.0 ]--
r 188         ptpq.insert(new Poin)
--[ 2022.11.21.13.45.53.650.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.53.652.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.53.785.0 ]--
r 188         ptpq.insert(new Point)
--[ 2022.11.21.13.45.53.787.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.53.789.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.064.0 ]--
r 188         ptpq.insert(new PointD)
--[ 2022.11.21.13.45.54.066.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.068.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.237.0 ]--
r 188         ptpq.insert(new PointDi)
--[ 2022.11.21.13.45.54.238.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.240.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.376.0 ]--
r 188         ptpq.insert(new PointDis)
--[ 2022.11.21.13.45.54.378.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.380.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.544.0 ]--
r 188         ptpq.insert(new PointDist)
--[ 2022.11.21.13.45.54.546.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.549.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.895.0 ]--
r 188         ptpq.insert(new PointDist())
--[ 2022.11.21.13.45.54.898.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.54.901.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.142.0 ]--
r 188         ptpq.insert(new PointDist(r))
--[ 2022.11.21.13.45.55.144.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.147.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.206.0 ]--
r 188         ptpq.insert(new PointDist(ro))
--[ 2022.11.21.13.45.55.207.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.209.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.329.0 ]--
r 188         ptpq.insert(new PointDist(roo))
--[ 2022.11.21.13.45.55.331.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.333.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.467.0 ]--
r 188         ptpq.insert(new PointDist(root))
--[ 2022.11.21.13.45.55.468.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.471.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.572.0 ]--
r 188         ptpq.insert(new PointDist(root.))
--[ 2022.11.21.13.45.55.574.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.576.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.578.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.581.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.826.0 ]--
r 188         ptpq.insert(new PointDist(root.p))
--[ 2022.11.21.13.45.55.828.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.55.830.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.57.770.0 ]--
r 188         ptpq.insert(new PointDist(root.))
--[ 2022.11.21.13.45.57.772.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.57.776.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.57.934.0 ]--
r 188         ptpq.insert(new PointDist(root))
--[ 2022.11.21.13.45.57.936.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.57.938.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.57.940.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.57.943.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.58.074.0 ]--
r 188         ptpq.insert(new PointDist(roo))
--[ 2022.11.21.13.45.58.075.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.58.078.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.58.236.0 ]--
r 188         ptpq.insert(new PointDist(ro))
--[ 2022.11.21.13.45.58.239.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.58.242.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.58.395.0 ]--
r 188         ptpq.insert(new PointDist(r))
--[ 2022.11.21.13.45.58.398.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.58.400.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.58.644.0 ]--
r 188         ptpq.insert(new PointDist())
--[ 2022.11.21.13.45.58.646.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.45.58.649.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.00.349.0 ]--
r 188         ptpq.insert(new PointDist(p))
--[ 2022.11.21.13.46.00.352.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.00.360.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.00.631.0 ]--
r 188         ptpq.insert(new PointDist(p.))
--[ 2022.11.21.13.46.00.632.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.00.634.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.00.636.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.00.640.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.01.871.0 ]--
r 188         ptpq.insert(new PointDist(p.p))
--[ 2022.11.21.13.46.01.873.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.01.876.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.02.989.0 ]--
r 188         ptpq.insert(new PointDist(p.))
--[ 2022.11.21.13.46.02.990.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.02.993.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.03.666.0 ]--
r 188         ptpq.insert(new PointDist(p))
--[ 2022.11.21.13.46.03.668.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.03.672.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.03.675.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.03.679.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.25.584.0 ]--
r 188         ptpq.insert(new PointDist(rp))
--[ 2022.11.21.13.46.25.589.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.25.597.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.25.613.0 ]--
r 188         ptpq.insert(new PointDist(rop))
--[ 2022.11.21.13.46.25.615.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.25.617.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.25.748.0 ]--
r 188         ptpq.insert(new PointDist(roop))
--[ 2022.11.21.13.46.25.750.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.25.752.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.25.870.0 ]--
r 188         ptpq.insert(new PointDist(rootp))
--[ 2022.11.21.13.46.25.872.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.25.876.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.26.090.0 ]--
r 188         ptpq.insert(new PointDist(root.p))
--[ 2022.11.21.13.46.26.093.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.26.095.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.26.098.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.26.101.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.335.0 ]--
r 188         ptpq.insert(new PointDist(root.p,))
--[ 2022.11.21.13.46.27.338.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.342.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.344.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.353.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.381.0 ]--
r 188         ptpq.insert(new PointDist(root.p, ))
--[ 2022.11.21.13.46.27.382.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.384.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.672.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p))
--[ 2022.11.21.13.46.27.675.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.679.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.682.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.27.685.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.29.255.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p));
--[ 2022.11.21.13.46.29.256.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.29.259.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.38.120.0 ]--
r 188         ptpq.insert(new PointDist(root.p., p));
--[ 2022.11.21.13.46.38.124.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.38.128.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.38.133.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.38.558.0 ]--
r 188         ptpq.insert(new PointDist(root.p.d, p));
--[ 2022.11.21.13.46.38.560.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.38.562.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.38.630.0 ]--
r 188         ptpq.insert(new PointDist(root.p.di, p));
--[ 2022.11.21.13.46.38.631.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.38.634.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.39.072.0 ]--
r 188         ptpq.insert(new PointDist(root.p.dis, p));
--[ 2022.11.21.13.46.39.075.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.39.080.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.39.201.0 ]--
r 188         ptpq.insert(new PointDist(root.p.dist, p));
--[ 2022.11.21.13.46.39.203.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.39.206.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.39.743.0 ]--
r 188         ptpq.insert(new PointDist(root.p.dist(), p));
--[ 2022.11.21.13.46.39.745.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.39.749.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.40.158.0 ]--
r 188         ptpq.insert(new PointDist(root.p.dist(p), p));
--[ 2022.11.21.13.46.40.160.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.40.162.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.42.759.0 ]--
r 188         ptpq.insert(new PointDist(root.p.dist(p, p));
--[ 2022.11.21.13.46.42.762.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.42.766.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.42.769.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.42.856.0 ]--
r 188         ptpq.insert(new PointDist(root.p.dist(, p));
--[ 2022.11.21.13.46.42.858.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.42.860.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.42.862.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.009.0 ]--
r 188         ptpq.insert(new PointDist(root.p.dist, p));
--[ 2022.11.21.13.46.43.012.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.015.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.018.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.154.0 ]--
r 188         ptpq.insert(new PointDist(root.p.dis, p));
--[ 2022.11.21.13.46.43.156.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.159.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.297.0 ]--
r 188         ptpq.insert(new PointDist(root.p.di, p));
--[ 2022.11.21.13.46.43.299.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.302.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.434.0 ]--
r 188         ptpq.insert(new PointDist(root.p.d, p));
--[ 2022.11.21.13.46.43.436.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.439.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.572.0 ]--
r 188         ptpq.insert(new PointDist(root.p., p));
--[ 2022.11.21.13.46.43.574.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.576.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.708.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p));
--[ 2022.11.21.13.46.43.709.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.712.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.43.714.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.45.682.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p.));
--[ 2022.11.21.13.46.45.685.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.45.688.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.45.691.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.45.695.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.45.942.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p.d));
--[ 2022.11.21.13.46.45.945.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.45.948.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.46.026.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p.di));
--[ 2022.11.21.13.46.46.027.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.46.031.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.46.104.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p.dis));
--[ 2022.11.21.13.46.46.106.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.46.109.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.46.281.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p.dist));
--[ 2022.11.21.13.46.46.284.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.46.288.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.48.529.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p.dis));
--[ 2022.11.21.13.46.48.532.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.48.541.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.48.572.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p.di));
--[ 2022.11.21.13.46.48.574.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.48.576.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.48.753.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p.d));
--[ 2022.11.21.13.46.48.754.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.48.757.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.48.912.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p.));
--[ 2022.11.21.13.46.48.913.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.48.916.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.104.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p));
--[ 2022.11.21.13.46.49.106.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.108.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.110.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.112.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.238.0 ]--
r 188         ptpq.insert(new PointDist(root.p, ));
--[ 2022.11.21.13.46.49.239.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.243.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.245.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.248.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.610.0 ]--
r 188         ptpq.insert(new PointDist(root.p, r));
--[ 2022.11.21.13.46.49.612.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.615.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.617.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.619.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.875.0 ]--
r 188         ptpq.insert(new PointDist(root.p, ro));
--[ 2022.11.21.13.46.49.877.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.879.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.974.0 ]--
r 188         ptpq.insert(new PointDist(root.p, roo));
--[ 2022.11.21.13.46.49.976.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.49.978.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.200.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root));
--[ 2022.11.21.13.46.50.202.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.205.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.309.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.));
--[ 2022.11.21.13.46.50.311.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.313.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.315.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.317.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.563.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p));
--[ 2022.11.21.13.46.50.565.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.569.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.870.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.));
--[ 2022.11.21.13.46.50.874.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.878.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.50.882.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.51.145.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.d));
--[ 2022.11.21.13.46.51.147.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.51.149.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.51.237.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.di));
--[ 2022.11.21.13.46.51.239.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.51.241.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.51.414.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.dis));
--[ 2022.11.21.13.46.51.417.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.51.421.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.51.634.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.dist));
--[ 2022.11.21.13.46.51.637.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.51.641.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.52.046.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.dist()));
--[ 2022.11.21.13.46.52.050.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.52.054.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.52.463.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.dist(p)));
--[ 2022.11.21.13.46.52.465.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.46.52.467.0 ]--
UpdateTree (AD): 3 3
- /out/production/P05_KDTrees/PSKDTree$Node.class
- /out/production/P05_KDTrees/PSBruteForce.class
- /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.47.31.863.0 ]--
r 197     private void kNearest(Node current, Point p, int k) {
--[ 2022.11.21.13.47.35.760.0 ]--
r 189         kNearest(root, p, k);
--[ 2022.11.21.13.47.43.669.0 ]--
r 209                 kNearest(current.right, p, k);
--[ 2022.11.21.13.47.45.720.0 ]--
r 211             else kNearest(current.left, p, k);
--[ 2022.11.21.13.47.47.390.0 ]--
r 215             if (p > partDist) {
--[ 2022.11.21.13.47.47.641.0 ]--
r 215             if (pt > partDist) {
--[ 2022.11.21.13.47.47.966.0 ]--
r 215             if (ptp > partDist) {
--[ 2022.11.21.13.47.48.422.0 ]--
r 215             if (ptpq > partDist) {
--[ 2022.11.21.13.47.48.569.0 ]--
r 215             if (ptpq. > partDist) {
--[ 2022.11.21.13.47.48.803.0 ]--
r 215             if (ptpq.m > partDist) {
--[ 2022.11.21.13.47.48.950.0 ]--
r 215             if (ptpq.ma > partDist) {
--[ 2022.11.21.13.47.49.304.0 ]--
r 215             if (ptpq.max > partDist) {
--[ 2022.11.21.13.47.49.604.0 ]--
r 215             if (ptpq.max() > partDist) {
--[ 2022.11.21.13.47.56.391.0 ]--
r 215             if (ptpq.max(). > partDist) {
--[ 2022.11.21.13.47.56.965.0 ]--
r 215             if (ptpq.max().d > partDist) {
--[ 2022.11.21.13.47.58.177.0 ]--
r 215             if (ptpq.max().d() > partDist) {
--[ 2022.11.21.13.48.03.179.0 ]--
r 216                 if (p.x() > current.p.x()) kNearest(current.left, p, k);
--[ 2022.11.21.13.48.05.331.0 ]--
r 217                 else kNearest(current.right, p, k;
--[ 2022.11.21.13.48.11.724.0 ]--
r 222                 kNearest(current.right, p, k);
--[ 2022.11.21.13.48.14.255.0 ]--
r 224             else kNearest(current.left, p, k);
--[ 2022.11.21.13.48.16.171.0 ]--
r 230             if (ptpq.max().d() > partDist) {
--[ 2022.11.21.13.48.20.406.0 ]--
r 231                 if (p.y() > current.p.y()) kNearest(current.left, p, k);
--[ 2022.11.21.13.48.22.484.0 ]--
r 232                 else kNearest(current.right, p, k);
--[ 2022.11.21.13.48.31.847.0 ]--
r 217                 else kNearest(current.right, p, k);
--[ 2022.11.21.13.48.44.503.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.49.49.276.0 ]--
r 202         i( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.13.49.49.283.0 ]--
UpdateTree (AD): 3 0
+ /out/production/P05_KDTrees/PSKDTree.class
+ /out/production/P05_KDTrees/PSBruteForce.class
+ /out/production/P05_KDTrees/PSKDTree$Node.class

--[ 2022.11.21.13.49.49.311.0 ]--
r 202         ( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.13.49.49.489.0 ]--
r 202         w( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.13.49.49.620.0 ]--
r 202         wh( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.13.49.49.764.0 ]--
r 202         whi( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.13.49.49.791.0 ]--
r 202         whil( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.13.49.49.861.0 ]--
r 202         while( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.13.49.58.047.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.54.44.404.0 ]--
:/src/PSKDTree.java
- 203
--[ 2022.11.21.13.54.44.410.0 ]--
UpdateTree (AD): 8 0
+ /.git/objects/0c/55bcf14a37162c8cecdd8bb4226a147b847710
+ /.git/objects/42/2e8fe6a25b2cb1526a3b698f7bb6e4a6d6ab1f
+ /.git/objects/57/21445f69b8abeb3fa1b24eafb39b339a66c987
+ /.git/objects/77/c1c9e0460791004d21b231cb11397fa8405453
+ /.git/objects/b7/9e120aa750f1350aa5c9c92e567b92d1cb06ca
+ /.git/objects/c2/a99d32458bd15f0b79cff7dd46d99629763bed
+ /.git/objects/c6/82756a1eb42ff4805cdfc29c84fac9230c11e5
+ /.idea/shelf/Uncommitted_changes_before_Update_at_11_21_22,_1_52_PM_[Changes]/shelved.patch

--[ 2022.11.21.13.54.45.017.0 ]--
- 202
r 202         
--[ 2022.11.21.13.55.50.088.0 ]--
+ 200         
--[ 2022.11.21.13.55.50.780.0 ]--
r 200         i
--[ 2022.11.21.13.55.50.905.0 ]--
r 200         if
--[ 2022.11.21.13.55.51.617.0 ]--
r 200         if()
--[ 2022.11.21.13.55.53.692.0 ]--
r 200         if(p)
--[ 2022.11.21.13.55.53.752.0 ]--
r 200         if(pt)
--[ 2022.11.21.13.55.53.906.0 ]--
r 200         if(ptp)
--[ 2022.11.21.13.55.54.238.0 ]--
r 200         if(ptpq)
--[ 2022.11.21.13.55.54.540.0 ]--
r 200         if(ptpq.)
--[ 2022.11.21.13.55.54.932.0 ]--
r 200         if(ptpq.m)
--[ 2022.11.21.13.55.56.020.0 ]--
r 200         if(ptpq.ma)
--[ 2022.11.21.13.55.56.423.0 ]--
r 200         if(ptpq.max)
--[ 2022.11.21.13.55.56.940.0 ]--
r 200         if(ptpq.max())
--[ 2022.11.21.13.55.58.300.0 ]--
r 200         if(ptpq.max().)
--[ 2022.11.21.13.55.58.710.0 ]--
r 200         if(ptpq.max().d)
--[ 2022.11.21.13.55.59.179.0 ]--
r 200         if(ptpq.max().d )
--[ 2022.11.21.13.55.59.481.0 ]--
r 200         if(ptpq.max().d >)
--[ 2022.11.21.13.55.59.678.0 ]--
r 200         if(ptpq.max().d > )
--[ 2022.11.21.13.56.01.801.0 ]--
r 200         if(ptpq.max().d > c)
--[ 2022.11.21.13.56.01.911.0 ]--
r 200         if(ptpq.max().d > cu)
--[ 2022.11.21.13.56.02.083.0 ]--
r 200         if(ptpq.max().d > cur)
--[ 2022.11.21.13.56.02.221.0 ]--
r 200         if(ptpq.max().d > curr)
--[ 2022.11.21.13.56.02.396.0 ]--
r 200         if(ptpq.max().d > curre)
--[ 2022.11.21.13.56.02.538.0 ]--
r 200         if(ptpq.max().d > curren)
--[ 2022.11.21.13.56.02.648.0 ]--
r 200         if(ptpq.max().d > current)
--[ 2022.11.21.13.56.03.844.0 ]--
r 200         if(ptpq.max().d > current.)
--[ 2022.11.21.13.56.04.231.0 ]--
r 200         if(ptpq.max().d > current.p)
--[ 2022.11.21.13.56.04.649.0 ]--
r 200         if(ptpq.max().d > current.p.)
--[ 2022.11.21.13.56.05.169.0 ]--
r 200         if(ptpq.max().d > current.p.d)
--[ 2022.11.21.13.56.05.260.0 ]--
r 200         if(ptpq.max().d > current.p.di)
--[ 2022.11.21.13.56.05.366.0 ]--
r 200         if(ptpq.max().d > current.p.dis)
--[ 2022.11.21.13.56.05.507.0 ]--
r 200         if(ptpq.max().d > current.p.dist)
--[ 2022.11.21.13.56.06.244.0 ]--
r 200         if(ptpq.max().d > current.p.dist())
--[ 2022.11.21.13.56.07.122.0 ]--
r 200         if(ptpq.max().d > current.p.dist(p))
--[ 2022.11.21.13.56.12.190.0 ]--
r 201             ptpq.insert(new PointDist(current.p, current.p.dist(p)));
--[ 2022.11.21.13.56.34.325.0 ]--
r 200         if(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.21.004.0 ]--
r 203 
--[ 2022.11.21.13.57.21.867.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.13.57.39.227.0 ]--
r 200         if(pptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.39.369.0 ]--
r 200         if(ptptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.39.479.0 ]--
r 200         if(ptpptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.39.723.0 ]--
r 200         if(ptpqptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.41.115.0 ]--
r 200         if(ptpq.ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.41.909.0 ]--
r 200         if(ptpq.iptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.43.313.0 ]--
r 200         if(ptpq.isEmptyptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.43.325.0 ]--
r 200         if(ptpq.isEmpty.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.43.337.0 ]--
r 200         if(ptpq.isEmpty().max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.45.469.0 ]--
r 200         if(ptpq.isEmpty() .max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.47.316.0 ]--
r 200         if(ptpq.isEmpty() &.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.47.439.0 ]--
r 200         if(ptpq.isEmpty() &&.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.48.250.0 ]--
r 200         if(ptpq.isEmpty() && .max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.48.686.0 ]--
r 200         if(ptpq.isEmpty() && p.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.48.801.0 ]--
r 200         if(ptpq.isEmpty() && pt.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.48.908.0 ]--
r 200         if(ptpq.isEmpty() && ptp.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.49.107.0 ]--
r 200         if(ptpq.isEmpty() && ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.57.51.294.0 ]--
r 200         if(!ptpq.isEmpty() && ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.03.946.0 ]--
r 200         if(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.05.436.0 ]--
r 200         eif(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.05.574.0 ]--
r 200         elif(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.05.658.0 ]--
r 200         elsif(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.05.734.0 ]--
r 200         elseif(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.05.955.0 ]--
r 200         else if(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.07.209.0 ]--
r 200         \else if(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.07.840.0 ]--
r 200         else if(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.08.132.0 ]--
+ 200         
--[ 2022.11.21.13.58.09.200.0 ]--
r 200         i
--[ 2022.11.21.13.58.09.338.0 ]--
r 200         if
--[ 2022.11.21.13.58.09.738.0 ]--
r 200         if()
--[ 2022.11.21.13.58.10.304.0 ]--
r 200         if(!ptpq.isEmpty() && )
--[ 2022.11.21.13.58.11.590.0 ]--
r 200         if(!ptpq.isEmpty() &&)
--[ 2022.11.21.13.58.11.726.0 ]--
r 200         if(!ptpq.isEmpty() &)
--[ 2022.11.21.13.58.12.197.0 ]--
r 200         if(!ptpq.isEmpty() )
--[ 2022.11.21.13.58.12.350.0 ]--
r 200         if(!ptpq.isEmpty())
--[ 2022.11.21.13.58.14.017.0 ]--
r 200         if(ptpq.isEmpty())
--[ 2022.11.21.13.58.23.573.0 ]--
r 200         if()
--[ 2022.11.21.13.58.26.285.0 ]--
r 201         if(ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.27.782.0 ]--
r 201         if(ptpq.isEmpty()ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.28.631.0 ]--
r 201         if(ptpq.isEmpty() ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.29.915.0 ]--
r 201         if(ptpq.isEmpty() |ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.30.055.0 ]--
r 201         if(ptpq.isEmpty() ||ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.30.537.0 ]--
r 201         if(ptpq.isEmpty() || ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.30.826.0 ]--
r 201         if(ptpq.isEmpty() || (ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.58.32.877.0 ]--
r 201         if(ptpq.isEmpty() || (ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.13.58.35.000.0 ]--
- 200
--[ 2022.11.21.13.59.26.396.0 ]--
r 200         if(ptpq.isEmpty() || )
--[ 2022.11.21.13.59.30.960.0 ]--
r 200         if(ptpq.isEmpty() | )
--[ 2022.11.21.13.59.31.130.0 ]--
r 200         if(ptpq.isEmpty()  )
--[ 2022.11.21.13.59.31.537.0 ]--
r 200         if(ptpq.isEmpty() )
--[ 2022.11.21.13.59.32.393.0 ]--
r 200         if(ptpq.isEmpty())
--[ 2022.11.21.13.59.34.280.0 ]--
+ 202         
--[ 2022.11.21.13.59.34.655.0 ]--
r 202         e
--[ 2022.11.21.13.59.34.791.0 ]--
r 202         el
--[ 2022.11.21.13.59.34.902.0 ]--
r 202         els
--[ 2022.11.21.13.59.34.956.0 ]--
r 202         else
--[ 2022.11.21.13.59.35.295.0 ]--
r 202         else 
--[ 2022.11.21.13.59.35.478.0 ]--
r 202         else i
--[ 2022.11.21.13.59.35.549.0 ]--
r 202         else if
--[ 2022.11.21.13.59.36.453.0 ]--
r 202         else if 
--[ 2022.11.21.13.59.37.002.0 ]--
r 202         else if (ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.59.39.224.0 ]--
+ 203             
--[ 2022.11.21.13.59.39.375.0 ]--
r 203                 
--[ 2022.11.21.13.59.40.011.0 ]--
r 203             
--[ 2022.11.21.13.59.44.394.0 ]--
r 203             p
--[ 2022.11.21.13.59.44.504.0 ]--
r 203             pt
--[ 2022.11.21.13.59.44.579.0 ]--
r 203             ptp
--[ 2022.11.21.13.59.44.820.0 ]--
r 203             ptpq
--[ 2022.11.21.13.59.47.244.0 ]--
r 203             ptp
--[ 2022.11.21.13.59.47.368.0 ]--
r 203             pt
--[ 2022.11.21.13.59.47.483.0 ]--
r 203             p
--[ 2022.11.21.13.59.47.592.0 ]--
r 203             
--[ 2022.11.21.13.59.52.140.0 ]--
r 202         else if ((ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.13.59.53.762.0 ]--
r 202         else if ((ptpq.max().d() > current.p.dist(p) )
--[ 2022.11.21.13.59.59.922.0 ]--
r 202         else if ((ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.14.00.03.610.0 ]--
r 202         else if ((ptpq.max().d() > current.p.dist(p)
--[ 2022.11.21.14.00.05.191.0 ]--
r 202         else if (ptpq.max().d() > current.p.dist(p)
--[ 2022.11.21.14.00.09.867.0 ]--
r 202         else if (
--[ 2022.11.21.14.00.11.198.0 ]--
r 200         if(ptpq.isEmpty() )
--[ 2022.11.21.14.00.11.896.0 ]--
r 200         if(ptpq.isEmpty() |)
--[ 2022.11.21.14.00.12.042.0 ]--
r 200         if(ptpq.isEmpty() ||)
--[ 2022.11.21.14.00.12.224.0 ]--
r 200         if(ptpq.isEmpty() || )
--[ 2022.11.21.14.00.13.106.0 ]--
r 200         if(ptpq.isEmpty() || ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.14.00.14.917.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().d() > current.p.dist(p))
--[ 2022.11.21.14.00.16.649.0 ]--
- 202
--[ 2022.11.21.14.00.17.129.0 ]--
- 201
r 201             ptpq.insert(new PointDist(current.p, current.p.dist(p)));         
--[ 2022.11.21.14.00.22.512.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.00.41.708.0 ]--
r 201             ptpq.insert(new PointDist(current.p, current.p.dist(p)));
--[ 2022.11.21.14.00.42.601.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.01.31.987.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.04.06.756.0 ]--
+ 200         if(ptpq.isEmpty() || (
r 201                 ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.04.11.272.0 ]--
r 200         if(ptpq.isEmpty() || (p
--[ 2022.11.21.14.04.11.431.0 ]--
r 200         if(ptpq.isEmpty() || (pt
--[ 2022.11.21.14.04.11.537.0 ]--
r 200         if(ptpq.isEmpty() || (ptp
--[ 2022.11.21.14.04.12.012.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq
--[ 2022.11.21.14.04.12.716.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.
--[ 2022.11.21.14.04.13.112.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.m
--[ 2022.11.21.14.04.13.358.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.ma
--[ 2022.11.21.14.04.13.881.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max
--[ 2022.11.21.14.04.14.557.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max()
--[ 2022.11.21.14.04.15.227.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().
--[ 2022.11.21.14.04.15.444.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().c
--[ 2022.11.21.14.04.15.533.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().co
--[ 2022.11.21.14.04.15.763.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().com
--[ 2022.11.21.14.04.16.050.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo
--[ 2022.11.21.14.04.16.062.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo()
--[ 2022.11.21.14.04.22.895.0 ]--
r 198     
--[ 2022.11.21.14.04.23.730.0 ]--
r 198         
--[ 2022.11.21.14.04.30.147.0 ]--
r 198         P
--[ 2022.11.21.14.04.30.392.0 ]--
r 198         Po
--[ 2022.11.21.14.04.30.459.0 ]--
r 198         Poi
--[ 2022.11.21.14.04.30.680.0 ]--
r 198         Poin
--[ 2022.11.21.14.04.30.784.0 ]--
r 198         Point
--[ 2022.11.21.14.04.31.144.0 ]--
r 198         PointD
--[ 2022.11.21.14.04.31.655.0 ]--
r 198         PointDist
--[ 2022.11.21.14.04.32.139.0 ]--
r 198         PointDist 
--[ 2022.11.21.14.04.32.289.0 ]--
r 198         PointDist t
--[ 2022.11.21.14.04.32.394.0 ]--
r 198         PointDist to
--[ 2022.11.21.14.04.32.484.0 ]--
r 198         PointDist to 
--[ 2022.11.21.14.04.32.638.0 ]--
r 198         PointDist to a
--[ 2022.11.21.14.04.33.003.0 ]--
r 198         PointDist to 
--[ 2022.11.21.14.04.33.110.0 ]--
r 198         PointDist to
--[ 2022.11.21.14.04.33.482.0 ]--
r 198         PointDist toA
--[ 2022.11.21.14.04.33.654.0 ]--
r 198         PointDist toAd
--[ 2022.11.21.14.04.33.786.0 ]--
r 198         PointDist toAdd
--[ 2022.11.21.14.04.34.583.0 ]--
r 198         PointDist toAdd 
--[ 2022.11.21.14.04.34.671.0 ]--
r 198         PointDist toAdd =
--[ 2022.11.21.14.04.34.794.0 ]--
r 198         PointDist toAdd = 
--[ 2022.11.21.14.04.35.241.0 ]--
r 198         PointDist toAdd = n
--[ 2022.11.21.14.04.35.632.0 ]--
r 198         PointDist toAdd = ne
--[ 2022.11.21.14.04.35.676.0 ]--
r 198         PointDist toAdd = new
--[ 2022.11.21.14.04.36.682.0 ]--
r 198         PointDist toAdd = new 
--[ 2022.11.21.14.04.37.003.0 ]--
r 198         PointDist toAdd = new P
--[ 2022.11.21.14.04.37.242.0 ]--
r 198         PointDist toAdd = new Po
--[ 2022.11.21.14.04.37.332.0 ]--
r 198         PointDist toAdd = new Poi
--[ 2022.11.21.14.04.37.535.0 ]--
r 198         PointDist toAdd = new PointDist
--[ 2022.11.21.14.04.37.547.0 ]--
r 198         PointDist toAdd = new PointDist()
--[ 2022.11.21.14.04.38.470.0 ]--
r 198         PointDist toAdd = new PointDist(())
--[ 2022.11.21.14.04.38.850.0 ]--
r 198         PointDist toAdd = new PointDist((c))
--[ 2022.11.21.14.04.38.935.0 ]--
r 198         PointDist toAdd = new PointDist((cu))
--[ 2022.11.21.14.04.39.110.0 ]--
r 198         PointDist toAdd = new PointDist((cur))
--[ 2022.11.21.14.04.39.217.0 ]--
r 198         PointDist toAdd = new PointDist((curr))
--[ 2022.11.21.14.04.39.364.0 ]--
r 198         PointDist toAdd = new PointDist((curre))
--[ 2022.11.21.14.04.39.453.0 ]--
r 198         PointDist toAdd = new PointDist((curren))
--[ 2022.11.21.14.04.39.562.0 ]--
r 198         PointDist toAdd = new PointDist((current))
--[ 2022.11.21.14.04.39.779.0 ]--
r 198         PointDist toAdd = new PointDist((current.))
--[ 2022.11.21.14.04.39.991.0 ]--
r 198         PointDist toAdd = new PointDist((current.p))
--[ 2022.11.21.14.04.41.719.0 ]--
r 198         PointDist toAdd = new PointDist((current.p),)
--[ 2022.11.21.14.04.41.996.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), )
--[ 2022.11.21.14.04.42.176.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), c)
--[ 2022.11.21.14.04.42.268.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), cu)
--[ 2022.11.21.14.04.42.425.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), cur)
--[ 2022.11.21.14.04.42.538.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), curr)
--[ 2022.11.21.14.04.42.655.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), curre)
--[ 2022.11.21.14.04.42.763.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), curren)
--[ 2022.11.21.14.04.42.922.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current)
--[ 2022.11.21.14.04.43.039.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.)
--[ 2022.11.21.14.04.43.281.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.p)
--[ 2022.11.21.14.04.43.818.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.p.)
--[ 2022.11.21.14.04.44.501.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.p.d)
--[ 2022.11.21.14.04.44.713.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.p.di)
--[ 2022.11.21.14.04.44.816.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.p.dis)
--[ 2022.11.21.14.04.44.966.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.p.dist)
--[ 2022.11.21.14.04.45.772.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.p.dist())
--[ 2022.11.21.14.04.47.378.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.p.dist(p))
--[ 2022.11.21.14.04.49.347.0 ]--
r 198         PointDist toAdd = new PointDist((current.p), current.p.dist(p));
--[ 2022.11.21.14.04.51.114.0 ]--
r 198         PointDist toAdd = new PointDist(current.p), current.p.dist(p));
--[ 2022.11.21.14.04.53.255.0 ]--
r 198         PointDist toAdd = new PointDist(current.p, current.p.dist(p));
--[ 2022.11.21.14.04.58.670.0 ]--
r 202             ptpq.insert(t);
--[ 2022.11.21.14.04.58.753.0 ]--
r 202             ptpq.insert(to);
--[ 2022.11.21.14.04.59.203.0 ]--
r 202             ptpq.insert(toA);
--[ 2022.11.21.14.04.59.390.0 ]--
r 202             ptpq.insert(toAd);
--[ 2022.11.21.14.04.59.514.0 ]--
r 202             ptpq.insert(toAdd);
--[ 2022.11.21.14.05.05.839.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(t)
--[ 2022.11.21.14.05.05.945.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(to)
--[ 2022.11.21.14.05.06.234.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(toA)
--[ 2022.11.21.14.05.06.419.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAd)
--[ 2022.11.21.14.05.06.556.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAdd)
--[ 2022.11.21.14.05.10.235.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAdd) 
--[ 2022.11.21.14.05.12.200.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAdd) >
--[ 2022.11.21.14.05.12.935.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAdd) > 
--[ 2022.11.21.14.05.13.106.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAdd) > 0
--[ 2022.11.21.14.05.14.191.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAdd) > 0)
--[ 2022.11.21.14.05.16.704.0 ]--
- 201
--[ 2022.11.21.14.05.17.794.0 ]--
+ 201                 ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.05.19.144.0 ]--
r 201 //                ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.05.21.783.0 ]--
r 201 //               i ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.05.21.861.0 ]--
r 201 //               if ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.05.23.274.0 ]--
r 201 //               if  ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.05.23.404.0 ]--
r 201 //               if ( ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.05.24.255.0 ]--
r 201 //               if (ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.05.26.473.0 ]--
r 201 //               if(ptpq.max().d() > current.p.dist(p)))
--[ 2022.11.21.14.05.35.742.0 ]--
r 200         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAdd) > 0))
--[ 2022.11.21.14.05.57.886.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.06.03.259.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.07.15.420.0 ]--
+ 200         
--[ 2022.11.21.14.07.17.599.0 ]--
r 200         i
--[ 2022.11.21.14.07.17.749.0 ]--
r 200         if
--[ 2022.11.21.14.07.18.636.0 ]--
r 200         if()
--[ 2022.11.21.14.07.19.195.0 ]--
r 200         if(p)
--[ 2022.11.21.14.07.19.303.0 ]--
r 200         if(pt)
--[ 2022.11.21.14.07.19.390.0 ]--
r 200         if(ptp)
--[ 2022.11.21.14.07.20.065.0 ]--
r 200         if(ptpz)
--[ 2022.11.21.14.07.20.665.0 ]--
r 200         if(ptp)
--[ 2022.11.21.14.07.20.795.0 ]--
r 200         if(ptpq)
--[ 2022.11.21.14.07.21.061.0 ]--
r 200         if(ptpq.)
--[ 2022.11.21.14.07.21.326.0 ]--
r 200         if(ptpq.s)
--[ 2022.11.21.14.07.21.406.0 ]--
r 200         if(ptpq.si)
--[ 2022.11.21.14.07.21.991.0 ]--
r 200         if(ptpq.siz)
--[ 2022.11.21.14.07.22.108.0 ]--
r 200         if(ptpq.size)
--[ 2022.11.21.14.07.22.591.0 ]--
r 200         if(ptpq.size())
--[ 2022.11.21.14.07.23.002.0 ]--
r 200         if(ptpq.size() )
--[ 2022.11.21.14.07.23.719.0 ]--
r 200         if(ptpq.size() >)
--[ 2022.11.21.14.07.24.045.0 ]--
r 200         if(ptpq.size() > )
--[ 2022.11.21.14.07.25.021.0 ]--
r 200         if(ptpq.size() > k)
--[ 2022.11.21.14.07.26.574.0 ]--
r 200         if(ptpq.size() > k) 
--[ 2022.11.21.14.07.26.912.0 ]--
r 200         if(ptpq.size() > k) p
--[ 2022.11.21.14.07.27.030.0 ]--
r 200         if(ptpq.size() > k) pt
--[ 2022.11.21.14.07.27.139.0 ]--
r 200         if(ptpq.size() > k) ptp
--[ 2022.11.21.14.07.27.388.0 ]--
r 200         if(ptpq.size() > k) ptpq
--[ 2022.11.21.14.07.27.742.0 ]--
r 200         if(ptpq.size() > k) ptpq.
--[ 2022.11.21.14.07.27.918.0 ]--
r 200         if(ptpq.size() > k) ptpq.d
--[ 2022.11.21.14.07.28.124.0 ]--
r 200         if(ptpq.size() > k) ptpq.de
--[ 2022.11.21.14.07.28.201.0 ]--
r 200         if(ptpq.size() > k) ptpq.del
--[ 2022.11.21.14.07.28.569.0 ]--
r 200         if(ptpq.size() > k) ptpq.delM
--[ 2022.11.21.14.07.28.926.0 ]--
r 200         if(ptpq.size() > k) ptpq.delMa
--[ 2022.11.21.14.07.29.308.0 ]--
r 200         if(ptpq.size() > k) ptpq.delMax
--[ 2022.11.21.14.07.29.970.0 ]--
r 200         if(ptpq.size() > k) ptpq.delMax()
--[ 2022.11.21.14.07.31.036.0 ]--
r 200         if(ptpq.size() > k) ptpq.delMax();
--[ 2022.11.21.14.07.41.261.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.08.18.375.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.08.32.883.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.08.55.834.0 ]--
r 200         i(ptpq.size() > k) ptpq.delMax();
--[ 2022.11.21.14.08.55.981.0 ]--
r 200         (ptpq.size() > k) ptpq.delMax();
--[ 2022.11.21.14.08.57.137.0 ]--
r 200         w(ptpq.size() > k) ptpq.delMax();
--[ 2022.11.21.14.08.57.269.0 ]--
r 200         wh(ptpq.size() > k) ptpq.delMax();
--[ 2022.11.21.14.08.57.280.0 ]--
r 200         whi(ptpq.size() > k) ptpq.delMax();
--[ 2022.11.21.14.08.57.381.0 ]--
r 200         whil(ptpq.size() > k) ptpq.delMax();
--[ 2022.11.21.14.08.57.519.0 ]--
r 200         while(ptpq.size() > k) ptpq.delMax();
--[ 2022.11.21.14.08.57.811.0 ]--
r 200         while (ptpq.size() > k) ptpq.delMax();
--[ 2022.11.21.14.09.01.962.0 ]--
r 204         /while( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.14.09.02.142.0 ]--
r 204         //while( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.14.09.08.770.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.09.19.081.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.10.01.893.0 ]--
r 201         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAdd) > 0)) 
--[ 2022.11.21.14.10.02.404.0 ]--
r 201         if(ptpq.isEmpty() || (ptpq.max().compareTo(toAdd) > 0)) {
--[ 2022.11.21.14.10.04.115.0 ]--
+ 204             
--[ 2022.11.21.14.10.04.488.0 ]--
r 204             }
--[ 2022.11.21.14.10.04.517.0 ]--
r 204         }
--[ 2022.11.21.14.10.07.147.0 ]--
- 200
--[ 2022.11.21.14.10.08.958.0 ]--
r 204         /while( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.14.10.09.118.0 ]--
r 204         while( ptpq.size() > k ) ptpq.delMax();
--[ 2022.11.21.14.10.11.465.0 ]--
r 204         while( ptpq.size() > k ) {ptpq.delMax();
--[ 2022.11.21.14.10.11.721.0 ]--
+ 204         while( ptpq.size() > k ) {
+ 205 ptpq.delMax();
r 206 }
--[ 2022.11.21.14.10.11.753.0 ]--
r 205             ptpq.delMax();
r 206         }
--[ 2022.11.21.14.10.28.725.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.11.06.371.0 ]--
:/src/NearestNeighborVisualizer.java
r 39         int k = 1;
--[ 2022.11.21.14.11.06.492.0 ]--
r 39         int k = ;
--[ 2022.11.21.14.11.07.120.0 ]--
r 39         int k = 4;
--[ 2022.11.21.14.11.10.632.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.12.55.724.0 ]--
:/src/PSKDTree.java
+ 212                 
--[ 2022.11.21.14.12.57.642.0 ]--
r 212                 k
--[ 2022.11.21.14.12.58.008.0 ]--
r 212                 kN
--[ 2022.11.21.14.12.58.406.0 ]--
r 212                 kNe
--[ 2022.11.21.14.12.58.548.0 ]--
r 212                 kNea
--[ 2022.11.21.14.12.58.626.0 ]--
r 212                 kNear
--[ 2022.11.21.14.12.58.778.0 ]--
r 212                 kNeare
--[ 2022.11.21.14.12.59.000.0 ]--
r 212                 kNeares
--[ 2022.11.21.14.12.59.149.0 ]--
r 212                 kNearest
--[ 2022.11.21.14.13.08.056.0 ]--
r 212                 kNearest()
--[ 2022.11.21.14.13.08.791.0 ]--
r 212                 kNearest(c)
--[ 2022.11.21.14.13.09.405.0 ]--
r 212                 kNearest(cu)
--[ 2022.11.21.14.13.09.550.0 ]--
r 212                 kNearest(cur)
--[ 2022.11.21.14.13.09.669.0 ]--
r 212                 kNearest(curr)
--[ 2022.11.21.14.13.09.829.0 ]--
r 212                 kNearest(curre)
--[ 2022.11.21.14.13.09.950.0 ]--
r 212                 kNearest(curren)
--[ 2022.11.21.14.13.10.064.0 ]--
r 212                 kNearest(current)
--[ 2022.11.21.14.13.10.239.0 ]--
r 212                 kNearest(current.)
--[ 2022.11.21.14.13.10.479.0 ]--
r 212                 kNearest(current.l)
--[ 2022.11.21.14.13.10.622.0 ]--
r 212                 kNearest(current.le)
--[ 2022.11.21.14.13.10.818.0 ]--
r 212                 kNearest(current.lef)
--[ 2022.11.21.14.13.10.975.0 ]--
r 212                 kNearest(current.left)
--[ 2022.11.21.14.13.11.265.0 ]--
r 212                 kNearest(current.left,)
--[ 2022.11.21.14.13.11.388.0 ]--
r 212                 kNearest(current.left, )
--[ 2022.11.21.14.13.11.827.0 ]--
r 212                 kNearest(current.left, p)
--[ 2022.11.21.14.13.12.083.0 ]--
r 212                 kNearest(current.left, p,)
--[ 2022.11.21.14.13.12.231.0 ]--
r 212                 kNearest(current.left, p, )
--[ 2022.11.21.14.13.12.387.0 ]--
r 212                 kNearest(current.left, p, k)
--[ 2022.11.21.14.13.14.265.0 ]--
r 212                 kNearest(current.left, p, k);
--[ 2022.11.21.14.13.19.615.0 ]--
+ 215             
--[ 2022.11.21.14.13.20.139.0 ]--
+ 215                             kNearest(current.left, p, k);
r 216 
--[ 2022.11.21.14.13.20.147.0 ]--
r 215             kNearest(current.left, p, k);
--[ 2022.11.21.14.13.22.001.0 ]--
r 214             else {kNearest(current.left, p, k);
--[ 2022.11.21.14.13.22.997.0 ]--
+ 214             else {
+ 215 kNearest(current.left, p, k);
r 216 }
--[ 2022.11.21.14.13.23.048.0 ]--
r 215                 kNearest(current.left, p, k);
r 216             }
--[ 2022.11.21.14.13.24.693.0 ]--
r 216             
--[ 2022.11.21.14.13.25.035.0 ]--
- 216
--[ 2022.11.21.14.13.27.033.0 ]--
r 216                 kNearest(current.left, p, k);
--[ 2022.11.21.14.13.28.391.0 ]--
+ 217                 
--[ 2022.11.21.14.13.29.149.0 ]--
r 217                 }
--[ 2022.11.21.14.13.29.187.0 ]--
r 217             }
--[ 2022.11.21.14.13.35.476.0 ]--
r 216                 kNearest(current.r, p, k);
--[ 2022.11.21.14.13.35.582.0 ]--
r 216                 kNearest(current.ri, p, k);
--[ 2022.11.21.14.13.35.686.0 ]--
r 216                 kNearest(current.rig, p, k);
--[ 2022.11.21.14.13.35.791.0 ]--
r 216                 kNearest(current.righ, p, k);
--[ 2022.11.21.14.13.35.846.0 ]--
r 216                 kNearest(current.right, p, k);
--[ 2022.11.21.14.13.41.681.0 ]--
+ 230                 
--[ 2022.11.21.14.13.42.608.0 ]--
+ 230                                 kNearest(current.left, p, k);
r 231 
--[ 2022.11.21.14.13.42.626.0 ]--
r 230                 kNearest(current.left, p, k);
--[ 2022.11.21.14.13.43.915.0 ]--
+ 234             
--[ 2022.11.21.14.13.44.048.0 ]--
+ 234                             kNearest(current.left, p, k);
r 235 
--[ 2022.11.21.14.13.44.062.0 ]--
r 234             kNearest(current.left, p, k);
--[ 2022.11.21.14.13.45.440.0 ]--
r 234                 kNearest(current.left, p, k);
--[ 2022.11.21.14.13.47.058.0 ]--
r 233             else {kNearest(current.left, p, k);
--[ 2022.11.21.14.13.47.259.0 ]--
+ 233             else {
+ 234 kNearest(current.left, p, k);
r 235 }
--[ 2022.11.21.14.13.47.290.0 ]--
r 234                 kNearest(current.left, p, k);
r 235             }
--[ 2022.11.21.14.13.48.560.0 ]--
r 235             
--[ 2022.11.21.14.13.50.399.0 ]--
r 237 }
--[ 2022.11.21.14.13.50.436.0 ]--
r 235 
--[ 2022.11.21.14.13.50.440.0 ]--
r 237             }
--[ 2022.11.21.14.13.51.828.0 ]--
- 235
--[ 2022.11.21.14.13.58.073.0 ]--
- 231
--[ 2022.11.21.14.14.04.295.0 ]--
r 234                 kNearest(current.r, p, k);
--[ 2022.11.21.14.14.04.432.0 ]--
r 234                 kNearest(current.ri, p, k);
--[ 2022.11.21.14.14.04.515.0 ]--
r 234                 kNearest(current.rig, p, k);
--[ 2022.11.21.14.14.04.647.0 ]--
r 234                 kNearest(current.righ, p, k);
--[ 2022.11.21.14.14.04.667.0 ]--
r 234                 kNearest(current.right, p, k);
--[ 2022.11.21.14.14.11.201.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.16.08.287.0 ]--
- 212
--[ 2022.11.21.14.16.09.792.0 ]--
- 215
--[ 2022.11.21.14.16.12.280.0 ]--
- 228
--[ 2022.11.21.14.16.14.306.0 ]--
- 231
--[ 2022.11.21.14.16.22.478.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.17.19.317.0 ]--
r 235             if (partDist < 0) partDist = -1 * partDist;
r 236             if (nearDist < 0) nearDist = -1 * nearDist;
--[ 2022.11.21.14.17.31.975.0 ]--
r 235 //            if (partDist < 0) partDist = -1 * partDist;
r 236 //            if (nearDist < 0) nearDist = -1 * nearDist;
--[ 2022.11.21.14.19.50.864.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.20.28.980.0 ]--
+ 188         
--[ 2022.11.21.14.20.31.917.0 ]--
r 188         p
--[ 2022.11.21.14.20.32.065.0 ]--
r 188         pt
--[ 2022.11.21.14.20.32.122.0 ]--
r 188         ptp
--[ 2022.11.21.14.20.32.249.0 ]--
r 188         ptpq
--[ 2022.11.21.14.20.32.931.0 ]--
r 188         ptpq.
--[ 2022.11.21.14.20.33.989.0 ]--
r 188         ptpq.i
--[ 2022.11.21.14.20.34.125.0 ]--
r 188         ptpq.in
--[ 2022.11.21.14.20.34.396.0 ]--
r 188         ptpq.insert
--[ 2022.11.21.14.20.34.406.0 ]--
r 188         ptpq.insert()
--[ 2022.11.21.14.20.34.412.0 ]--
r 188         ptpq.insert();
--[ 2022.11.21.14.20.35.528.0 ]--
r 188         ptpq.insert(r);
--[ 2022.11.21.14.20.35.535.0 ]--
r 188         ptpq.insert(ro);
--[ 2022.11.21.14.20.35.609.0 ]--
r 188         ptpq.insert(roo);
--[ 2022.11.21.14.20.35.809.0 ]--
r 188         ptpq.insert(root);
--[ 2022.11.21.14.20.36.038.0 ]--
r 188         ptpq.insert(root.);
--[ 2022.11.21.14.20.36.488.0 ]--
r 188         ptpq.insert(root);
--[ 2022.11.21.14.20.36.580.0 ]--
r 188         ptpq.insert(roo);
--[ 2022.11.21.14.20.36.706.0 ]--
r 188         ptpq.insert(ro);
--[ 2022.11.21.14.20.36.812.0 ]--
r 188         ptpq.insert(r);
--[ 2022.11.21.14.20.36.946.0 ]--
r 188         ptpq.insert();
--[ 2022.11.21.14.20.37.294.0 ]--
r 188         ptpq.insert(n);
--[ 2022.11.21.14.20.37.393.0 ]--
r 188         ptpq.insert(ne);
--[ 2022.11.21.14.20.37.474.0 ]--
r 188         ptpq.insert(new);
--[ 2022.11.21.14.20.37.991.0 ]--
r 188         ptpq.insert(new );
--[ 2022.11.21.14.20.38.368.0 ]--
r 188         ptpq.insert(new P);
--[ 2022.11.21.14.20.38.609.0 ]--
r 188         ptpq.insert(new Po);
--[ 2022.11.21.14.20.38.718.0 ]--
r 188         ptpq.insert(new Poi);
--[ 2022.11.21.14.20.38.944.0 ]--
r 188         ptpq.insert(new PointDist);
--[ 2022.11.21.14.20.38.953.0 ]--
r 188         ptpq.insert(new PointDist());
--[ 2022.11.21.14.20.40.207.0 ]--
r 188         ptpq.insert(new PointDist(r));
--[ 2022.11.21.14.20.40.311.0 ]--
r 188         ptpq.insert(new PointDist(ro));
--[ 2022.11.21.14.20.40.413.0 ]--
r 188         ptpq.insert(new PointDist(roo));
--[ 2022.11.21.14.20.40.509.0 ]--
r 188         ptpq.insert(new PointDist(root));
--[ 2022.11.21.14.20.41.130.0 ]--
r 188         ptpq.insert(new PointDist(root.));
--[ 2022.11.21.14.20.41.524.0 ]--
r 188         ptpq.insert(new PointDist(root.p));
--[ 2022.11.21.14.20.41.984.0 ]--
r 188         ptpq.insert(new PointDist(root.p,));
--[ 2022.11.21.14.20.42.047.0 ]--
r 188         ptpq.insert(new PointDist(root.p, ));
--[ 2022.11.21.14.20.42.831.0 ]--
r 188         ptpq.insert(new PointDist(root.p, p));
--[ 2022.11.21.14.20.43.583.0 ]--
r 188         ptpq.insert(new PointDist(root.p, ));
--[ 2022.11.21.14.20.43.734.0 ]--
r 188         ptpq.insert(new PointDist(root.p, r));
--[ 2022.11.21.14.20.43.828.0 ]--
r 188         ptpq.insert(new PointDist(root.p, ro));
--[ 2022.11.21.14.20.43.925.0 ]--
r 188         ptpq.insert(new PointDist(root.p, roo));
--[ 2022.11.21.14.20.44.044.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root));
--[ 2022.11.21.14.20.44.323.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.));
--[ 2022.11.21.14.20.44.666.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p));
--[ 2022.11.21.14.20.45.058.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.));
--[ 2022.11.21.14.20.45.331.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.d));
--[ 2022.11.21.14.20.45.394.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.di));
--[ 2022.11.21.14.20.45.508.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.dis));
--[ 2022.11.21.14.20.45.665.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.dist));
--[ 2022.11.21.14.20.48.610.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.dist()));
--[ 2022.11.21.14.20.56.011.0 ]--
r 188         ptpq.insert(new PointDist(root.p, root.p.dist(p)));
--[ 2022.11.21.14.21.01.871.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.23.50.935.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.29.41.697.0 ]--
r 212                 kNearest(current.l, p, k);
--[ 2022.11.21.14.29.41.815.0 ]--
r 212                 kNearest(current.le, p, k);
--[ 2022.11.21.14.29.41.882.0 ]--
r 212                 kNearest(current.lef, p, k);
--[ 2022.11.21.14.29.42.086.0 ]--
r 212                 kNearest(current.left, p, k);
--[ 2022.11.21.14.29.43.278.0 ]--
r 215                 kNearest(current.r, p, k);
--[ 2022.11.21.14.29.43.420.0 ]--
r 215                 kNearest(current.ri, p, k);
--[ 2022.11.21.14.29.43.569.0 ]--
r 215                 kNearest(current.rig, p, k);
--[ 2022.11.21.14.29.43.689.0 ]--
r 215                 kNearest(current.righ, p, k);
--[ 2022.11.21.14.29.43.790.0 ]--
r 215                 kNearest(current.right, p, k);
--[ 2022.11.21.14.29.47.345.0 ]--
r 222                 if (p.x() > current.p.x()) kNearest(current.r, p, k);
--[ 2022.11.21.14.29.47.471.0 ]--
r 222                 if (p.x() > current.p.x()) kNearest(current.ri, p, k);
--[ 2022.11.21.14.29.47.566.0 ]--
r 222                 if (p.x() > current.p.x()) kNearest(current.rig, p, k);
--[ 2022.11.21.14.29.47.741.0 ]--
r 222                 if (p.x() > current.p.x()) kNearest(current.righ, p, k);
--[ 2022.11.21.14.29.47.936.0 ]--
r 222                 if (p.x() > current.p.x()) kNearest(current.right, p, k);
--[ 2022.11.21.14.29.49.436.0 ]--
r 223                 else kNearest(current.l, p, k);
--[ 2022.11.21.14.29.49.556.0 ]--
r 223                 else kNearest(current.le, p, k);
--[ 2022.11.21.14.29.49.640.0 ]--
r 223                 else kNearest(current.lef, p, k);
--[ 2022.11.21.14.29.49.866.0 ]--
r 223                 else kNearest(current.left, p, k);
--[ 2022.11.21.14.29.52.392.0 ]--
r 228                 kNearest(current.l, p, k);
--[ 2022.11.21.14.29.52.521.0 ]--
r 228                 kNearest(current.le, p, k);
--[ 2022.11.21.14.29.52.542.0 ]--
r 228                 kNearest(current.lef, p, k);
--[ 2022.11.21.14.29.52.799.0 ]--
r 228                 kNearest(current.left, p, k);
--[ 2022.11.21.14.29.53.804.0 ]--
r 231                 kNearest(current.r, p, k);
--[ 2022.11.21.14.29.53.985.0 ]--
r 231                 kNearest(current.ri, p, k);
--[ 2022.11.21.14.29.54.144.0 ]--
r 231                 kNearest(current.rig, p, k);
--[ 2022.11.21.14.29.54.301.0 ]--
r 231                 kNearest(current.righ, p, k);
--[ 2022.11.21.14.29.54.436.0 ]--
r 231                 kNearest(current.right, p, k);
--[ 2022.11.21.14.29.56.918.0 ]--
r 239                 if (p.y() > current.p.y()) kNearest(current.r, p, k);
--[ 2022.11.21.14.29.57.074.0 ]--
r 239                 if (p.y() > current.p.y()) kNearest(current.ri, p, k);
--[ 2022.11.21.14.29.57.228.0 ]--
r 239                 if (p.y() > current.p.y()) kNearest(current.rig, p, k);
--[ 2022.11.21.14.29.57.375.0 ]--
r 239                 if (p.y() > current.p.y()) kNearest(current.righ, p, k);
--[ 2022.11.21.14.29.57.528.0 ]--
r 239                 if (p.y() > current.p.y()) kNearest(current.right, p, k);
--[ 2022.11.21.14.29.58.888.0 ]--
r 240                 else kNearest(current.l, p, k);
--[ 2022.11.21.14.29.59.024.0 ]--
r 240                 else kNearest(current.le, p, k);
--[ 2022.11.21.14.29.59.142.0 ]--
r 240                 else kNearest(current.lef, p, k);
--[ 2022.11.21.14.29.59.399.0 ]--
r 240                 else kNearest(current.left, p, k);
--[ 2022.11.21.14.30.04.619.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.30.32.328.0 ]--
r 240                 else kNearest(current.right, p, k);
--[ 2022.11.21.14.30.32.785.0 ]--
r 239                 if (p.y() > current.p.y()) kNearest(current.left, p, k);
--[ 2022.11.21.14.30.33.194.0 ]--
r 231                 kNearest(current.left, p, k);
--[ 2022.11.21.14.30.33.611.0 ]--
r 228                 kNearest(current.right, p, k);
--[ 2022.11.21.14.30.34.023.0 ]--
r 223                 else kNearest(current.right, p, k);
--[ 2022.11.21.14.30.34.511.0 ]--
r 222                 if (p.x() > current.p.x()) kNearest(current.left, p, k);
--[ 2022.11.21.14.30.35.271.0 ]--
r 215                 kNearest(current.left, p, k);
--[ 2022.11.21.14.30.38.505.0 ]--
r 212                 kNearest(current.right, p, k);
--[ 2022.11.21.14.30.55.158.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.33.02.390.0 ]--
r 221             if (ptpq.max().d() > partDist ) {
--[ 2022.11.21.14.33.02.799.0 ]--
r 221             if (ptpq.max().d() > partDist |) {
--[ 2022.11.21.14.33.02.968.0 ]--
r 221             if (ptpq.max().d() > partDist ||) {
--[ 2022.11.21.14.33.03.989.0 ]--
r 221             if (ptpq.max().d() > partDist || ) {
--[ 2022.11.21.14.33.04.373.0 ]--
r 221             if (ptpq.max().d() > partDist || p) {
--[ 2022.11.21.14.33.04.512.0 ]--
r 221             if (ptpq.max().d() > partDist || pt) {
--[ 2022.11.21.14.33.04.552.0 ]--
r 221             if (ptpq.max().d() > partDist || ptp) {
--[ 2022.11.21.14.33.04.821.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq) {
--[ 2022.11.21.14.33.05.503.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq ) {
--[ 2022.11.21.14.33.06.302.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq) {
--[ 2022.11.21.14.33.06.592.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.) {
--[ 2022.11.21.14.33.06.824.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.s) {
--[ 2022.11.21.14.33.06.878.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.si) {
--[ 2022.11.21.14.33.07.110.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.siz) {
--[ 2022.11.21.14.33.07.237.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.size) {
--[ 2022.11.21.14.33.07.691.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.size()) {
--[ 2022.11.21.14.33.08.225.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.size() ) {
--[ 2022.11.21.14.33.08.509.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.size() >) {
--[ 2022.11.21.14.33.08.900.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.size() ) {
--[ 2022.11.21.14.33.09.227.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.size() <) {
--[ 2022.11.21.14.33.09.633.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.size() < ) {
--[ 2022.11.21.14.33.09.725.0 ]--
r 221             if (ptpq.max().d() > partDist || ptpq.size() < k) {
--[ 2022.11.21.14.33.19.703.0 ]--
r 238             if (ptpq.max().d() > partDist || ptpq.size() < k) {
--[ 2022.11.21.14.33.24.969.0 ]--
- 201
--[ 2022.11.21.14.33.26.316.0 ]--
r 203         
--[ 2022.11.21.14.33.26.842.0 ]--
- 203
--[ 2022.11.21.14.33.28.600.0 ]--
r 202         ptpq.insert(toAdd);
--[ 2022.11.21.14.33.35.035.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.34.43.964.0 ]--
- 29
--[ 2022.11.21.14.34.55.390.0 ]--
+ 186         
--[ 2022.11.21.14.34.56.162.0 ]--
+ 186             MaxPQ<PointDist> ptpq = new MaxPQ<>();
r 187 
--[ 2022.11.21.14.34.56.188.0 ]--
r 186         MaxPQ<PointDist> ptpq = new MaxPQ<>();
--[ 2022.11.21.14.35.01.892.0 ]--
r 198     private void kNearest(Node current, Point p, int k,) {
--[ 2022.11.21.14.35.02.082.0 ]--
r 198     private void kNearest(Node current, Point p, int k, ) {
--[ 2022.11.21.14.35.04.075.0 ]--
r 198     private void kNearest(Node current, Point p, int k, M) {
--[ 2022.11.21.14.35.04.815.0 ]--
r 198     private void kNearest(Node current, Point p, int k, Ma) {
--[ 2022.11.21.14.35.05.094.0 ]--
r 198     private void kNearest(Node current, Point p, int k, Max) {
--[ 2022.11.21.14.35.05.636.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxP) {
--[ 2022.11.21.14.35.05.974.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ) {
--[ 2022.11.21.14.35.08.273.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ ) {
--[ 2022.11.21.14.35.08.475.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ p) {
--[ 2022.11.21.14.35.08.586.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ pt) {
--[ 2022.11.21.14.35.08.686.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ ptp) {
--[ 2022.11.21.14.35.08.937.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ ptpq) {
--[ 2022.11.21.14.35.13.849.0 ]--
r 190         kNearest(root, p, k,);
--[ 2022.11.21.14.35.14.015.0 ]--
r 190         kNearest(root, p, k, );
--[ 2022.11.21.14.35.14.335.0 ]--
r 190         kNearest(root, p, k, p);
--[ 2022.11.21.14.35.14.440.0 ]--
r 190         kNearest(root, p, k, pt);
--[ 2022.11.21.14.35.14.520.0 ]--
r 190         kNearest(root, p, k, ptp);
--[ 2022.11.21.14.35.14.655.0 ]--
r 190         kNearest(root, p, k, ptpq);
--[ 2022.11.21.14.35.25.588.0 ]--
r 211                 kNearest(current.right, p, k, ptpq);
--[ 2022.11.21.14.35.27.633.0 ]--
r 214                 kNearest(current.left, p, k, ptpq);
--[ 2022.11.21.14.35.28.833.0 ]--
r 221                 if (p.x() > current.p.x()) kNearest(current.left, p, k, ptpq);
--[ 2022.11.21.14.35.30.047.0 ]--
r 222                 else kNearest(current.right, p, k, ptpq);
--[ 2022.11.21.14.35.32.250.0 ]--
r 227                 kNearest(current.right, p, k, ptpq);
--[ 2022.11.21.14.35.33.100.0 ]--
r 230                 kNearest(current.left, p, k, ptpq);
--[ 2022.11.21.14.35.35.126.0 ]--
r 238                 if (p.y() > current.p.y()) kNearest(current.left, p, k, ptpq);
--[ 2022.11.21.14.35.36.302.0 ]--
r 239                 else kNearest(current.right, p, k, ptpq);
--[ 2022.11.21.14.35.52.387.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ<> ptpq) {
--[ 2022.11.21.14.35.52.921.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ<P> ptpq) {
--[ 2022.11.21.14.35.53.776.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ<Po> ptpq) {
--[ 2022.11.21.14.35.53.862.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ<Poi> ptpq) {
--[ 2022.11.21.14.35.54.109.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ<Poit> ptpq) {
--[ 2022.11.21.14.35.55.294.0 ]--
r 198     private void kNearest(Node current, Point p, int k, MaxPQ<PointDist> ptpq) {
--[ 2022.11.21.14.36.00.058.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.14.41.09.077.0 ]--
- 202
--[ 2022.11.21.18.05.56.610.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.18.07.57.920.0 ]--
+ 118         
--[ 2022.11.21.18.08.25.559.0 ]--
r 118         i
--[ 2022.11.21.18.08.25.606.0 ]--
r 118         if
--[ 2022.11.21.18.08.47.644.0 ]--
r 118         if()
--[ 2022.11.21.18.08.53.802.0 ]--
r 118         if(r)
--[ 2022.11.21.18.08.54.172.0 ]--
r 118         if(rb)
--[ 2022.11.21.18.08.54.370.0 ]--
r 118         if(rbs)
--[ 2022.11.21.18.08.54.547.0 ]--
r 118         if(rbst)
--[ 2022.11.21.18.08.55.517.0 ]--
r 118         if(rbs)
--[ 2022.11.21.18.08.55.636.0 ]--
r 118         if(rb)
--[ 2022.11.21.18.08.55.774.0 ]--
r 118         if(r)
--[ 2022.11.21.18.08.55.910.0 ]--
r 118         if()
--[ 2022.11.21.18.09.20.058.0 ]--
r 118         if(isEmpty()) return null;
--[ 2022.11.21.18.09.21.567.0 ]--
+ 119         
--[ 2022.11.21.18.09.32.336.0 ]--
r 118         if(isEmpty()) return ;
--[ 2022.11.21.18.09.32.749.0 ]--
r 118         if(isEmpty()) return;
--[ 2022.11.21.18.09.32.908.0 ]--
r 118         if(isEmpty()) retur;
--[ 2022.11.21.18.09.33.077.0 ]--
r 118         if(isEmpty()) retu;
--[ 2022.11.21.18.09.33.224.0 ]--
r 118         if(isEmpty()) ret;
--[ 2022.11.21.18.09.33.376.0 ]--
r 118         if(isEmpty()) re;
--[ 2022.11.21.18.09.33.526.0 ]--
r 118         if(isEmpty()) r;
--[ 2022.11.21.18.09.33.660.0 ]--
r 118         if(isEmpty()) ;
--[ 2022.11.21.18.09.34.125.0 ]--
r 118         if(isEmpty()) t;
--[ 2022.11.21.18.09.34.202.0 ]--
r 118         if(isEmpty()) th;
--[ 2022.11.21.18.09.34.330.0 ]--
r 118         if(isEmpty()) thr;
--[ 2022.11.21.18.09.34.467.0 ]--
r 118         if(isEmpty()) thro;
--[ 2022.11.21.18.09.34.554.0 ]--
r 118         if(isEmpty()) throw;
--[ 2022.11.21.18.09.35.482.0 ]--
r 118         if(isEmpty()) throw ;
--[ 2022.11.21.18.09.35.658.0 ]--
r 118         if(isEmpty()) throw n;
--[ 2022.11.21.18.09.35.772.0 ]--
r 118         if(isEmpty()) throw ne;
--[ 2022.11.21.18.09.35.837.0 ]--
r 118         if(isEmpty()) throw new;
--[ 2022.11.21.18.09.36.022.0 ]--
r 118         if(isEmpty()) throw new ;
--[ 2022.11.21.18.09.36.336.0 ]--
r 118         if(isEmpty()) throw new e;
--[ 2022.11.21.18.09.38.800.0 ]--
r 118         if(isEmpty()) throw new ;
--[ 2022.11.21.18.09.39.575.0 ]--
r 119 
--[ 2022.11.21.18.36.40.874.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.21.18.36.40.902.0 ]--
InitTree:
/out/production/P05_KDTrees/.donotlog
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/input1M.txt
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/input100K.txt
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/burgerking.csv
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/main
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/main
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/0c/55bcf14a37162c8cecdd8bb4226a147b847710
/.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
/.git/objects/1a/49d62b998226393c172907eef021434d19be9a
/.git/objects/1f/fc97640cccefe0b1a237033b6373d6267daafb
/.git/objects/21/5f9d8b463f594d7a29686b9e9be2c095a4e415
/.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
/.git/objects/2b/146202332c98f33d1ab3db98dea03e6bbc1093
/.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
/.git/objects/2d/684a62c75f8da8fc231206420108d204cbe252
/.git/objects/2d/a01175c002a7aca63ea26eac5644d92eff4262
/.git/objects/2e/d4fe70b4e088ec2c3ac33ca08f741ed2d35a97
/.git/objects/3a/467db814b5de23a11971dfafc2a31dab54402b
/.git/objects/3e/ec82059c43fd48c2c87acbb5d3146919181ac4
/.git/objects/42/2e8fe6a25b2cb1526a3b698f7bb6e4a6d6ab1f
/.git/objects/54/0fd2392eaf74abc751e9970668bf235e56f803
/.git/objects/57/21445f69b8abeb3fa1b24eafb39b339a66c987
/.git/objects/67/a3cbc10acb52f757cbd15ab1a2acaef561cf5d
/.git/objects/6a/13eb1367395cad1f3ae5b2219d4d1a970335e1
/.git/objects/6e/10e3d8976dabc74255b1ddce2024336f50d7e2
/.git/objects/6e/e6bdaf464e0f4adb373587a385e0875ebf8ba6
/.git/objects/75/63d3f1a349009df7dbf21fee30194eead50ca0
/.git/objects/77/c1c9e0460791004d21b231cb11397fa8405453
/.git/objects/7c/f2891237ab51abd3dcfe41128b939aa54ae3a2
/.git/objects/86/5b56d35df1dcfcbf5196eeddcef674c03a3a93
/.git/objects/8d/e804238c33c653fe535bd162aabed440497ec7
/.git/objects/9a/8c6aff1f8871e01cacec32f40b40f4107494d2
/.git/objects/9a/e8d0c18cb848aa651381c33a3fa44eddc40bcb
/.git/objects/a4/1f4cf11f0c1e522a76feaaea7dd201322b74b2
/.git/objects/af/24b078cc669f5e4da5902ba1297a2ac0fa2339
/.git/objects/b2/0a2737119fe126fc0fc4d4284bed106ad85463
/.git/objects/b7/710fca979cfd5216bf2633dd1dfa8161d9f45f
/.git/objects/b7/9e120aa750f1350aa5c9c92e567b92d1cb06ca
/.git/objects/bd/dc962f4cacb8ce630d07f575b6668243250fb1
/.git/objects/c2/259fdab2fede23add0f6b409611094fb0ae13a
/.git/objects/c2/a99d32458bd15f0b79cff7dd46d99629763bed
/.git/objects/c6/82756a1eb42ff4805cdfc29c84fac9230c11e5
/.git/objects/c7/e29d8475f23acd8d328dc8074104b846f4bbbf
/.git/objects/c7/ed19fcb2ed6617a23bd3e9a2efaa966bed42da
/.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
/.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
/.git/objects/ce/2de51fa2f6dd8ca45683eb75ba132137da5a20
/.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
/.git/objects/d4/85126c43a458d604c41191c3cd216e30972972
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/e9/ce331a35ca02c33b0678d762c13fe57fe4a67a
/.git/objects/ee/909fb82334c194c06fd779181ba31079f10d42
/.git/objects/f5/001ef95b10cd55e1f28b609cd462b09cf24d06
/.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
/.git/objects/fc/e1363a394e590b51c742706992bebecae53b2b
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.idx
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.pack
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/shelf/Uncommitted_changes_before_Update_at_11_21_22,_1_52_PM_[Changes]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_10_01_AM_[Changes]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_21_22__1_52_PM__Changes_.xml
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__10_01_AM__Changes_.xml
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml
/P05_KDTrees.zip

--[ 2022.11.21.18.36.40.903.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.21.18.36.40.903.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.21.18.36.40.903.2 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.21.18.36.40.903.3 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */

// red-black trees

public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection

    RedBlackBST<Point, Value> rbst;
    double minx;
    double miny;
    double maxx;
    double maxy;

    public PSBruteForce() {
        rbst = new RedBlackBST<>();
    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        if(p == null) throw new NullPointerException("p must be initialized");
        rbst.put(p,v);
        if(rbst.size() == 1) {
            minx = p.x();
            miny = p.y();

            maxx = p.x();
            maxy = p.y();
        }
        else {
            if(p.x() < minx) minx = p.x();
            if(p.y() < miny) miny = p.y();

            if(p.x() > maxx) maxx = p.x();
            if(p.y() > maxy) maxy = p.y();
        }
    }

    public Value get(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        return rbst.get(p);
    }

    public boolean contains(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        return rbst.contains(p);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return rbst.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        Point currentNear = null;
        double nearDist = 0;
        int idx = 0;
        Iterable<Point> iter = points();

        for( Point i : iter ) {

            double distance = p.dist(i);
            if(idx == 0 || distance < nearDist) {
                nearDist = distance;
                currentNear = i;
            }
            idx++;
        }
        return currentNear;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        Point nearestPoint = nearest(p);
        return rbst.get(nearestPoint);
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        //for each iterable loop, remember the min
        return new Point(minx, miny);
    }
    public Point max() {
        if(isEmpty()) return null;
        //same as min, but with max
        return new Point(maxx, maxy);
    }


    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        if(p == null) throw new NullPointerException("p must be initialized");

        MaxPQ<PointDist> ptpq = new MaxPQ<>();

        Iterable<Point> iter = points();
        for( Point i : iter ) {

                PointDist distance = new PointDist(i, p.dist(i));
                ptpq.insert(distance);
                while (ptpq.size()>k) ptpq.delMax();
        }
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return rbst.size(); }

    // return whether the KDTree is empty
    public boolean isEmpty() { return rbst.isEmpty(); }

    // place your timing code or unit testing here
    public static void main(String[] args) {
        PSBruteForce<Integer> bf = new PSBruteForce<>();
        RedBlackBST<Point, Integer> rb = new RedBlackBST<>();
        Point p = new Point(1.0, 1.0);
        Point t = new Point(2.0, 2.0);
        Point q = new Point(3.0, 3.0);
        bf.put(p, 10);
        bf.put(t, 20);
        bf.put(q, 30);
        StdOut.println(bf.nearest(new Point (4.0,4.0)));

    }
}

--[ 2022.11.21.18.36.40.903.4 ]--
InitFile: /.cos265


--[ 2022.11.21.18.36.40.903.5 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 10;
    private final static int nUniform  = 10;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 1;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.21.18.36.40.904.0 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;

        public Node(Point pt, Value val) {
            p = pt;
            v = val;
        }
    }

    BST<Point, Value> kdt;
    int count=0;

    double minx;
    double miny;
    double maxx;
    double maxy;
    Node root=null;


    //point stack
    Stack<Point> ps = new Stack<>();    //doesn't account for deletions
    //stack of partitions
    Stack<Partition> sp = new Stack<>();
    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree -- here is 2D (x and y)
    public void put(Point p, Value v) {
        if(p == null) throw new NullPointerException("p must be initialized");
        if (v == null) { return; } // can't do anything with a null value

        if(root==null) {
            Node x = new Node(p,v);
            x.left=null;
            x.right=null;
            x.dir= Partition.Direction.DOWNUP;
            root=x;
            minx = x.p.x();
            miny = x.p.y();

            maxx = x.p.x();
            maxy = x.p.y();
            ps.push(x.p);
            sp.push(new Partition(x.p,x.p,x.dir));
        }
        else put(root, p, v, root);
        count++;
    }

    private Node put(Node x, Point p, Value v, Node parent) {
        if (x == null) {
            Node newNode = new Node(p,v);
            if(parent.dir == Partition.Direction.DOWNUP) {
                newNode.dir = Partition.Direction.LEFTRIGHT;
                newNode.left=null;
                newNode.right=null;
            }
            else {
                newNode.dir = Partition.Direction.DOWNUP;
                newNode.left=null;
                newNode.right=null;
            }
            if(newNode.p.x() < minx) minx = newNode.p.x();
            if(newNode.p.y() < miny) miny = newNode.p.y();

            if(newNode.p.x() > maxx) maxx = newNode.p.x();
            if(newNode.p.y() > maxy) maxy = newNode.p.y();
            ps.push(p);
            sp.push(new Partition(newNode.p,newNode.p,newNode.dir));
            return newNode;
        }
        else {
            Partition.Direction parentDir = x.dir;

            if (parentDir == Partition.Direction.DOWNUP) {
                if (x.p.x() > p.x()) x.left = put(x.left, p, v, x);
                else x.right = put(x.right, p, v, x);
            } else {
                if (x.p.y() > p.y()) x.left = put(x.left, p, v, x);
                else x.right = put(x.right, p, v, x);
            }
            return x;
        }
    }

    public Value get(Point p) {
        if(isEmpty()) return null;
        if(p == null) throw new NullPointerException("p must be initialized");
        return get(root, p, root); //search through the tree instead of returning null
    }

    private Value get(Node current, Point p, Node parent) {
        if(current==null) return null;
        if(parent.dir == Partition.Direction.DOWNUP) {
            if (parent.p.x() < current.p.x()) return get(parent.right, p, parent);
            else if (parent.p.x() > current.p.x()) return get(parent.left, p, parent);
            else return current.v;
        }
        else {
            if (parent.p.y() < current.p.y()) return get(parent.right, p, parent);
            else if (parent.p.y() > current.p.y()) return get(parent.left, p, parent);
            else return current.v;
        }
    }

    public boolean contains(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        return get(p)!=null; //searching again for p in the bst
    }

    public Value getNearest(Point p) {
        if(isEmpty()) return null;
        if(p == null) throw new NullPointerException("p must be initialized");
        Point nearestPoint = nearest(p);
        return get(nearestPoint);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return ps; }

    // return an iterable of all partitions that make up the kD-tree
    //we didn't know what to do with two points in the partition constructor,
    //so the points in each partition are the same
    public Iterable<Partition> partitions() { return sp; }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        if(isEmpty()) return null;
        if(p == null || root == null) throw new NullPointerException("p and root must be initialized");
        return nearest(root, p, root.p, root.p.dist(p));
    }
    private Point nearest(Node current, Point p, Point currentNear, double nearDist) {
        if(current == null) return currentNear;

        //1. Check against the current point...  closer?
        if(current.p.dist(p) < nearDist) {      //get distance to the query point from the partition point)
            currentNear = current.p;
            nearDist = current.p.dist(p);
        }
        //2. Check which side the query point is on
        if(current.dir == Partition.Direction.DOWNUP) {
            if(p.x() > current.p.x()) {
                currentNear = nearest(current.right, p, currentNear, nearDist);
            }
            else currentNear = nearest(current.left, p, currentNear, nearDist);

            //3. Check if we should check the other side!
            double partDist = current.p.x() - p.x();
//            if (partDist < 0) partDist = -1 * partDist;
//            if (nearDist < 0) nearDist = -1 * nearDist;
            if (nearDist > partDist) {
                if (p.x() > current.p.x()) nearest(current.left, p, currentNear, nearDist);
                else nearest(current.right, p, currentNear, nearDist);
            }
        }
        else {    // dir is LEFTRIGHT
            if(p.y() > current.p.y()) {
                currentNear = nearest(current.right, p, currentNear, nearDist);
            }
            else currentNear = nearest(current.left, p, currentNear, nearDist);

            //3. Check if we should check the other side!
            double partDist = current.p.y() - p.y();
//            if (partDist < 0) partDist = -1 * partDist;
//            if (nearDist < 0) nearDist = -1 * nearDist;
            if (nearDist > partDist) {
                if (p.y() > current.p.y()) nearest(current.left, p, currentNear, nearDist);
                else nearest(current.right, p, currentNear, nearDist);
            }
        }

        return currentNear;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        if(p == null) throw new NullPointerException("p must be initialized");
        if(root == null) throw new NullPointerException("Null root has no nearest");
        MaxPQ<PointDist> ptpq = new MaxPQ<>();

        //add things to the global maxpq!
        ptpq.insert(new PointDist(root.p, root.p.dist(p)));
        kNearest(root, p, k, ptpq);
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    private void kNearest(Node current, Point p, int k, MaxPQ<PointDist> ptpq) {
        if(current == null) return;
        if(k <= 0) return;
        PointDist toAdd = new PointDist(current.p, current.p.dist(p));
        //1. Check against the current point...  closer?
        ptpq.insert(toAdd);
        while( ptpq.size() > k ) {
            ptpq.delMax();
        }

        //2. Check which side the query point is on
        if(current.dir == Partition.Direction.DOWNUP) {
            if(p.x() > current.p.x()) {
                kNearest(current.right, p, k, ptpq);
            }
            else {
                kNearest(current.left, p, k, ptpq);
            }


            //3. Check if we should check the other side!
            double partDist = current.p.x() - p.x();
            if (ptpq.max().d() > partDist || ptpq.size() < k) {
                if (p.x() > current.p.x()) kNearest(current.left, p, k, ptpq);
                else kNearest(current.right, p, k, ptpq);
            }
        }
        else {    // dir is LEFTRIGHT
            if(p.y() > current.p.y()) {
                kNearest(current.right, p, k, ptpq);
            }
            else {
                kNearest(current.left, p, k, ptpq);
            }

            //3. Check if we should check the other side!
            double partDist = current.p.y() - p.y();
//            if (partDist < 0) partDist = -1 * partDist;
//            if (nearDist < 0) nearDist = -1 * nearDist;
            if (ptpq.max().d() > partDist || ptpq.size() < k) {
                if (p.y() > current.p.y()) kNearest(current.left, p, k, ptpq);
                else kNearest(current.right, p, k, ptpq);
            }
        }
    }


    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        return new Point(minx,miny);
    }
    public Point max() {
        if(isEmpty()) return null;
        return new Point(maxx,maxy);
    }

    // return the number of Points in kD-tree
    public int size() { return count; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return count==0; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
    }

}

--[ 2022.11.21.18.36.40.904.1 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.21.18.36.40.904.2 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.21.18.36.40.904.3 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.21.18.36.40.904.4 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.21.18.36.40.904.5 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.21.18.36.40.904.6 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.21.21.43.04.002.0 ]--
:/src/PSKDTree.java
r 193         /ptpq.insert(new PointDist(root.p, root.p.dist(p)));
--[ 2022.11.21.21.43.04.017.0 ]--
UpdateTree (AD): 8 0
+ /.git/objects/09/bd3ab462c2a54f2f734a663b4d0d55dbefa856
+ /.git/objects/0c/324b92a8f6c06aa72c7d1a7b6a4b3a471f2f9f
+ /.git/objects/2e/39673052a1f295d801c985e388b4f7474189b5
+ /.git/objects/35/3cb223ed1906f7fafb0088b405f95a94d48049
+ /.git/objects/47/2708597a52c84fb05917e78f58bfd5c9595103
+ /.git/objects/63/f769006f85ce8b975f16e9c895bd3395504579
+ /.git/objects/68/33ac541d58999c846b37793c0ca6bb09e43f21
+ /.git/objects/f1/f318c26c20a6cefd43a41e41a4c26c668d97ea

--[ 2022.11.21.21.43.04.069.0 ]--
r 193         //ptpq.insert(new PointDist(root.p, root.p.dist(p)));
--[ 2022.11.21.21.43.09.625.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.44.44.339.0 ]--
r 189 //        if(root == null) throw new NullPointerException("Null root has no nearest");
--[ 2022.11.21.21.45.06.629.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.46.54.629.0 ]--
- 124
--[ 2022.11.21.21.46.56.674.0 ]--
+ 123         
--[ 2022.11.21.21.46.57.195.0 ]--
+ 123                 if(p == null) throw new NullPointerException("p must be initialized");
r 124 
--[ 2022.11.21.21.46.57.224.0 ]--
r 123         if(p == null) throw new NullPointerException("p must be initialized");
--[ 2022.11.21.21.46.58.094.0 ]--
- 124
--[ 2022.11.21.21.47.04.718.0 ]--
- 99
--[ 2022.11.21.21.47.05.926.0 ]--
+ 98         
--[ 2022.11.21.21.47.06.603.0 ]--
+ 98                 if(p == null) throw new NullPointerException("p must be initialized");
r 99 
--[ 2022.11.21.21.47.06.632.0 ]--
r 98         if(p == null) throw new NullPointerException("p must be initialized");
--[ 2022.11.21.21.47.07.231.0 ]--
- 99
--[ 2022.11.21.21.47.31.662.0 ]--
- 140
--[ 2022.11.21.21.47.33.234.0 ]--
+ 139         
--[ 2022.11.21.21.47.33.958.0 ]--
+ 139                 if(p == null || root == null) throw new NullPointerException("p and root must be initialized");
r 140 
--[ 2022.11.21.21.47.33.991.0 ]--
r 139         if(p == null || root == null) throw new NullPointerException("p and root must be initialized");
--[ 2022.11.21.21.47.34.830.0 ]--
- 140
--[ 2022.11.21.21.47.48.491.0 ]--
r 139         if(p == null) throw new NullPointerException("p and root must be initialized");
--[ 2022.11.21.21.48.58.738.0 ]--
:/src/PSBruteForce.java
- 131
--[ 2022.11.21.21.49.01.916.0 ]--
:/src/PSKDTree.java
+ 269         
--[ 2022.11.21.21.49.02.177.0 ]--
+ 269                 PSBruteForce<Integer> bf = new PSBruteForce<>();
r 270 
--[ 2022.11.21.21.49.02.203.0 ]--
r 269         PSBruteForce<Integer> bf = new PSBruteForce<>();
--[ 2022.11.21.21.49.04.760.0 ]--
r 269         P<Integer> bf = new PSBruteForce<>();
--[ 2022.11.21.21.49.04.961.0 ]--
r 269         PS<Integer> bf = new PSBruteForce<>();
--[ 2022.11.21.21.49.05.447.0 ]--
r 269         PSK<Integer> bf = new PSBruteForce<>();
--[ 2022.11.21.21.49.06.271.0 ]--
r 269         PSKDTree<Integer> bf = new PSBruteForce<>();
--[ 2022.11.21.21.49.08.887.0 ]--
r 269         PSKDTree<Integer> bf = new P<>();
--[ 2022.11.21.21.49.09.064.0 ]--
r 269         PSKDTree<Integer> bf = new PS<>();
--[ 2022.11.21.21.49.09.600.0 ]--
r 269         PSKDTree<Integer> bf = new PSKDTree<>();
--[ 2022.11.21.21.49.09.611.0 ]--
r 269         PSKDTree<Integer> bf = new PSKDTree();
--[ 2022.11.21.21.49.09.627.0 ]--
r 269         PSKDTree<Integer> bf = new PSKDTree<>();
--[ 2022.11.21.21.49.12.248.0 ]--
+ 270         
--[ 2022.11.21.21.49.14.556.0 ]--
r 270         P
--[ 2022.11.21.21.49.14.977.0 ]--
r 270         Po
--[ 2022.11.21.21.49.15.083.0 ]--
r 270         Poi
--[ 2022.11.21.21.49.15.316.0 ]--
r 270         Poin
--[ 2022.11.21.21.49.15.461.0 ]--
r 270         Point
--[ 2022.11.21.21.49.16.483.0 ]--
r 270         Point 
--[ 2022.11.21.21.49.16.638.0 ]--
r 270         Point p
--[ 2022.11.21.21.49.17.663.0 ]--
r 270         Point p 
--[ 2022.11.21.21.49.17.786.0 ]--
r 270         Point p =
--[ 2022.11.21.21.49.17.883.0 ]--
r 270         Point p = 
--[ 2022.11.21.21.49.27.619.0 ]--
+ 270        Point p = new Point(1.0, 1.0);
+ 271         Point t = new Point(2.0, 2.0);
r 272         Point q = new Point(3.0, 3.0);
r 273  
--[ 2022.11.21.21.49.27.650.0 ]--
r 270         Point p = new Point(1.0, 1.0);
r 273 
--[ 2022.11.21.21.49.29.467.0 ]--
r 273     
--[ 2022.11.21.21.49.29.973.0 ]--
r 273         
--[ 2022.11.21.21.49.30.853.0 ]--
r 273         b
--[ 2022.11.21.21.49.31.672.0 ]--
r 273         
--[ 2022.11.21.21.49.34.181.0 ]--
r 269         PSKDTree<Integer> p = new PSKDTree<>();
--[ 2022.11.21.21.49.34.290.0 ]--
r 269         PSKDTree<Integer> ps = new PSKDTree<>();
--[ 2022.11.21.21.49.35.843.0 ]--
r 269         PSKDTree<Integer> psj = new PSKDTree<>();
--[ 2022.11.21.21.49.35.865.0 ]--
r 269         PSKDTree<Integer> psjd = new PSKDTree<>();
--[ 2022.11.21.21.49.36.851.0 ]--
r 269         PSKDTree<Integer> psj = new PSKDTree<>();
--[ 2022.11.21.21.49.37.045.0 ]--
r 269         PSKDTree<Integer> ps = new PSKDTree<>();
--[ 2022.11.21.21.49.37.364.0 ]--
r 269         PSKDTree<Integer> psk = new PSKDTree<>();
--[ 2022.11.21.21.49.38.332.0 ]--
r 269         PSKDTree<Integer> pskd = new PSKDTree<>();
--[ 2022.11.21.21.49.40.131.0 ]--
r 273         p
--[ 2022.11.21.21.49.40.273.0 ]--
r 273         ps
--[ 2022.11.21.21.49.40.570.0 ]--
r 273         psk
--[ 2022.11.21.21.49.40.786.0 ]--
r 273         pskd
--[ 2022.11.21.21.49.43.159.0 ]--
r 273         pskd.
--[ 2022.11.21.21.49.45.445.0 ]--
r 273         pskd.i
--[ 2022.11.21.21.49.45.578.0 ]--
r 273         pskd.in
--[ 2022.11.21.21.49.47.639.0 ]--
r 273         pskd.i
--[ 2022.11.21.21.49.47.761.0 ]--
r 273         pskd.
--[ 2022.11.21.21.49.48.549.0 ]--
r 273         pskd.p
--[ 2022.11.21.21.49.49.235.0 ]--
r 273         pskd.ps
--[ 2022.11.21.21.49.49.998.0 ]--
r 273         pskd.p
--[ 2022.11.21.21.49.50.332.0 ]--
r 273         pskd.pu
--[ 2022.11.21.21.49.51.268.0 ]--
r 273         pskd.put
--[ 2022.11.21.21.49.51.284.0 ]--
r 273         pskd.put()
--[ 2022.11.21.21.49.51.291.0 ]--
r 273         pskd.put();
--[ 2022.11.21.21.49.54.178.0 ]--
r 273         pskd.put(p);
--[ 2022.11.21.21.50.00.342.0 ]--
r 273         pskd.put(p,);
--[ 2022.11.21.21.50.00.510.0 ]--
r 273         pskd.put(p, );
--[ 2022.11.21.21.50.00.795.0 ]--
r 273         pskd.put(p, 1);
--[ 2022.11.21.21.50.00.861.0 ]--
r 273         pskd.put(p, 10);
--[ 2022.11.21.21.50.04.296.0 ]--
+ 274 
--[ 2022.11.21.21.50.05.365.0 ]--
+ 273         pskd.put(p, 10);
--[ 2022.11.21.21.50.05.656.0 ]--
+ 273         pskd.put(p, 10);
--[ 2022.11.21.21.50.07.671.0 ]--
r 274         pskd.put(p, 0);
--[ 2022.11.21.21.50.07.838.0 ]--
r 274         pskd.put(p, 20);
--[ 2022.11.21.21.50.08.660.0 ]--
r 275         pskd.put(p, 0);
--[ 2022.11.21.21.50.08.735.0 ]--
r 275         pskd.put(p, 20);
--[ 2022.11.21.21.50.09.198.0 ]--
r 275         pskd.put(p, 230);
--[ 2022.11.21.21.50.09.503.0 ]--
r 275         pskd.put(p, 20);
--[ 2022.11.21.21.50.09.597.0 ]--
r 275         pskd.put(p, 0);
--[ 2022.11.21.21.50.09.719.0 ]--
r 275         pskd.put(p, 30);
--[ 2022.11.21.21.50.11.685.0 ]--
r 274         pskd.put(, 20);
--[ 2022.11.21.21.50.11.750.0 ]--
r 274         pskd.put(t, 20);
--[ 2022.11.21.21.50.14.958.0 ]--
r 275         pskd.put(, 30);
--[ 2022.11.21.21.50.15.068.0 ]--
r 275         pskd.put(q, 30);
--[ 2022.11.21.21.50.37.591.0 ]--
+ 276         StdOut.println(bf.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.21.50.39.153.0 ]--
r 276         StdOut.println(b.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.21.50.39.254.0 ]--
r 276         StdOut.println(.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.21.50.39.867.0 ]--
r 276         StdOut.println(p.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.21.50.39.980.0 ]--
r 276         StdOut.println(ps.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.21.50.40.121.0 ]--
r 276         StdOut.println(psp.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.21.50.40.566.0 ]--
r 276         StdOut.println(ps.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.21.50.40.753.0 ]--
r 276         StdOut.println(psk.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.21.50.40.865.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (4.0,4.0)));
--[ 2022.11.21.21.50.45.466.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.50.49.832.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (.0,4.0)));
--[ 2022.11.21.21.50.49.932.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0.0,4.0)));
--[ 2022.11.21.21.50.52.432.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0.0,.0)));
--[ 2022.11.21.21.50.52.535.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0.0,0.0)));
--[ 2022.11.21.21.50.55.238.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.51.01.415.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0)));
--[ 2022.11.21.21.51.01.590.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0,)));
--[ 2022.11.21.21.51.01.734.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0,0)));
--[ 2022.11.21.21.51.04.455.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.51.26.651.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0,0),));
--[ 2022.11.21.21.51.27.372.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0,0),2));
--[ 2022.11.21.21.51.33.000.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.51.35.558.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0,0),));
--[ 2022.11.21.21.51.35.632.0 ]--
r 276         StdOut.println(pskd.nearest(new Point (0,0),0));
--[ 2022.11.21.21.51.38.051.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.51.53.737.0 ]--
+ 189         
--[ 2022.11.21.21.51.54.844.0 ]--
r 189         i
--[ 2022.11.21.21.51.54.985.0 ]--
r 189         if
--[ 2022.11.21.21.51.56.320.0 ]--
r 189         if()
--[ 2022.11.21.21.51.56.884.0 ]--
r 189         if(k)
--[ 2022.11.21.21.51.57.148.0 ]--
r 189         if(k )
--[ 2022.11.21.21.51.57.370.0 ]--
r 189         if(k =)
--[ 2022.11.21.21.51.57.478.0 ]--
r 189         if(k ==)
--[ 2022.11.21.21.51.57.625.0 ]--
r 189         if(k == )
--[ 2022.11.21.21.51.58.182.0 ]--
r 189         if(k == 0)
--[ 2022.11.21.21.52.09.311.0 ]--
r 189         if(k == 0) 
--[ 2022.11.21.21.52.09.521.0 ]--
r 189         if(k == 0) r
--[ 2022.11.21.21.52.09.614.0 ]--
r 189         if(k == 0) re
--[ 2022.11.21.21.52.09.752.0 ]--
r 189         if(k == 0) ret
--[ 2022.11.21.21.52.09.842.0 ]--
r 189         if(k == 0) retu
--[ 2022.11.21.21.52.09.985.0 ]--
r 189         if(k == 0) retur
--[ 2022.11.21.21.52.10.094.0 ]--
r 189         if(k == 0) return
--[ 2022.11.21.21.52.10.220.0 ]--
r 189         if(k == 0) return 
--[ 2022.11.21.21.52.10.468.0 ]--
r 189         if(k == 0) return n
--[ 2022.11.21.21.52.10.658.0 ]--
r 189         if(k == 0) return nu
--[ 2022.11.21.21.52.10.868.0 ]--
r 189         if(k == 0) return nul
--[ 2022.11.21.21.52.10.982.0 ]--
r 189         if(k == 0) return null
--[ 2022.11.21.21.52.13.813.0 ]--
r 189         if(k = 0) return null
--[ 2022.11.21.21.52.14.329.0 ]--
r 189         if(k <= 0) return null
--[ 2022.11.21.21.52.17.749.0 ]--
r 189         if(k <= 0) return null;
--[ 2022.11.21.21.52.20.354.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.52.55.616.0 ]--
r 209         i( ptpq.size() > k ) {
--[ 2022.11.21.21.52.55.670.0 ]--
r 209         if( ptpq.size() > k ) {
--[ 2022.11.21.21.53.00.830.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.53.07.385.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.53.33.640.0 ]--
r 189         /if(k <= 0) return null;
--[ 2022.11.21.21.53.33.783.0 ]--
r 189         //if(k <= 0) return null;
--[ 2022.11.21.21.53.38.153.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.55.26.397.0 ]--
r 194         /ptpq.insert(new PointDist(root.p, root.p.dist(p)));
--[ 2022.11.21.21.55.26.574.0 ]--
r 194         ptpq.insert(new PointDist(root.p, root.p.dist(p)));
--[ 2022.11.21.21.55.29.900.0 ]--
r 190         if(root == null) throw new NullPointerException("Null root has no nearest");
--[ 2022.11.21.21.55.34.625.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.56.09.171.0 ]--
:/src/NearestNeighborVisualizer.java
r 39         int k = ;
--[ 2022.11.21.21.56.09.641.0 ]--
r 39         int k = 2;
--[ 2022.11.21.21.56.13.204.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.21.56.36.021.0 ]--
:/src/PSKDTree.java
r 194 //        ptpq.insert(new PointDist(root.p, root.p.dist(p)));
--[ 2022.11.21.21.56.37.537.0 ]--
r 190 //        if(root == null) throw new NullPointerException("Null root has no nearest");
--[ 2022.11.21.21.56.52.298.0 ]--
:/src/NearestNeighborVisualizer.java
r 39         int k = ;
--[ 2022.11.21.21.56.52.384.0 ]--
r 39         int k = 0;
--[ 2022.11.21.21.56.54.775.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.00.10.265.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.00.16.657.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.00.50.831.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.03.36.016.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.03.52.327.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.05.27.362.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.07.08.253.0 ]--
:/src/PSKDTree.java
+ 156             
--[ 2022.11.21.22.07.09.133.0 ]--
r 156             e
--[ 2022.11.21.22.07.09.260.0 ]--
r 156             el
--[ 2022.11.21.22.07.09.376.0 ]--
r 156             els
--[ 2022.11.21.22.07.09.470.0 ]--
r 156             else
--[ 2022.11.21.22.07.10.101.0 ]--
r 156             else 
--[ 2022.11.21.22.07.10.257.0 ]--
r 156             else i
--[ 2022.11.21.22.07.10.358.0 ]--
r 156             else if
--[ 2022.11.21.22.07.11.393.0 ]--
r 156             else if 
--[ 2022.11.21.22.07.11.612.0 ]--
r 156             else if {
--[ 2022.11.21.22.07.11.870.0 ]--
+ 157 
+ 158 }
--[ 2022.11.21.22.07.11.918.0 ]--
r 158             }
--[ 2022.11.21.22.07.11.936.0 ]--
r 157                 
--[ 2022.11.21.22.07.15.520.0 ]--
r 156             else if{
--[ 2022.11.21.22.07.16.135.0 ]--
r 156             else if(){
--[ 2022.11.21.22.07.16.568.0 ]--
r 156             else if() {
--[ 2022.11.21.22.07.19.905.0 ]--
r 156             else if(p) {
--[ 2022.11.21.22.07.20.298.0 ]--
r 156             else if(p.) {
--[ 2022.11.21.22.07.20.474.0 ]--
r 156             else if(p.x) {
--[ 2022.11.21.22.07.21.696.0 ]--
r 156             else if(p.x()) {
--[ 2022.11.21.22.07.22.261.0 ]--
r 156             else if(p.x() ) {
--[ 2022.11.21.22.07.22.769.0 ]--
r 156             else if(p.x() >) {
--[ 2022.11.21.22.07.23.145.0 ]--
r 156             else if(p.x() > ) {
--[ 2022.11.21.22.07.23.810.0 ]--
r 156             else if(p.x() > c) {
--[ 2022.11.21.22.07.23.936.0 ]--
r 156             else if(p.x() > cu) {
--[ 2022.11.21.22.07.24.166.0 ]--
r 156             else if(p.x() > cur) {
--[ 2022.11.21.22.07.24.300.0 ]--
r 156             else if(p.x() > curr) {
--[ 2022.11.21.22.07.24.436.0 ]--
r 156             else if(p.x() > curre) {
--[ 2022.11.21.22.07.24.620.0 ]--
r 156             else if(p.x() > curren) {
--[ 2022.11.21.22.07.24.750.0 ]--
r 156             else if(p.x() > current) {
--[ 2022.11.21.22.07.24.998.0 ]--
r 156             else if(p.x() > current.) {
--[ 2022.11.21.22.07.26.233.0 ]--
r 156             else if(p.x() > current.p) {
--[ 2022.11.21.22.07.26.724.0 ]--
r 156             else if(p.x() > current.p.) {
--[ 2022.11.21.22.07.26.905.0 ]--
r 156             else if(p.x() > current.p.x) {
--[ 2022.11.21.22.07.27.578.0 ]--
r 156             else if(p.x() > current.p.x()) {
--[ 2022.11.21.22.07.29.928.0 ]--
r 156             else if(p.x()  current.p.x()) {
--[ 2022.11.21.22.07.30.269.0 ]--
r 156             else if(p.x() = current.p.x()) {
--[ 2022.11.21.22.07.30.377.0 ]--
r 156             else if(p.x() == current.p.x()) {
--[ 2022.11.21.22.07.37.037.0 ]--
r 157                 i
--[ 2022.11.21.22.07.37.070.0 ]--
r 157                 if
--[ 2022.11.21.22.07.38.091.0 ]--
r 157                 if 
--[ 2022.11.21.22.07.38.229.0 ]--
r 157                 if p
--[ 2022.11.21.22.07.38.914.0 ]--
r 157                 if 
--[ 2022.11.21.22.07.39.052.0 ]--
r 157                 if
--[ 2022.11.21.22.07.39.538.0 ]--
r 157                 if()
--[ 2022.11.21.22.07.39.932.0 ]--
r 157                 if(p)
--[ 2022.11.21.22.07.40.184.0 ]--
r 157                 if(p.)
--[ 2022.11.21.22.07.40.450.0 ]--
r 157                 if(p.y)
--[ 2022.11.21.22.07.41.128.0 ]--
r 157                 if(p.y())
--[ 2022.11.21.22.07.41.812.0 ]--
r 157                 if(p.y() )
--[ 2022.11.21.22.07.59.620.0 ]--
r 157                 if(p.y())
--[ 2022.11.21.22.07.59.918.0 ]--
r 157                 if(p.y()
--[ 2022.11.21.22.08.00.062.0 ]--
r 157                 if(p.y)
--[ 2022.11.21.22.08.00.184.0 ]--
r 157                 if(p.)
--[ 2022.11.21.22.08.00.298.0 ]--
r 157                 if(p)
--[ 2022.11.21.22.08.00.418.0 ]--
r 157                 if()
--[ 2022.11.21.22.08.00.668.0 ]--
r 157                 if
--[ 2022.11.21.22.08.00.816.0 ]--
r 157                 i
--[ 2022.11.21.22.08.01.381.0 ]--
r 157                 
--[ 2022.11.21.22.08.01.783.0 ]--
r 157                 c
--[ 2022.11.21.22.08.01.887.0 ]--
r 157                 cu
--[ 2022.11.21.22.08.02.061.0 ]--
r 157                 cur
--[ 2022.11.21.22.08.02.188.0 ]--
r 157                 curr
--[ 2022.11.21.22.08.02.283.0 ]--
r 157                 curre
--[ 2022.11.21.22.08.02.405.0 ]--
r 157                 curren
--[ 2022.11.21.22.08.02.511.0 ]--
r 157                 current
--[ 2022.11.21.22.08.02.706.0 ]--
r 157                 current.
--[ 2022.11.21.22.08.03.165.0 ]--
r 157                 current
--[ 2022.11.21.22.08.03.438.0 ]--
r 157                 currentN
--[ 2022.11.21.22.08.03.803.0 ]--
r 157                 currentNear
--[ 2022.11.21.22.08.06.089.0 ]--
r 157                 currentNear 
--[ 2022.11.21.22.08.06.577.0 ]--
r 157                 currentNear =
--[ 2022.11.21.22.08.06.754.0 ]--
r 157                 currentNear = 
--[ 2022.11.21.22.08.14.693.0 ]--
r 157                 currentNear = = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.08.19.119.0 ]--
+ 158                 
--[ 2022.11.21.22.08.19.665.0 ]--
+ 158                                 currentNear = = nearest(current.right, p, currentNear, nearDist);
r 159 
--[ 2022.11.21.22.08.19.682.0 ]--
r 158                 currentNear = = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.08.21.261.0 ]--
r 157                 currentNear == nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.08.21.371.0 ]--
r 157                 currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.08.22.538.0 ]--
r 158                 currentNear == nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.08.22.644.0 ]--
r 158                 currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.08.24.072.0 ]--
- 159
--[ 2022.11.21.22.08.41.128.0 ]--
+ 173                 currentNear = nearest(current.right, p, currentNear, nearDist);
+ 174             }            else if(p.x() == current.p.x()) {
+ 175                 currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.08.43.495.0 ]--
+ 174             }            
r 175             else if(p.x() == current.p.x()) {
--[ 2022.11.21.22.08.46.118.0 ]--
r 175             else if(p.() == current.p.x()) {
--[ 2022.11.21.22.08.46.268.0 ]--
r 175             else if(p.y() == current.p.x()) {
--[ 2022.11.21.22.08.48.062.0 ]--
r 175             else if(p.y() == current.p.()) {
--[ 2022.11.21.22.08.48.146.0 ]--
r 175             else if(p.y() == current.p.y()) {
--[ 2022.11.21.22.08.51.680.0 ]--
r 176                 currentNear = nearest(current.l, p, currentNear, nearDist);
--[ 2022.11.21.22.08.51.768.0 ]--
r 176                 currentNear = nearest(current.le, p, currentNear, nearDist);
--[ 2022.11.21.22.08.51.817.0 ]--
r 176                 currentNear = nearest(current.lef, p, currentNear, nearDist);
--[ 2022.11.21.22.08.52.032.0 ]--
r 176                 currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.08.57.121.0 ]--
r 158                 currentNear = nearest(current.l, p, currentNear, nearDist);
--[ 2022.11.21.22.08.57.318.0 ]--
r 158                 currentNear = nearest(current.le, p, currentNear, nearDist);
--[ 2022.11.21.22.08.57.505.0 ]--
r 158                 currentNear = nearest(current.lef, p, currentNear, nearDist);
--[ 2022.11.21.22.08.57.716.0 ]--
r 158                 currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.09.16.874.0 ]--
r 174             }
--[ 2022.11.21.22.09.17.737.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.10.24.909.0 ]--
r 185             /if (nearDist > partDist) {
--[ 2022.11.21.22.10.25.028.0 ]--
r 185             //if (nearDist > partDist) {
--[ 2022.11.21.22.10.28.210.0 ]--
r 188             /}
--[ 2022.11.21.22.10.28.340.0 ]--
r 188             //}
--[ 2022.11.21.22.10.30.660.0 ]--
r 169             /}
--[ 2022.11.21.22.10.30.836.0 ]--
r 169             //}
--[ 2022.11.21.22.10.31.996.0 ]--
r 166             /if (nearDist > partDist) {
--[ 2022.11.21.22.10.32.150.0 ]--
r 166             //if (nearDist > partDist) {
--[ 2022.11.21.22.10.37.253.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.11.27.410.0 ]--
r 168                 else cnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.27.570.0 ]--
r 168                 else cunearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.27.667.0 ]--
r 168                 else curnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.27.795.0 ]--
r 168                 else currnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.28.017.0 ]--
r 168                 else currenearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.28.165.0 ]--
r 168                 else currennearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.28.310.0 ]--
r 168                 else currentnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.28.663.0 ]--
r 168                 else currentNnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.28.816.0 ]--
r 168                 else currentNenearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.28.955.0 ]--
r 168                 else currentNeanearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.29.026.0 ]--
r 168                 else currentNearnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.29.444.0 ]--
r 168                 else currentNear nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.29.578.0 ]--
r 168                 else currentNear =nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.29.690.0 ]--
r 168                 else currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.31.692.0 ]--
r 167                 if (p.x() > current.p.x()) cnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.31.826.0 ]--
r 167                 if (p.x() > current.p.x()) cunearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.31.982.0 ]--
r 167                 if (p.x() > current.p.x()) curnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.32.103.0 ]--
r 167                 if (p.x() > current.p.x()) currnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.32.210.0 ]--
r 167                 if (p.x() > current.p.x()) currenearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.32.320.0 ]--
r 167                 if (p.x() > current.p.x()) currennearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.32.458.0 ]--
r 167                 if (p.x() > current.p.x()) currentnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.32.983.0 ]--
r 167             if (p.x() > current.p.x()) currentnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.34.811.0 ]--
r 167             if (p.x() > current.p.x()) currentNnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.35.093.0 ]--
r 167             if (p.x() > current.p.x()) currentNenearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.35.218.0 ]--
r 167             if (p.x() > current.p.x()) currentNeanearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.35.295.0 ]--
r 167             if (p.x() > current.p.x()) currentNearnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.36.120.0 ]--
r 167             if (p.x() > current.p.x()) currentNear nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.36.217.0 ]--
r 167             if (p.x() > current.p.x()) currentNear =nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.36.301.0 ]--
r 167             if (p.x() > current.p.x()) currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.40.167.0 ]--
r 186                 if (p.y() > current.p.y()) cnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.40.283.0 ]--
r 186                 if (p.y() > current.p.y()) cunearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.40.644.0 ]--
r 186                 if (p.y() > current.p.y()) curnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.40.776.0 ]--
r 186                 if (p.y() > current.p.y()) currnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.40.889.0 ]--
r 186                 if (p.y() > current.p.y()) currenearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.41.020.0 ]--
r 186                 if (p.y() > current.p.y()) currennearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.41.131.0 ]--
r 186                 if (p.y() > current.p.y()) currentnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.41.434.0 ]--
r 186                 if (p.y() > current.p.y()) currentNnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.42.077.0 ]--
r 186                 if (p.y() > current.p.y()) currentNearnearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.42.083.0 ]--
r 186                 if (p.y() > current.p.y()) currentNear(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.42.876.0 ]--
r 186                 if (p.y() > current.p.y()) currentNear (current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.43.000.0 ]--
r 186                 if (p.y() > current.p.y()) currentNear =(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.43.110.0 ]--
r 186                 if (p.y() > current.p.y()) currentNear = (current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.11.44.651.0 ]--
r 187                 else cnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.44.767.0 ]--
r 187                 else cunearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.44.934.0 ]--
r 187                 else curnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.45.092.0 ]--
r 187                 else currnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.45.223.0 ]--
r 187                 else currenearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.45.348.0 ]--
r 187                 else currennearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.45.444.0 ]--
r 187                 else currentnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.45.694.0 ]--
r 187                 else currentNnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.45.827.0 ]--
r 187                 else currentNenearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.45.954.0 ]--
r 187                 else currentNeanearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.46.035.0 ]--
r 187                 else currentNearnearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.46.310.0 ]--
r 187                 else currentNear nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.46.532.0 ]--
r 187                 else currentNear =nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.46.608.0 ]--
r 187                 else currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.11.48.838.0 ]--
r 185             if (nearDist > partDist) {
--[ 2022.11.21.22.11.50.613.0 ]--
r 188             }
--[ 2022.11.21.22.11.52.783.0 ]--
r 169             ///}
--[ 2022.11.21.22.11.53.532.0 ]--
r 169             /}
--[ 2022.11.21.22.11.55.511.0 ]--
r 169             }
--[ 2022.11.21.22.11.57.815.0 ]--
r 166             if (nearDist > partDist) {
--[ 2022.11.21.22.11.58.635.0 ]--
r 167                 if (p.x() > current.p.x()) currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.12.18.700.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = (current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.12.53.593.0 ]--
r 182             double partDist = current.p.y() - p.y();)
--[ 2022.11.21.22.12.58.503.0 ]--
r 182             double partDist = current.p.y() - p.y();
--[ 2022.11.21.22.13.20.514.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = (current.left, p, currentNear, nearDist));
--[ 2022.11.21.22.13.22.599.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = (current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.13.23.064.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = (current.left, p, currentNear, nearDist;
--[ 2022.11.21.22.13.43.365.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = (current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.13.51.009.0 ]--
r 185 //            if (nearDist > partDist) {
r 186 //                if(p.y() > current.p.y()) currentNear = (current.left, p, currentNear, nearDist);
r 187 //                else currentNear = nearest(current.right, p, currentNear, nearDist);
r 188 //            }
--[ 2022.11.21.22.14.01.354.0 ]--
+ 189 
--[ 2022.11.21.22.14.01.387.0 ]--
r 189             
--[ 2022.11.21.22.14.02.118.0 ]--
+ 189                         if (nearDist > partDist) {
+ 190                 if (p.x() > current.p.x()) currentNear = nearest(current.left, p, currentNear, nearDist);
+ 191                 else currentNear = nearest(current.right, p, currentNear, nearDist);
r 192             }
--[ 2022.11.21.22.14.02.135.0 ]--
r 189             if (nearDist > partDist) {
--[ 2022.11.21.22.14.06.841.0 ]--
r 190                 if (p.() > current.p.x()) currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.06.936.0 ]--
r 190                 if (p.y() > current.p.x()) currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.09.121.0 ]--
r 190                 if (p.y() > current.p.()) currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.09.214.0 ]--
r 190                 if (p.y() > current.p.y()) currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.37.103.0 ]--
r 185             if (nearDist > partDist) {
r 186                 if(p.y() > current.p.y()) currentNear = (current.left, p, currentNear, nearDist);
r 187                 else currentNear = nearest(current.right, p, currentNear, nearDist);
r 188             }
--[ 2022.11.21.22.14.38.944.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = n(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.39.065.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = ne(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.39.164.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = nea(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.39.257.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = near(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.39.408.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = neare(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.39.598.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = neares(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.39.744.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.14.44.030.0 ]--
- 189
- 189
- 189
r 189 
--[ 2022.11.21.22.14.44.386.0 ]--
- 189
--[ 2022.11.21.22.14.51.503.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.15.45.390.0 ]--
r 186                 if(p.y() > current.p.y())  nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.15.48.363.0 ]--
r 187                 else nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.15.50.324.0 ]--
r 186                 if(p.y() > current.p.y()) nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.16.03.914.0 ]--
r 167                 if (p.x() > current.p.x())  nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.16.05.874.0 ]--
r 168                 else nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.16.07.610.0 ]--
r 167                 if (p.x() > current.p.x()) nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.16.13.887.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.16.30.637.0 ]--
r 173                 nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.16.32.981.0 ]--
r 176                  nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.16.35.435.0 ]--
r 177                 nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.16.36.704.0 ]--
r 176                 nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.16.41.786.0 ]--
r 154                 nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.16.43.995.0 ]--
r 157                 nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.16.46.387.0 ]--
r 158                 nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.16.48.987.0 ]--
r 160             else nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.17.04.358.0 ]--
r 179             else nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.17.30.482.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.17.55.391.0 ]--
r 179             else currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.17.56.583.0 ]--
r 160             else currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.17.57.270.0 ]--
r 158                 currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.17.57.813.0 ]--
r 157                 currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.17.58.359.0 ]--
r 154                 currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.17.59.827.0 ]--
r 176                  nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.18.00.437.0 ]--
r 177                 currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.18.01.125.0 ]--
r 176                 currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.18.02.334.0 ]--
r 173                 currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.18.04.566.0 ]--
r 167                 if (p.x() > current.p.x())  nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.18.05.906.0 ]--
r 168                 else currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.18.07.002.0 ]--
r 167                 if (p.x() > current.p.x()) currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.18.09.478.0 ]--
r 186                 if(p.y() > current.p.y())  nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.18.10.421.0 ]--
r 187                 else currentNear = nearest(current.right, p, currentNear, nearDist);
--[ 2022.11.21.22.18.12.063.0 ]--
r 186                 if(p.y() > current.p.y()) currentNear = nearest(current.left, p, currentNear, nearDist);
--[ 2022.11.21.22.18.14.448.0 ]--
+ 189 
--[ 2022.11.21.22.18.15.570.0 ]--
+ 189             if (nearDist > partDist) {
+ 190                 if (p.y() > current.p.y()) currentNear = nearest(current.left, p, currentNear, nearDist);
+ 191                 else currentNear = nearest(current.right, p, currentNear, nearDist);
r 192             }
--[ 2022.11.21.22.18.16.823.0 ]--
- 189
- 189
- 189
r 189 
--[ 2022.11.21.22.18.17.515.0 ]--
- 189
--[ 2022.11.21.22.18.23.546.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.20.13.596.0 ]--
+ 138     
--[ 2022.11.21.22.20.15.584.0 ]--
r 138     d
--[ 2022.11.21.22.20.15.636.0 ]--
r 138     do
--[ 2022.11.21.22.20.15.748.0 ]--
r 138     dou
--[ 2022.11.21.22.20.15.936.0 ]--
r 138     doub
--[ 2022.11.21.22.20.16.050.0 ]--
r 138     doubl
--[ 2022.11.21.22.20.16.178.0 ]--
r 138     double
--[ 2022.11.21.22.20.16.896.0 ]--
r 138     double 
--[ 2022.11.21.22.20.17.207.0 ]--
r 138     double n
--[ 2022.11.21.22.20.17.333.0 ]--
r 138     double ne
--[ 2022.11.21.22.20.17.453.0 ]--
r 138     double nea
--[ 2022.11.21.22.20.17.533.0 ]--
r 138     double near
--[ 2022.11.21.22.20.17.953.0 ]--
r 138     double nearD
--[ 2022.11.21.22.20.18.390.0 ]--
r 138     double nearDi
--[ 2022.11.21.22.20.18.401.0 ]--
r 138     double nearDis
--[ 2022.11.21.22.20.18.541.0 ]--
r 138     double nearDist
--[ 2022.11.21.22.20.21.021.0 ]--
r 138     double nearDist;
--[ 2022.11.21.22.20.21.907.0 ]--
r 138     double nearDist
--[ 2022.11.21.22.20.22.088.0 ]--
r 138     double nearDist 
--[ 2022.11.21.22.20.22.216.0 ]--
r 138     double nearDist =
--[ 2022.11.21.22.20.22.371.0 ]--
r 138     double nearDist = 
--[ 2022.11.21.22.20.22.507.0 ]--
r 138     double nearDist = 0
--[ 2022.11.21.22.20.22.845.0 ]--
r 138     double nearDist = 0;
--[ 2022.11.21.22.20.28.637.0 ]--
r 138     double n = 0;
--[ 2022.11.21.22.20.28.900.0 ]--
r 138     double nD = 0;
--[ 2022.11.21.22.20.36.568.0 ]--
+ 142         
--[ 2022.11.21.22.20.40.127.0 ]--
r 143         return nearest(root, p, root.p, );
--[ 2022.11.21.22.20.41.389.0 ]--
r 142         root.p.dist(p)
--[ 2022.11.21.22.20.42.721.0 ]--
r 142         root.p.dist(p);
--[ 2022.11.21.22.20.44.241.0 ]--
r 142         nroot.p.dist(p);
--[ 2022.11.21.22.20.44.499.0 ]--
r 142         nDroot.p.dist(p);
--[ 2022.11.21.22.20.44.817.0 ]--
r 142         nD root.p.dist(p);
--[ 2022.11.21.22.20.45.195.0 ]--
r 142         nD =root.p.dist(p);
--[ 2022.11.21.22.20.45.302.0 ]--
r 142         nD = root.p.dist(p);
--[ 2022.11.21.22.20.47.195.0 ]--
r 143         return nearest(root, p, root.p,  );
--[ 2022.11.21.22.20.47.373.0 ]--
r 143         return nearest(root, p, root.p, n );
--[ 2022.11.21.22.20.47.669.0 ]--
r 143         return nearest(root, p, root.p, nD );
--[ 2022.11.21.22.20.56.262.0 ]--
r 151             nD = current.p.dist(p);
--[ 2022.11.21.22.20.58.041.0 ]--
r 156                 currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.20.58.969.0 ]--
r 159                 currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.20.59.652.0 ]--
r 160                 currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.21.01.384.0 ]--
r 162             else currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.21.03.540.0 ]--
r 170                 else currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.21.06.091.0 ]--
r 169                 if (p.x() > current.p.x()) currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.21.07.935.0 ]--
r 175                 currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.21.08.993.0 ]--
r 178                 currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.21.09.792.0 ]--
r 179                 currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.21.11.495.0 ]--
r 181             else currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.21.19.974.0 ]--
r 188                 if(p.y() > current.p.y()) currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.21.20.741.0 ]--
r 189                 else currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.21.28.605.0 ]--
r 187             if (nD > partDist) {
--[ 2022.11.21.22.21.32.422.0 ]--
r 168             if (nD > partDist) {
--[ 2022.11.21.22.21.47.427.0 ]--
r 149         if(current.p.dist(p) < nD) {      //get distance to the query point from the partition point)
--[ 2022.11.21.22.22.08.324.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.25.15.072.0 ]--
r 145     private PointD nearest(Node current, Point p, Point currentNear, double nearDist) {
--[ 2022.11.21.22.25.15.383.0 ]--
r 145     private PointDi nearest(Node current, Point p, Point currentNear, double nearDist) {
--[ 2022.11.21.22.25.15.456.0 ]--
r 145     private PointDis nearest(Node current, Point p, Point currentNear, double nearDist) {
--[ 2022.11.21.22.25.15.640.0 ]--
r 145     private PointDist nearest(Node current, Point p, Point currentNear, double nearDist) {
--[ 2022.11.21.22.25.17.996.0 ]--
+ 145     
--[ 2022.11.21.22.25.19.287.0 ]--
r 145     /
--[ 2022.11.21.22.25.19.424.0 ]--
r 145     //
--[ 2022.11.21.22.25.19.681.0 ]--
r 145     //t
--[ 2022.11.21.22.25.19.772.0 ]--
r 145     //th
--[ 2022.11.21.22.25.19.868.0 ]--
r 145     //thi
--[ 2022.11.21.22.25.19.942.0 ]--
r 145     //this
--[ 2022.11.21.22.25.20.089.0 ]--
r 145     //this 
--[ 2022.11.21.22.25.20.332.0 ]--
r 145     //this r
--[ 2022.11.21.22.25.20.352.0 ]--
r 145     //this re
--[ 2022.11.21.22.25.20.550.0 ]--
r 145     //this ret
--[ 2022.11.21.22.25.20.660.0 ]--
r 145     //this retu
--[ 2022.11.21.22.25.20.773.0 ]--
r 145     //this retur
--[ 2022.11.21.22.25.20.868.0 ]--
r 145     //this return
--[ 2022.11.21.22.25.21.020.0 ]--
r 145     //this returns
--[ 2022.11.21.22.25.21.162.0 ]--
r 145     //this returns 
--[ 2022.11.21.22.25.21.287.0 ]--
r 145     //this returns a
--[ 2022.11.21.22.25.21.394.0 ]--
r 145     //this returns a 
--[ 2022.11.21.22.25.21.664.0 ]--
r 145     //this returns a p
--[ 2022.11.21.22.25.21.822.0 ]--
r 145     //this returns a po
--[ 2022.11.21.22.25.21.967.0 ]--
r 145     //this returns a poi
--[ 2022.11.21.22.25.22.121.0 ]--
r 145     //this returns a poin
--[ 2022.11.21.22.25.22.241.0 ]--
r 145     //this returns a point
--[ 2022.11.21.22.25.22.424.0 ]--
r 145     //this returns a point 
--[ 2022.11.21.22.25.22.637.0 ]--
r 145     //this returns a point d
--[ 2022.11.21.22.25.22.769.0 ]--
r 145     //this returns a point di
--[ 2022.11.21.22.25.23.097.0 ]--
r 145     //this returns a point d
--[ 2022.11.21.22.25.23.225.0 ]--
r 145     //this returns a point 
--[ 2022.11.21.22.25.23.344.0 ]--
r 145     //this returns a point
--[ 2022.11.21.22.25.23.756.0 ]--
r 145     //this returns a pointD
--[ 2022.11.21.22.25.23.953.0 ]--
r 145     //this returns a pointDi
--[ 2022.11.21.22.25.24.073.0 ]--
r 145     //this returns a pointDis
--[ 2022.11.21.22.25.24.204.0 ]--
r 145     //this returns a pointDist
--[ 2022.11.21.22.25.24.535.0 ]--
r 145     //this returns a pointDist 
--[ 2022.11.21.22.25.24.701.0 ]--
r 145     //this returns a pointDist s
--[ 2022.11.21.22.25.24.769.0 ]--
r 145     //this returns a pointDist so
--[ 2022.11.21.22.25.24.884.0 ]--
r 145     //this returns a pointDist so 
--[ 2022.11.21.22.25.25.324.0 ]--
r 145     //this returns a pointDist so y
--[ 2022.11.21.22.25.26.304.0 ]--
r 145     //this returns a pointDist so 
--[ 2022.11.21.22.25.27.886.0 ]--
r 145     //this returns a pointDist so t
--[ 2022.11.21.22.25.28.024.0 ]--
r 145     //this returns a pointDist so th
--[ 2022.11.21.22.25.28.037.0 ]--
r 145     //this returns a pointDist so tha
--[ 2022.11.21.22.25.28.238.0 ]--
r 145     //this returns a pointDist so that
--[ 2022.11.21.22.25.30.135.0 ]--
r 145     //this returns a pointDist so that 
--[ 2022.11.21.22.25.30.404.0 ]--
r 145     //this returns a pointDist so that w
--[ 2022.11.21.22.25.30.487.0 ]--
r 145     //this returns a pointDist so that we
--[ 2022.11.21.22.25.30.659.0 ]--
r 145     //this returns a pointDist so that we 
--[ 2022.11.21.22.25.30.830.0 ]--
r 145     //this returns a pointDist so that we c
--[ 2022.11.21.22.25.31.006.0 ]--
r 145     //this returns a pointDist so that we ca
--[ 2022.11.21.22.25.31.104.0 ]--
r 145     //this returns a pointDist so that we can
--[ 2022.11.21.22.25.31.232.0 ]--
r 145     //this returns a pointDist so that we can 
--[ 2022.11.21.22.25.36.413.0 ]--
r 146     private Point nearest(Node current, Point p, Point currentNear, double nearDist) {
--[ 2022.11.21.22.25.53.623.0 ]--
r 138     double nD = ;
--[ 2022.11.21.22.25.53.738.0 ]--
r 138     double nD =;
--[ 2022.11.21.22.25.53.873.0 ]--
r 138     double nD ;
--[ 2022.11.21.22.25.54.323.0 ]--
r 138     double nD;
--[ 2022.11.21.22.26.00.073.0 ]--
r 145     //this returns a pointDist so that we can
--[ 2022.11.21.22.26.01.000.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.26.13.104.0 ]--
:/src/NearestNeighborVisualizer.java
r 39         int k = ;
--[ 2022.11.21.22.26.13.199.0 ]--
r 39         int k = 4;
--[ 2022.11.21.22.26.16.741.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.26.25.496.0 ]--
r 39         int k = 41;
--[ 2022.11.21.22.26.25.543.0 ]--
r 39         int k = 4;
--[ 2022.11.21.22.26.25.790.0 ]--
r 39         int k = ;
--[ 2022.11.21.22.26.26.179.0 ]--
r 39         int k = 1;
--[ 2022.11.21.22.26.28.509.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.26.48.827.0 ]--
:/src/PSKDTree.java
r 146     private Point nearest(Node current, Point p, Point currentNear) {
--[ 2022.11.21.22.26.51.826.0 ]--
r 143         return nearest(root, p, root.p);
--[ 2022.11.21.22.26.55.973.0 ]--
r 157                 currentNear = nearest(current.right, p, currentNear;
--[ 2022.11.21.22.26.59.282.0 ]--
r 160                 currentNear = nearest(current.right, p, currentNear,;
--[ 2022.11.21.22.26.59.389.0 ]--
r 160                 currentNear = nearest(current.right, p, currentNear;
--[ 2022.11.21.22.27.01.927.0 ]--
r 161                 currentNear = nearest(current.left, p, currentNear);
--[ 2022.11.21.22.27.03.475.0 ]--
r 163             else currentNear = nearest(current.left, p, currentNear, );
--[ 2022.11.21.22.27.03.587.0 ]--
r 163             else currentNear = nearest(current.left, p, currentNear,);
--[ 2022.11.21.22.27.03.707.0 ]--
r 163             else currentNear = nearest(current.left, p, currentNear);
--[ 2022.11.21.22.27.06.941.0 ]--
r 170                 if (p.x() > current.p.x()) currentNear = nearest(current.left, p, currentNear);
--[ 2022.11.21.22.27.10.428.0 ]--
r 171                 else currentNear = nearest(current.right, p, currentNear);
--[ 2022.11.21.22.27.13.895.0 ]--
r 176                 currentNear = nearest(current.right, p, currentNear);
--[ 2022.11.21.22.27.16.226.0 ]--
r 179                 currentNear = nearest(current.left, p, currentNear);
--[ 2022.11.21.22.27.18.462.0 ]--
r 180                 currentNear = nearest(current.right, p, currentNear);
--[ 2022.11.21.22.27.20.910.0 ]--
r 182             else currentNear = nearest(current.left, p, currentNear);
--[ 2022.11.21.22.27.24.772.0 ]--
r 189                 if(p.y() > current.p.y()) currentNear = nearest(current.left, p, currentNear);
--[ 2022.11.21.22.27.27.540.0 ]--
r 190                 else currentNear = nearest(current.right, p, currentNear,);
--[ 2022.11.21.22.27.27.999.0 ]--
r 190                 else currentNear = nearest(current.right, p, currentNear);
--[ 2022.11.21.22.27.47.203.0 ]--
r 157                 currentNear = nearest(current.right, p, currentNear);
--[ 2022.11.21.22.27.48.974.0 ]--
r 160                 currentNear = nearest(current.right, p, currentNear);
--[ 2022.11.21.22.30.02.881.0 ]--
r 160                 currentNear = nearest(current.right, p, currentNear;
--[ 2022.11.21.22.30.03.247.0 ]--
r 157                 currentNear = nearest(current.right, p, currentNear;
--[ 2022.11.21.22.30.03.581.0 ]--
r 190                 else currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.30.03.930.0 ]--
r 189                 if(p.y() > current.p.y()) currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.30.04.298.0 ]--
r 182             else currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.30.04.648.0 ]--
r 180                 currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.30.05.012.0 ]--
r 179                 currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.30.05.377.0 ]--
r 176                 currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.30.05.787.0 ]--
r 171                 else currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.30.06.212.0 ]--
r 170                 if (p.x() > current.p.x()) currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.30.07.611.0 ]--
r 163             else currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.30.08.755.0 ]--
r 161                 currentNear = nearest(current.left, p, currentNear, nD);
--[ 2022.11.21.22.30.09.543.0 ]--
r 160                 currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.30.10.264.0 ]--
r 157                 currentNear = nearest(current.right, p, currentNear, nD);
--[ 2022.11.21.22.30.11.739.0 ]--
r 143         return nearest(root, p, root.p, nD );
--[ 2022.11.21.22.30.13.250.0 ]--
r 146     private Point nearest(Node current, Point p, Point currentNear, double nearDist) {
--[ 2022.11.21.22.30.21.347.0 ]--
- 138
--[ 2022.11.21.22.30.25.577.0 ]--
r 141         PnD = root.p.dist(p);
--[ 2022.11.21.22.30.26.206.0 ]--
r 141         PoinD = root.p.dist(p);
--[ 2022.11.21.22.30.26.760.0 ]--
r 141         PoinnD = root.p.dist(p);
--[ 2022.11.21.22.30.26.906.0 ]--
r 141         PointnD = root.p.dist(p);
--[ 2022.11.21.22.30.27.279.0 ]--
r 141         PointDnD = root.p.dist(p);
--[ 2022.11.21.22.30.27.489.0 ]--
r 141         PointDinD = root.p.dist(p);
--[ 2022.11.21.22.30.27.594.0 ]--
r 141         PointDisnD = root.p.dist(p);
--[ 2022.11.21.22.30.27.717.0 ]--
r 141         PointDistnD = root.p.dist(p);
--[ 2022.11.21.22.30.28.093.0 ]--
r 141         PointDist nD = root.p.dist(p);
--[ 2022.11.21.22.30.30.650.0 ]--
r 141         PointDist nD = nroot.p.dist(p);
--[ 2022.11.21.22.30.30.748.0 ]--
r 141         PointDist nD = neroot.p.dist(p);
--[ 2022.11.21.22.30.30.848.0 ]--
r 141         PointDist nD = newroot.p.dist(p);
--[ 2022.11.21.22.30.31.211.0 ]--
r 141         PointDist nD = newProot.p.dist(p);
--[ 2022.11.21.22.30.31.970.0 ]--
r 141         PointDist nD = newP root.p.dist(p);
--[ 2022.11.21.22.30.33.073.0 ]--
r 141         PointDist nD = newProot.p.dist(p);
--[ 2022.11.21.22.30.33.167.0 ]--
r 141         PointDist nD = newroot.p.dist(p);
--[ 2022.11.21.22.30.33.461.0 ]--
r 141         PointDist nD = new root.p.dist(p);
--[ 2022.11.21.22.30.33.723.0 ]--
r 141         PointDist nD = new Proot.p.dist(p);
--[ 2022.11.21.22.30.34.379.0 ]--
r 141         PointDist nD = new PointDistroot.p.dist(p);
--[ 2022.11.21.22.30.34.384.0 ]--
r 141         PointDist nD = new PointDist.p.dist(p);
--[ 2022.11.21.22.30.34.388.0 ]--
r 141         PointDist nD = new PointDist(p);
--[ 2022.11.21.22.30.36.414.0 ]--
r 141         PointDist nD = new Proot.p.dist(p);
--[ 2022.11.21.22.30.37.889.0 ]--
r 141         PointDist nD = new P root.p.dist(p);
--[ 2022.11.21.22.30.39.161.0 ]--
r 141         PointDist nD = new Po root.p.dist(p);
--[ 2022.11.21.22.30.39.275.0 ]--
r 141         PointDist nD = new Poi root.p.dist(p);
--[ 2022.11.21.22.30.39.895.0 ]--
r 141         PointDist nD = new PointDist root.p.dist(p);
--[ 2022.11.21.22.30.39.910.0 ]--
r 141         PointDist nD = new PointDist() root.p.dist(p);
--[ 2022.11.21.22.30.41.363.0 ]--
r 141         PointDist nD = new PointDist( root.p.dist(p);
--[ 2022.11.21.22.30.41.722.0 ]--
r 141         PointDist nD = new PointDist root.p.dist(p);
--[ 2022.11.21.22.30.42.703.0 ]--
r 141         PointDist nD = new PointDist() root.p.dist(p);
--[ 2022.11.21.22.30.43.281.0 ]--
r 141         PointDist nD = new PointDist( root.p.dist(p);
--[ 2022.11.21.22.30.44.186.0 ]--
r 141         PointDist nD = new PointDist(root.p.dist(p);
--[ 2022.11.21.22.30.46.512.0 ]--
r 141         PointDist nD = new PointDist(root.p.dist(p),;
--[ 2022.11.21.22.30.46.650.0 ]--
r 141         PointDist nD = new PointDist(root.p.dist(p), ;
--[ 2022.11.21.22.30.47.219.0 ]--
r 141         PointDist nD = new PointDist(root.p.dist(p),;
--[ 2022.11.21.22.30.47.329.0 ]--
r 141         PointDist nD = new PointDist(root.p.dist(p);
--[ 2022.11.21.22.30.47.812.0 ]--
r 141         PointDist nD = new PointDist(root.p.dist(p));
--[ 2022.11.21.22.30.50.612.0 ]--
r 141         PointDist nD = new PointDist(rroot.p.dist(p));
--[ 2022.11.21.22.30.50.702.0 ]--
r 141         PointDist nD = new PointDist(roroot.p.dist(p));
--[ 2022.11.21.22.30.50.801.0 ]--
r 141         PointDist nD = new PointDist(rooroot.p.dist(p));
--[ 2022.11.21.22.30.50.924.0 ]--
r 141         PointDist nD = new PointDist(rootroot.p.dist(p));
--[ 2022.11.21.22.30.51.243.0 ]--
r 141         PointDist nD = new PointDist(root.root.p.dist(p));
--[ 2022.11.21.22.30.51.499.0 ]--
r 141         PointDist nD = new PointDist(root.proot.p.dist(p));
--[ 2022.11.21.22.30.52.175.0 ]--
r 141         PointDist nD = new PointDist(root.p root.p.dist(p));
--[ 2022.11.21.22.30.53.094.0 ]--
r 141         PointDist nD = new PointDist(root.proot.p.dist(p));
--[ 2022.11.21.22.30.53.586.0 ]--
r 141         PointDist nD = new PointDist(root.p,root.p.dist(p));
--[ 2022.11.21.22.30.54.157.0 ]--
r 141         PointDist nD = new PointDist(root.p, root.p.dist(p));
--[ 2022.11.21.22.31.07.252.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, P) {
--[ 2022.11.21.22.31.07.549.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, Po) {
--[ 2022.11.21.22.31.07.609.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, Poi) {
--[ 2022.11.21.22.31.07.856.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, Poin) {
--[ 2022.11.21.22.31.07.921.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, Point) {
--[ 2022.11.21.22.31.08.279.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointD) {
--[ 2022.11.21.22.31.08.410.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDi) {
--[ 2022.11.21.22.31.08.502.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDis) {
--[ 2022.11.21.22.31.08.641.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist) {
--[ 2022.11.21.22.31.09.252.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist ) {
--[ 2022.11.21.22.31.09.444.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist n) {
--[ 2022.11.21.22.31.09.539.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist ne) {
--[ 2022.11.21.22.31.09.638.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist nea) {
--[ 2022.11.21.22.31.09.742.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist near) {
--[ 2022.11.21.22.31.09.903.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist neare) {
--[ 2022.11.21.22.31.10.108.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist neares) {
--[ 2022.11.21.22.31.10.254.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist nearest) {
--[ 2022.11.21.22.31.18.141.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist nearestP) {
--[ 2022.11.21.22.31.21.174.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist nearest) {
--[ 2022.11.21.22.31.21.308.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist neares) {
--[ 2022.11.21.22.31.21.441.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist neare) {
--[ 2022.11.21.22.31.21.572.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist near) {
--[ 2022.11.21.22.31.21.694.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist nea) {
--[ 2022.11.21.22.31.22.388.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist near) {
--[ 2022.11.21.22.31.22.524.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist nearP) {
--[ 2022.11.21.22.31.25.081.0 ]--
r 141         PointDist n = new PointDist(root.p, root.p.dist(p));
--[ 2022.11.21.22.31.25.381.0 ]--
r 141         PointDist ne = new PointDist(root.p, root.p.dist(p));
--[ 2022.11.21.22.31.25.470.0 ]--
r 141         PointDist nea = new PointDist(root.p, root.p.dist(p));
--[ 2022.11.21.22.31.25.542.0 ]--
r 141         PointDist near = new PointDist(root.p, root.p.dist(p));
--[ 2022.11.21.22.31.26.548.0 ]--
r 141         PointDist nearP = new PointDist(root.p, root.p.dist(p));
--[ 2022.11.21.22.31.26.999.0 ]--
r 141         PointDist nearPt = new PointDist(root.p, root.p.dist(p));
--[ 2022.11.21.22.31.28.517.0 ]--
r 145     private Point nearest(Node current, Point p, Point currentNear, PointDist nearPt) {
--[ 2022.11.21.22.31.41.682.0 ]--
r 145     private Point nearest(Node current, Point p, PointD currentNear, PointDist nearPt) {
--[ 2022.11.21.22.31.42.350.0 ]--
r 145     private Point nearest(Node current, Point p, PointDist currentNear, PointDist nearPt) {
--[ 2022.11.21.22.32.03.564.0 ]--
r 145     private Point nearest(Node current, Point p, PointDist currentNear) {
--[ 2022.11.21.22.32.08.018.0 ]--
r 145     private Point nearest(Node current, Point p, PointDist near) {
--[ 2022.11.21.22.32.09.505.0 ]--
r 145     private Point nearest(Node current, Point p, PointDist nearP) {
--[ 2022.11.21.22.32.09.827.0 ]--
r 145     private Point nearest(Node current, Point p, PointDist nearPt) {
--[ 2022.11.21.22.32.14.186.0 ]--
r 142         return nearest(root, p, n );
--[ 2022.11.21.22.32.14.239.0 ]--
r 142         return nearest(root, p, ne );
--[ 2022.11.21.22.32.14.378.0 ]--
r 142         return nearest(root, p, nea );
--[ 2022.11.21.22.32.14.455.0 ]--
r 142         return nearest(root, p, near );
--[ 2022.11.21.22.32.15.408.0 ]--
r 142         return nearest(root, p, nearp );
--[ 2022.11.21.22.32.16.290.0 ]--
r 142         return nearest(root, p, near );
--[ 2022.11.21.22.32.16.673.0 ]--
r 142         return nearest(root, p, nearP );
--[ 2022.11.21.22.32.17.015.0 ]--
r 142         return nearest(root, p, nearPt );
--[ 2022.11.21.22.32.19.917.0 ]--
r 146         if(current == null) return n;
--[ 2022.11.21.22.32.20.005.0 ]--
r 146         if(current == null) return ne;
--[ 2022.11.21.22.32.20.113.0 ]--
r 146         if(current == null) return nea;
--[ 2022.11.21.22.32.20.189.0 ]--
r 146         if(current == null) return near;
--[ 2022.11.21.22.32.20.566.0 ]--
r 146         if(current == null) return nearP;
--[ 2022.11.21.22.32.20.900.0 ]--
r 146         if(current == null) return nearPt;
--[ 2022.11.21.22.32.25.762.0 ]--
r 145     private PointD nearest(Node current, Point p, PointDist nearPt) {
--[ 2022.11.21.22.32.26.061.0 ]--
r 145     private PointDi nearest(Node current, Point p, PointDist nearPt) {
--[ 2022.11.21.22.32.26.146.0 ]--
r 145     private PointDis nearest(Node current, Point p, PointDist nearPt) {
--[ 2022.11.21.22.32.26.249.0 ]--
r 145     private PointDist nearest(Node current, Point p, PointDist nearPt) {
--[ 2022.11.21.22.32.32.803.0 ]--
r 142         return nearest(root, p, nearPt ).;
--[ 2022.11.21.22.32.33.032.0 ]--
r 142         return nearest(root, p, nearPt ).p;
--[ 2022.11.21.22.32.37.157.0 ]--
r 142         return nearest(root, p, nearPt ).p();
--[ 2022.11.21.22.32.43.372.0 ]--
r 149         if(current.p.dist(p) < nearPt) {      //get distance to the query point from the partition point)
--[ 2022.11.21.22.32.46.567.0 ]--
r 156                 currentNear = nearest(current.right, p, nearPt);
--[ 2022.11.21.22.32.50.225.0 ]--
r 159                 currentNear = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.32.52.064.0 ]--
r 156                 currentNear = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.32.54.643.0 ]--
r 160                 currentNear = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.32.57.485.0 ]--
r 162             else currentNear = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.33.01.151.0 ]--
r 169                 if (p.x() > current.p.x()) currentNear = nearest(current.left, pnearPt);
--[ 2022.11.21.22.33.04.043.0 ]--
r 170                 else currentNear = nearest(current.right, p,);
--[ 2022.11.21.22.33.04.169.0 ]--
r 170                 else currentNear = nearest(current.right, p);
--[ 2022.11.21.22.33.04.429.0 ]--
r 170                 else currentNear = nearest(current.right, pnearPt);
--[ 2022.11.21.22.33.07.104.0 ]--
r 170                 else currentNear = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.33.07.147.0 ]--
r 170                 else currentNear = nearest(current.right, p, nearPt);
--[ 2022.11.21.22.33.12.399.0 ]--
r 175                 currentNear = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.33.15.057.0 ]--
r 178                 currentNear = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.33.17.433.0 ]--
r 179                 currentNear = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.33.20.376.0 ]--
r 181             else currentNear = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.33.23.861.0 ]--
r 188                 if(p.y() > current.p.y()) currentNear = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.33.26.327.0 ]--
r 189                 else currentNear = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.33.30.749.0 ]--
r 169                 if (p.x() > current.p.x()) currentNear = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.33.30.846.0 ]--
r 169                 if (p.x() > current.p.x()) currentNear = nearest(current.left, p, nearPt);
--[ 2022.11.21.22.33.42.827.0 ]--
r 149         if(current.p.dist(p) < nearPt.) {      //get distance to the query point from the partition point)
--[ 2022.11.21.22.33.42.882.0 ]--
r 149         if(current.p.dist(p) < nearPt.d) {      //get distance to the query point from the partition point)
--[ 2022.11.21.22.33.43.515.0 ]--
r 149         if(current.p.dist(p) < nearPt.d()) {      //get distance to the query point from the partition point)
--[ 2022.11.21.22.33.50.069.0 ]--
r 150             nearPt = current.p;
--[ 2022.11.21.22.33.52.764.0 ]--
r 150             nearPt. = current.p;
--[ 2022.11.21.22.33.52.872.0 ]--
r 150             nearPt.p = current.p;
--[ 2022.11.21.22.33.55.300.0 ]--
r 156                 nearPt = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.33.56.210.0 ]--
r 156                 nearPt. = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.33.56.314.0 ]--
r 156                 nearPt.p = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.33.56.803.0 ]--
r 156                 nearPt.p() = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.33.59.279.0 ]--
r 150             nearPt.p() = current.p;
--[ 2022.11.21.22.34.01.580.0 ]--
r 151             nearPt = current.p.dist(p);
--[ 2022.11.21.22.34.02.703.0 ]--
r 151             nearPt. = current.p.dist(p);
--[ 2022.11.21.22.34.02.813.0 ]--
r 151             nearPt.d = current.p.dist(p);
--[ 2022.11.21.22.34.03.200.0 ]--
r 151             nearPt.d() = current.p.dist(p);
--[ 2022.11.21.22.34.17.122.0 ]--
r 151             nearPt.d( = current.p.dist(p);
--[ 2022.11.21.22.34.17.176.0 ]--
r 151             nearPt.d = current.p.dist(p);
--[ 2022.11.21.22.34.18.379.0 ]--
r 150             nearPt.p( = current.p;
--[ 2022.11.21.22.34.18.508.0 ]--
r 150             nearPt.p = current.p;
--[ 2022.11.21.22.35.15.826.0 ]--
r 150             nearPt.p() = current.p;
--[ 2022.11.21.22.35.20.776.0 ]--
r 150 //            nearPt.p() = current.p;
r 151 //            nearPt.d = current.p.dist(p);
--[ 2022.11.21.22.35.25.415.0 ]--
+ 150             
--[ 2022.11.21.22.35.26.836.0 ]--
r 150             n
--[ 2022.11.21.22.35.26.984.0 ]--
r 150             ne
--[ 2022.11.21.22.35.27.073.0 ]--
r 150             nea
--[ 2022.11.21.22.35.27.139.0 ]--
r 150             near
--[ 2022.11.21.22.35.27.762.0 ]--
r 150             nearPt
--[ 2022.11.21.22.35.28.341.0 ]--
r 150             nearPt 
--[ 2022.11.21.22.35.28.538.0 ]--
r 150             nearPt =
--[ 2022.11.21.22.35.28.834.0 ]--
r 150             nearPt = 
--[ 2022.11.21.22.35.29.268.0 ]--
r 150             nearPt = c
--[ 2022.11.21.22.35.29.351.0 ]--
r 150             nearPt = cu
--[ 2022.11.21.22.35.29.485.0 ]--
r 150             nearPt = cur
--[ 2022.11.21.22.35.29.603.0 ]--
r 150             nearPt = curr
--[ 2022.11.21.22.35.29.714.0 ]--
r 150             nearPt = currr
--[ 2022.11.21.22.35.29.803.0 ]--
r 150             nearPt = currre
--[ 2022.11.21.22.35.30.184.0 ]--
r 150             nearPt = currr
--[ 2022.11.21.22.35.30.257.0 ]--
r 150             nearPt = curr
--[ 2022.11.21.22.35.30.487.0 ]--
r 150             nearPt = curre
--[ 2022.11.21.22.35.30.616.0 ]--
r 150             nearPt = curren
--[ 2022.11.21.22.35.30.738.0 ]--
r 150             nearPt = current
--[ 2022.11.21.22.35.45.846.0 ]--
r 150             nearPt = curren
--[ 2022.11.21.22.35.46.388.0 ]--
r 150             nearPt = curre
--[ 2022.11.21.22.35.46.404.0 ]--
r 150             nearPt = curr
--[ 2022.11.21.22.35.46.465.0 ]--
r 150             nearPt = cur
--[ 2022.11.21.22.35.46.544.0 ]--
r 150             nearPt = cu
--[ 2022.11.21.22.35.46.641.0 ]--
r 150             nearPt = c
--[ 2022.11.21.22.35.46.939.0 ]--
r 150             nearPt = 
--[ 2022.11.21.22.35.47.361.0 ]--
r 150             nearPt = n
--[ 2022.11.21.22.35.47.416.0 ]--
r 150             nearPt = ne
--[ 2022.11.21.22.35.47.482.0 ]--
r 150             nearPt = new
--[ 2022.11.21.22.35.47.977.0 ]--
r 150             nearPt = new 
--[ 2022.11.21.22.35.48.773.0 ]--
r 150             nearPt = new PointDist
--[ 2022.11.21.22.35.48.791.0 ]--
r 150             nearPt = new PointDist()
--[ 2022.11.21.22.35.50.923.0 ]--
r 150             nearPt = new PointDist(c)
--[ 2022.11.21.22.35.51.007.0 ]--
r 150             nearPt = new PointDist(cu)
--[ 2022.11.21.22.35.51.175.0 ]--
r 150             nearPt = new PointDist(cur)
--[ 2022.11.21.22.35.51.320.0 ]--
r 150             nearPt = new PointDist(curr)
--[ 2022.11.21.22.35.51.492.0 ]--
r 150             nearPt = new PointDist(curre)
--[ 2022.11.21.22.35.51.621.0 ]--
r 150             nearPt = new PointDist(curren)
--[ 2022.11.21.22.35.51.738.0 ]--
r 150             nearPt = new PointDist(current)
--[ 2022.11.21.22.35.52.082.0 ]--
r 150             nearPt = new PointDist(current.)
--[ 2022.11.21.22.35.52.258.0 ]--
r 150             nearPt = new PointDist(current.p)
--[ 2022.11.21.22.35.52.688.0 ]--
r 150             nearPt = new PointDist(current.p,)
--[ 2022.11.21.22.35.52.793.0 ]--
r 150             nearPt = new PointDist(current.p, )
--[ 2022.11.21.22.35.53.839.0 ]--
r 150             nearPt = new PointDist(current.p, c)
--[ 2022.11.21.22.35.53.961.0 ]--
r 150             nearPt = new PointDist(current.p, cu)
--[ 2022.11.21.22.35.54.079.0 ]--
r 150             nearPt = new PointDist(current.p, cur)
--[ 2022.11.21.22.35.54.190.0 ]--
r 150             nearPt = new PointDist(current.p, curr)
--[ 2022.11.21.22.35.54.369.0 ]--
r 150             nearPt = new PointDist(current.p, curre)
--[ 2022.11.21.22.35.54.505.0 ]--
r 150             nearPt = new PointDist(current.p, curren)
--[ 2022.11.21.22.35.54.612.0 ]--
r 150             nearPt = new PointDist(current.p, current)
--[ 2022.11.21.22.35.54.767.0 ]--
r 150             nearPt = new PointDist(current.p, current.)
--[ 2022.11.21.22.35.55.015.0 ]--
r 150             nearPt = new PointDist(current.p, current.p)
--[ 2022.11.21.22.35.55.439.0 ]--
r 150             nearPt = new PointDist(current.p, current.p.)
--[ 2022.11.21.22.35.55.693.0 ]--
r 150             nearPt = new PointDist(current.p, current.p.d)
--[ 2022.11.21.22.35.55.808.0 ]--
r 150             nearPt = new PointDist(current.p, current.p.di)
--[ 2022.11.21.22.35.55.931.0 ]--
r 150             nearPt = new PointDist(current.p, current.p.dis)
--[ 2022.11.21.22.35.56.092.0 ]--
r 150             nearPt = new PointDist(current.p, current.p.dist)
--[ 2022.11.21.22.35.56.705.0 ]--
r 150             nearPt = new PointDist(current.p, current.p.dist())
--[ 2022.11.21.22.35.57.599.0 ]--
r 150             nearPt = new PointDist(current.p, current.p.dist(p))
--[ 2022.11.21.22.35.58.896.0 ]--
r 150             nearPt = new PointDist(current.p, current.p.dist(p));
--[ 2022.11.21.22.36.16.134.0 ]--
r 157                 nearPt = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.36.24.324.0 ]--
r 160                 nearPt = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.36.27.052.0 ]--
r 161                 nearPt = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.36.31.098.0 ]--
r 163             else nearPt = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.36.37.176.0 ]--
r 169             if (nearPt =  > partDist) {
--[ 2022.11.21.22.36.37.616.0 ]--
r 169             if (nearPt = > partDist) {
--[ 2022.11.21.22.36.37.794.0 ]--
r 169             if (nearPt  > partDist) {
--[ 2022.11.21.22.36.37.932.0 ]--
r 169             if (nearPt > partDist) {
--[ 2022.11.21.22.36.38.816.0 ]--
r 169             if (nearPt. > partDist) {
--[ 2022.11.21.22.36.38.956.0 ]--
r 169             if (nearPt.d > partDist) {
--[ 2022.11.21.22.36.40.031.0 ]--
r 169             if (nearPt.d() > partDist) {
--[ 2022.11.21.22.36.44.370.0 ]--
r 170                 if (p.x() > current.p.x()) nearPt =  nearest(current.left, p, nearPt);
--[ 2022.11.21.22.36.45.553.0 ]--
r 170                 if (p.x() > current.p.x()) nearPt = nearest(current.left, p, nearPt);
--[ 2022.11.21.22.36.48.132.0 ]--
r 171                 else nearPt = nearest(current.right, p, nearPt);
--[ 2022.11.21.22.36.51.530.0 ]--
r 176                 nearPt = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.36.53.369.0 ]--
r 179                 nearPt = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.36.55.576.0 ]--
r 180                 nearPt = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.36.58.747.0 ]--
r 182             else nearPt = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.37.01.788.0 ]--
r 188             if (nearPt =  > partDist) {
--[ 2022.11.21.22.37.02.571.0 ]--
r 188             if (nearPt = > partDist) {
--[ 2022.11.21.22.37.02.709.0 ]--
r 188             if (nearPt  > partDist) {
--[ 2022.11.21.22.37.03.143.0 ]--
r 188             if (nearPt > partDist) {
--[ 2022.11.21.22.37.03.590.0 ]--
r 188             if (nearPt. > partDist) {
--[ 2022.11.21.22.37.03.871.0 ]--
r 188             if (nearPt.d > partDist) {
--[ 2022.11.21.22.37.04.348.0 ]--
r 188             if (nearPt.d() > partDist) {
--[ 2022.11.21.22.37.08.939.0 ]--
r 189                 if(p.y() > current.p.y()) nearPt = nearest(current.left, p,nearPt);
--[ 2022.11.21.22.37.14.843.0 ]--
r 190                 else nearPt =  nearest(current.right, p,nearPt);
--[ 2022.11.21.22.37.15.420.0 ]--
r 190                 else nearPt = nearest(current.right, p,nearPt);
--[ 2022.11.21.22.37.18.783.0 ]--
r 194         return nearPt = ;
--[ 2022.11.21.22.37.19.350.0 ]--
r 194         return nearPt =;
--[ 2022.11.21.22.37.19.480.0 ]--
r 194         return nearPt ;
--[ 2022.11.21.22.37.19.615.0 ]--
r 194         return nearPt;
--[ 2022.11.21.22.37.27.170.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.39.03.984.0 ]--
- 167
r 167 //       
--[ 2022.11.21.22.39.05.666.0 ]--
- 167
--[ 2022.11.21.22.39.10.168.0 ]--
- 152
--[ 2022.11.21.22.39.11.817.0 ]--
- 151
--[ 2022.11.21.22.39.16.892.0 ]--
r 144     //this returns a pointDist so that we can 
--[ 2022.11.21.22.39.17.420.0 ]--
r 144     //this returns a pointDist so that we can a
--[ 2022.11.21.22.39.17.665.0 ]--
r 144     //this returns a pointDist so that we can ac
--[ 2022.11.21.22.39.17.788.0 ]--
r 144     //this returns a pointDist so that we can acc
--[ 2022.11.21.22.39.18.006.0 ]--
r 144     //this returns a pointDist so that we can acce
--[ 2022.11.21.22.39.18.193.0 ]--
r 144     //this returns a pointDist so that we can acces
--[ 2022.11.21.22.39.18.318.0 ]--
r 144     //this returns a pointDist so that we can access
--[ 2022.11.21.22.39.18.632.0 ]--
r 144     //this returns a pointDist so that we can access 
--[ 2022.11.21.22.39.19.564.0 ]--
r 144     //this returns a pointDist so that we can access b
--[ 2022.11.21.22.39.19.645.0 ]--
r 144     //this returns a pointDist so that we can access bo
--[ 2022.11.21.22.39.19.776.0 ]--
r 144     //this returns a pointDist so that we can access bot
--[ 2022.11.21.22.39.19.908.0 ]--
r 144     //this returns a pointDist so that we can access both
--[ 2022.11.21.22.39.20.024.0 ]--
r 144     //this returns a pointDist so that we can access both 
--[ 2022.11.21.22.39.20.465.0 ]--
r 144     //this returns a pointDist so that we can access both t
--[ 2022.11.21.22.39.20.543.0 ]--
r 144     //this returns a pointDist so that we can access both th
--[ 2022.11.21.22.39.20.659.0 ]--
r 144     //this returns a pointDist so that we can access both the
--[ 2022.11.21.22.39.20.808.0 ]--
r 144     //this returns a pointDist so that we can access both the 
--[ 2022.11.21.22.39.21.828.0 ]--
r 144     //this returns a pointDist so that we can access both the n
--[ 2022.11.21.22.39.21.893.0 ]--
r 144     //this returns a pointDist so that we can access both the ne
--[ 2022.11.21.22.39.22.065.0 ]--
r 144     //this returns a pointDist so that we can access both the nea
--[ 2022.11.21.22.39.22.134.0 ]--
r 144     //this returns a pointDist so that we can access both the near
--[ 2022.11.21.22.39.22.324.0 ]--
r 144     //this returns a pointDist so that we can access both the neare
--[ 2022.11.21.22.39.22.530.0 ]--
r 144     //this returns a pointDist so that we can access both the neares
--[ 2022.11.21.22.39.22.655.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest
--[ 2022.11.21.22.39.22.769.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest 
--[ 2022.11.21.22.39.22.951.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest p
--[ 2022.11.21.22.39.23.084.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest po
--[ 2022.11.21.22.39.23.286.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest poi
--[ 2022.11.21.22.39.23.483.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest poin
--[ 2022.11.21.22.39.23.611.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point
--[ 2022.11.21.22.39.23.724.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point 
--[ 2022.11.21.22.39.23.854.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point a
--[ 2022.11.21.22.39.24.136.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point an
--[ 2022.11.21.22.39.24.277.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point an 
--[ 2022.11.21.22.39.24.686.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point an
--[ 2022.11.21.22.39.24.755.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and
--[ 2022.11.21.22.39.24.877.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and 
--[ 2022.11.21.22.39.25.216.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and d
--[ 2022.11.21.22.39.25.276.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and di
--[ 2022.11.21.22.39.25.690.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and d
--[ 2022.11.21.22.39.25.833.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and 
--[ 2022.11.21.22.39.26.784.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and t
--[ 2022.11.21.22.39.26.818.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and th
--[ 2022.11.21.22.39.26.928.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the
--[ 2022.11.21.22.39.27.022.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the 
--[ 2022.11.21.22.39.27.179.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the d
--[ 2022.11.21.22.39.27.261.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the di
--[ 2022.11.21.22.39.27.382.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the dis
--[ 2022.11.21.22.39.27.506.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the dist
--[ 2022.11.21.22.39.27.683.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the dista
--[ 2022.11.21.22.39.27.822.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the distan
--[ 2022.11.21.22.39.27.948.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the distanc
--[ 2022.11.21.22.39.28.146.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the distance
--[ 2022.11.21.22.39.28.271.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the distance 
--[ 2022.11.21.22.39.28.421.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the distance o
--[ 2022.11.21.22.39.28.459.0 ]--
r 144     //this returns a pointDist so that we can access both the nearest point and the distance of
--[ 2022.11.21.22.39.28.956.0 ]--
+ 145     
--[ 2022.11.21.22.39.35.687.0 ]--
r 145     /
--[ 2022.11.21.22.39.35.800.0 ]--
r 145     //
--[ 2022.11.21.22.39.36.484.0 ]--
r 145     //t
--[ 2022.11.21.22.39.36.596.0 ]--
r 145     //th
--[ 2022.11.21.22.39.36.676.0 ]--
r 145     //tha
--[ 2022.11.21.22.39.36.767.0 ]--
r 145     //that
--[ 2022.11.21.22.39.36.883.0 ]--
r 145     //that 
--[ 2022.11.21.22.39.37.091.0 ]--
r 145     //that p
--[ 2022.11.21.22.39.37.224.0 ]--
r 145     //that po
--[ 2022.11.21.22.39.37.300.0 ]--
r 145     //that poi
--[ 2022.11.21.22.39.37.523.0 ]--
r 145     //that poin
--[ 2022.11.21.22.39.37.655.0 ]--
r 145     //that point
--[ 2022.11.21.22.39.37.738.0 ]--
r 145     //that point 
--[ 2022.11.21.22.39.37.904.0 ]--
r 145     //that point b
--[ 2022.11.21.22.39.38.041.0 ]--
r 145     //that point bo
--[ 2022.11.21.22.39.38.336.0 ]--
r 145     //that point bot
--[ 2022.11.21.22.39.38.419.0 ]--
r 145     //that point both
--[ 2022.11.21.22.39.38.523.0 ]--
r 145     //that point both 
--[ 2022.11.21.22.39.38.721.0 ]--
r 145     //that point both f
--[ 2022.11.21.22.39.38.863.0 ]--
r 145     //that point both fr
--[ 2022.11.21.22.39.38.985.0 ]--
r 145     //that point both fro
--[ 2022.11.21.22.39.39.128.0 ]--
r 145     //that point both from
--[ 2022.11.21.22.39.39.271.0 ]--
r 145     //that point both from 
--[ 2022.11.21.22.39.39.557.0 ]--
r 145     //that point both from t
--[ 2022.11.21.22.39.39.680.0 ]--
r 145     //that point both from th
--[ 2022.11.21.22.39.39.750.0 ]--
r 145     //that point both from the
--[ 2022.11.21.22.39.39.857.0 ]--
r 145     //that point both from the 
--[ 2022.11.21.22.39.41.776.0 ]--
r 145     //that point both from the o
--[ 2022.11.21.22.39.41.923.0 ]--
r 145     //that point both from the on
--[ 2022.11.21.22.39.42.053.0 ]--
r 145     //that point both from the one
--[ 2022.11.21.22.39.42.170.0 ]--
r 145     //that point both from the one 
--[ 2022.11.21.22.39.42.316.0 ]--
r 145     //that point both from the one v
--[ 2022.11.21.22.39.42.560.0 ]--
r 145     //that point both from the one va
--[ 2022.11.21.22.39.42.638.0 ]--
r 145     //that point both from the one var
--[ 2022.11.21.22.39.42.753.0 ]--
r 145     //that point both from the one vari
--[ 2022.11.21.22.39.42.865.0 ]--
r 145     //that point both from the one varia
--[ 2022.11.21.22.39.43.060.0 ]--
r 145     //that point both from the one variab
--[ 2022.11.21.22.39.43.172.0 ]--
r 145     //that point both from the one variabl
--[ 2022.11.21.22.39.43.244.0 ]--
r 145     //that point both from the one variable
--[ 2022.11.21.22.39.55.926.0 ]--
CompilationStatus (AEW): 0 0 0
--[ 2022.11.21.22.41.15.903.0 ]--
- 190
--[ 2022.11.22.08.02.02.426.0 ]--
DisposeComponent
--[ 2022.11.22.08.02.36.835.0 ]--
NewLogger: P05_KDTrees
Version: 1.5
--[ 2022.11.22.08.02.36.879.0 ]--
InitTree:
/out/production/P05_KDTrees/.donotlog
/out/production/P05_KDTrees/algs4.jar
/out/production/P05_KDTrees/stdlib.jar
/out/production/P05_KDTrees/input1M.txt
/out/production/P05_KDTrees/Mouse.class
/out/production/P05_KDTrees/Point.class
/out/production/P05_KDTrees/input100K.txt
/out/production/P05_KDTrees/Point$1.class
/out/production/P05_KDTrees/Point$2.class
/out/production/P05_KDTrees/Point$3.class
/out/production/P05_KDTrees/Point$4.class
/out/production/P05_KDTrees/burgerking.csv
/out/production/P05_KDTrees/KeyPress.class
/out/production/P05_KDTrees/PSKDTree.class
/out/production/P05_KDTrees/Partition.class
/out/production/P05_KDTrees/PointDist.class
/out/production/P05_KDTrees/Visualizer.class
/out/production/P05_KDTrees/PointSearch.class
/out/production/P05_KDTrees/PSBruteForce.class
/out/production/P05_KDTrees/PSKDTree$Node.class
/out/production/P05_KDTrees/FastFoodVisualizer.class
/out/production/P05_KDTrees/Partition$Direction.class
/out/production/P05_KDTrees/NearestNeighborVisualizer.class
/src/algs4.jar
/src/Mouse.java
/src/Point.java
/src/stdlib.jar
/src/KeyPress.java
/src/PSKDTree.java
/src/Partition.java
/src/PointDist.java
/src/Visualizer.java
/src/PointSearch.java
/src/PSBruteForce.java
/src/FastFoodVisualizer.java
/src/NearestNeighborVisualizer.java
/.git/info/exclude
/.git/logs/refs/heads/main
/.git/logs/refs/remotes/origin/HEAD
/.git/logs/refs/remotes/origin/main
/.git/logs/HEAD
/.git/refs/heads/main
/.git/refs/remotes/origin/HEAD
/.git/refs/remotes/origin/main
/.git/hooks/update.sample
/.git/hooks/pre-push.sample
/.git/hooks/commit-msg.sample
/.git/hooks/pre-commit.sample
/.git/hooks/pre-rebase.sample
/.git/hooks/post-update.sample
/.git/hooks/pre-receive.sample
/.git/hooks/applypatch-msg.sample
/.git/hooks/pre-applypatch.sample
/.git/hooks/pre-merge-commit.sample
/.git/hooks/push-to-checkout.sample
/.git/hooks/fsmonitor-watchman.sample
/.git/hooks/prepare-commit-msg.sample
/.git/objects/09/bd3ab462c2a54f2f734a663b4d0d55dbefa856
/.git/objects/0c/324b92a8f6c06aa72c7d1a7b6a4b3a471f2f9f
/.git/objects/0c/55bcf14a37162c8cecdd8bb4226a147b847710
/.git/objects/0d/90a95e4569ab236f012c54a903f79e23f7e45d
/.git/objects/1a/49d62b998226393c172907eef021434d19be9a
/.git/objects/1f/fc97640cccefe0b1a237033b6373d6267daafb
/.git/objects/21/5f9d8b463f594d7a29686b9e9be2c095a4e415
/.git/objects/26/3963a64f2a64659282fd9cbe561dd7a5e4a676
/.git/objects/2b/146202332c98f33d1ab3db98dea03e6bbc1093
/.git/objects/2b/5f9208bfadbbc9019b47a713b74462b9cd2613
/.git/objects/2d/684a62c75f8da8fc231206420108d204cbe252
/.git/objects/2d/a01175c002a7aca63ea26eac5644d92eff4262
/.git/objects/2e/39673052a1f295d801c985e388b4f7474189b5
/.git/objects/2e/d4fe70b4e088ec2c3ac33ca08f741ed2d35a97
/.git/objects/35/3cb223ed1906f7fafb0088b405f95a94d48049
/.git/objects/3a/467db814b5de23a11971dfafc2a31dab54402b
/.git/objects/3e/ec82059c43fd48c2c87acbb5d3146919181ac4
/.git/objects/42/2e8fe6a25b2cb1526a3b698f7bb6e4a6d6ab1f
/.git/objects/47/2708597a52c84fb05917e78f58bfd5c9595103
/.git/objects/54/0fd2392eaf74abc751e9970668bf235e56f803
/.git/objects/57/21445f69b8abeb3fa1b24eafb39b339a66c987
/.git/objects/63/f769006f85ce8b975f16e9c895bd3395504579
/.git/objects/67/a3cbc10acb52f757cbd15ab1a2acaef561cf5d
/.git/objects/68/33ac541d58999c846b37793c0ca6bb09e43f21
/.git/objects/6a/13eb1367395cad1f3ae5b2219d4d1a970335e1
/.git/objects/6e/10e3d8976dabc74255b1ddce2024336f50d7e2
/.git/objects/6e/e6bdaf464e0f4adb373587a385e0875ebf8ba6
/.git/objects/75/63d3f1a349009df7dbf21fee30194eead50ca0
/.git/objects/77/c1c9e0460791004d21b231cb11397fa8405453
/.git/objects/7c/f2891237ab51abd3dcfe41128b939aa54ae3a2
/.git/objects/86/5b56d35df1dcfcbf5196eeddcef674c03a3a93
/.git/objects/8d/e804238c33c653fe535bd162aabed440497ec7
/.git/objects/9a/8c6aff1f8871e01cacec32f40b40f4107494d2
/.git/objects/9a/e8d0c18cb848aa651381c33a3fa44eddc40bcb
/.git/objects/a4/1f4cf11f0c1e522a76feaaea7dd201322b74b2
/.git/objects/af/24b078cc669f5e4da5902ba1297a2ac0fa2339
/.git/objects/b2/0a2737119fe126fc0fc4d4284bed106ad85463
/.git/objects/b7/710fca979cfd5216bf2633dd1dfa8161d9f45f
/.git/objects/b7/9e120aa750f1350aa5c9c92e567b92d1cb06ca
/.git/objects/bd/dc962f4cacb8ce630d07f575b6668243250fb1
/.git/objects/c2/259fdab2fede23add0f6b409611094fb0ae13a
/.git/objects/c2/a99d32458bd15f0b79cff7dd46d99629763bed
/.git/objects/c6/82756a1eb42ff4805cdfc29c84fac9230c11e5
/.git/objects/c7/e29d8475f23acd8d328dc8074104b846f4bbbf
/.git/objects/c7/ed19fcb2ed6617a23bd3e9a2efaa966bed42da
/.git/objects/ca/22da9b6c126b0744cfde03b32ebdff29cb41ab
/.git/objects/ca/9a474fc415e206e1d701688a299fa1b8bbd628
/.git/objects/ce/2de51fa2f6dd8ca45683eb75ba132137da5a20
/.git/objects/d2/e73db08c8563911c081a8651a77f67c4b48b43
/.git/objects/d4/85126c43a458d604c41191c3cd216e30972972
/.git/objects/d6/6b5e816c127d864df03b0dd33db812fa463679
/.git/objects/e9/ce331a35ca02c33b0678d762c13fe57fe4a67a
/.git/objects/ee/909fb82334c194c06fd779181ba31079f10d42
/.git/objects/f1/f318c26c20a6cefd43a41e41a4c26c668d97ea
/.git/objects/f5/001ef95b10cd55e1f28b609cd462b09cf24d06
/.git/objects/f6/cca8a6084310f182dc287fadbb82c5ebcfffe8
/.git/objects/fc/e1363a394e590b51c742706992bebecae53b2b
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.idx
/.git/objects/pack/pack-5320b6e6be866c618967d59f12c11bde247dfe82.pack
/.git/HEAD
/.git/index
/.git/config
/.git/ORIG_HEAD
/.git/FETCH_HEAD
/.git/description
/.git/packed-refs
/.git/COMMIT_EDITMSG
/.log/history.log
/.idea/shelf/Uncommitted_changes_before_Update_at_11_21_22,_1_52_PM_[Changes]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22,_10_01_AM_[Changes]/shelved.patch
/.idea/shelf/Uncommitted_changes_before_Update_at_11_21_22__1_52_PM__Changes_.xml
/.idea/shelf/Uncommitted_changes_before_Update_at_11_15_22__10_01_AM__Changes_.xml
/.idea/copyright/profiles_settings.xml
/.idea/libraries/algs4.xml
/.idea/libraries/stdlib.xml
/.idea/.name
/.idea/vcs.xml
/.idea/misc.xml
/.idea/.gitignore
/.idea/modules.xml
/.idea/compiler.xml
/.idea/workspace.xml
/.idea/uiDesigner.xml
/tests/.donotlog
/tests/input1M.txt
/tests/input100K.txt
/tests/burgerking.csv
/.cos265
/readme.html
/P05_KDTrees.iml
/P05_KDTrees.zip

--[ 2022.11.22.08.02.36.881.0 ]--
InitFile: /src/Point.java
import java.util.Comparator;

/**
 * Point is a simple tuple of doubles with some handy functions.  Point is useful for
 * storing and computing 2D points.
 */
public final class Point implements Comparable<Point> {
    private final double x;
    private final double y;

    public Point(double x, double y) {
        this.x = x;
        this.y = y;
    }

    public Point(Point p) {
        this.x = p.x;
        this.y = p.y;
    }

    // generates a Point with location chosen uniformly at random in the unit square [0,1]^2
    public static Point uniform() {
        return new Point(StdRandom.uniform(), StdRandom.uniform());
    }

    // generates a Point with location chosen with gaussian distribution in unit square [0,1]^2
    // with mean of 0.5 and stddev of 0.12
    public static Point gaussian() {
        double x = -1, y = -1;
        // do not return an x,y that is outside the unit square
        while(x < 0 || y < 0 || x > 1 || y > 1) {
            x = StdRandom.gaussian(0.5, 0.12);
            y = StdRandom.gaussian(0.5, 0.12);
        }
        return new Point(x, y);
    }


    /**
     * the functions below can be used to find the min/max x/y which
     * can be used to find the bounding box of points
     */

    // returns a point with minimum component values
    public static Point min(Point p0, Point p1) {
        return new Point(Math.min(p0.x, p1.x), Math.min(p0.y, p1.y));
    }

    // returns a point with maximum component values
    public static Point max(Point p0, Point p1) {
        return new Point(Math.max(p0.x, p1.x), Math.max(p0.y, p1.y));
    }


    /**
     * use the following functions to compare Points in different ways.
     * Points are Comparable, so they know how to compareTo one another,
     * but the other functions return Comparator objects which can compare
     * Points in different ways.
     */

    // compares this to that, first by y component then by x
    public int compareTo(Point that) {
        if(this.y < that.y) return -1;
        if(this.y > that.y) return +1;
        if(this.x < that.x) return -1;
        if(this.x > that.x) return +1;
        return 0;
    }

    // do the components of this equal the components of that?
    public boolean equals(Object that) {
        if(this == that) return true;
        if(that == null) return false;
        if(that.getClass() != this.getClass()) return false;
        Point thatp = (Point)that;
        if(Double.compare(this.x, thatp.x) != 0) return false;
        if(Double.compare(this.y, thatp.y) != 0) return false;
        return true;
    }

    // returns a Comparator, comparing x first then y
    public static Comparator<Point> xyComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing y fist then x
    public static Comparator<Point> yxComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                if(o0.y < o1.y) return -1;
                if(o0.y > o1.y) return +1;
                if(o0.x < o1.x) return -1;
                if(o0.x > o1.x) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator, comparing the polar radius (dist from (0,0))
    public static Comparator<Point> polarRadiusComparator() {
        return new Comparator<Point>() {
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x*o0.x + o0.y*o0.y);
                double d1 = (o1.x*o1.x + o1.y*o1.y);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }

    // returns a Comparator for this, comparing dist between first given
    // point and this and dist between second given point and this
    public Comparator<Point> distanceToComparator() {
        return new Comparator<Point>() {
            private final double ox = x;
            private final double oy = y;
            @Override
            public int compare(Point o0, Point o1) {
                double d0 = (o0.x-ox)*(o0.x-ox) + (o0.y-oy)*(o0.y-oy);
                double d1 = (o1.x-ox)*(o1.x-ox) + (o1.y-oy)*(o1.y-oy);
                if(d0 < d1) return -1;
                if(d0 > d1) return +1;
                return 0;
            }
        };
    }


    /**
     * getters and setters
     */

    // getters of x and y
    public double x() { return x; }
    public double y() { return y; }

    // getter of either x or y depending on dir
    // dir = LEFTRIGHT => returns x
    // dir = DOWNUP    => returns y
    public double xy(Partition.Direction dir) {
        if(dir == Partition.Direction.LEFTRIGHT) return x;
        else return y;
    }


    /**
     * functions for computing distances
     */

    // computes distance^2 between this point and (x,y)
    public double distSquared(double x, double y) {
        return (this.x-x)*(this.x-x) + (this.y-y)*(this.y-y);
    }

    // computes distance^2 between this point and another (p)
    public double distSquared(Point p) {
        return distSquared(p.x, p.y);
    }

    // computes distance between this point and (x,y)
    public double dist(double x, double y) {
        return Math.sqrt(distSquared(x, y));
    }

    // computes distance between this point and another (p)
    public double dist(Point p) {
        return dist(p.x, p.y);
    }


    /**
     * misc functions
     */

    // returns a new point that has values added to components
    public Point add(double x, double y) {
        return new Point(this.x + x, this.y + y);
    }

    // returns a new point that has values added to components
    public Point add(Point p) {
        return add(p.x, p.y);
    }

    // returns whether point is within given min and max bounds
    public boolean isInBounds(double x0, double y0, double x1, double y1) {
        if(Double.compare(x,x0) <= 0) return false;
        if(Double.compare(y,y0) <= 0) return false;
        if(Double.compare(x1,x) <= 0) return false;
        if(Double.compare(y1,y) <= 0) return false;
        return true;
    }

    public boolean isInBounds(Point min, Point max) {
        return isInBounds(min.x, min.y, max.x, max.y);
    }

    // produces a String representation of Point
    public String toString() {
        return "(" + x + "," + y + ")";
    }
}

--[ 2022.11.22.08.02.36.881.1 ]--
InitFile: /src/Partition.java
/**
 * Partition is a simple class that stores two points and a direction,
 * where the two points make up a partition along the given direction.
 */
public final class Partition {
    // enumeration of all partition directions: Left-Right and Up-Down
    public enum Direction {
        LEFTRIGHT,
        DOWNUP
    }

    // returns the next direction in the enumeration
    public static Direction nextDirection(Direction dir) {
        if(dir == Direction.LEFTRIGHT) return Direction.DOWNUP;
        return Direction.LEFTRIGHT;
    }

    private final Point p0;
    private final Point p1;
    private final Direction dir;

    public Partition(Point p0, Point p1, Direction dir) {
        this.p0 = p0;
        this.p1 = p1;
        this.dir = dir;
    }

    public Partition(double x0, double y0, double x1, double y1, Direction dir) {
        this.p0 = new Point(x0, y0);
        this.p1 = new Point(x1, y1);
        this.dir = dir;
    }

    public Point p0() { return p0; }

    public Point p1() { return p1; }

    public Direction dir() { return dir; }
}

--[ 2022.11.22.08.02.36.882.0 ]--
InitFile: /src/FastFoodVisualizer.java
import java.awt.*;

/**
 * Loads and visualizes location data, and reports information on the closest
 * data point to mouse cursor
 */
public class FastFoodVisualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    private static final Color cText = new Color(64,64,64);

    private static void parseCSVLine(String line, String[] data) {
        boolean inQuote = false;
        int s = -1;
        int j = 0;
        for(int i = 0; i < line.length(); i++) {
            char c = line.charAt(i);
            if(c == ',' && !inQuote) {
                if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                    data[j] = line.substring(s+2,i-1);
                } else {
                    data[j] = line.substring(s + 1, i);
                }
                j++;
                s = i;
                continue;
            }
            if(c=='"') {
                inQuote = !inQuote;
            }
        }
        int i = line.length();
        if(s < i) {
            if(line.charAt(s+1) == '"' && line.charAt(i-1) == '"') {
                data[j] = line.substring(s+2,i-1);
            } else {
                data[j] = line.substring(s + 1, i);
            }
        }
    }

    private static String[][] readCSV(String filename, int m) {
        String[] lines = (new In(filename)).readAllLines();
        int n = lines.length;
        String[][] a = new String[n][m];
        for(int i = 0; i < n; i++) parseCSVLine(lines[i], a[i]);
        return a;
    }

    private static void insertCSV(String filename, PointSearch<String[]> ps) {
        String[][] data = readCSV(filename, 4);
        for(int i = 0; i < data.length; i++) {
            double longitude = Double.parseDouble(data[i][0]);
            double latitude = Double.parseDouble(data[i][1]);
            String[] loc = {data[i][2], data[i][3]};
            ps.put(new Point(longitude, latitude), loc);
        }
    }

    public static void main(String[] args) {
        PointSearch<String[]> psBurgerKings = new PSKDTree<>();

        insertCSV("burgerking.csv", psBurgerKings);

        Visualizer.setScaling(psBurgerKings.min(), psBurgerKings.max());

        StdDraw.show(0);

        Mouse mouse = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = Visualizer.xformInv(mouse.getLocation());

            Visualizer.clear();
            Visualizer.drawKDTree(psBurgerKings, false, false);
            Visualizer.drawNeighbors(psBurgerKings, loc, true, 0);

            StdDraw.setPenColor(cText);
            int i = 464;
            String[] value = psBurgerKings.getNearest(loc);
            if(value != null) {
                for (String l : value) {
                    StdDraw.text(256, i, l);
                    i -= 16;
                }
            }

            StdDraw.show(DELAY);
        }


    }
}

--[ 2022.11.22.08.02.36.882.1 ]--
InitFile: /src/PSBruteForce.java
import java.util.Iterator;

/**
 * PSBruteForce is a Point collection that provides brute force
 * nearest neighbor searching using red-black tree.
 */

// red-black trees

public class PSBruteForce<Value> implements PointSearch<Value> {
    // constructor makes empty collection

    RedBlackBST<Point, Value> rbst;
    double minx;
    double miny;
    double maxx;
    double maxy;

    public PSBruteForce() {
        rbst = new RedBlackBST<>();
    }

    // add the given Point to KDTree
    public void put(Point p, Value v) {
        if(p == null) throw new NullPointerException("p must be initialized");
        rbst.put(p,v);
        if(rbst.size() == 1) {
            minx = p.x();
            miny = p.y();

            maxx = p.x();
            maxy = p.y();
        }
        else {
            if(p.x() < minx) minx = p.x();
            if(p.y() < miny) miny = p.y();

            if(p.x() > maxx) maxx = p.x();
            if(p.y() > maxy) maxy = p.y();
        }
    }

    public Value get(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        return rbst.get(p);
    }

    public boolean contains(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        return rbst.contains(p);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() {
        return rbst.keys();
    }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        Point currentNear = null;
        double nearDist = 0;
        int idx = 0;
        Iterable<Point> iter = points();

        for( Point i : iter ) {

            double distance = p.dist(i);
            if(idx == 0 || distance < nearDist) {
                nearDist = distance;
                currentNear = i;
            }
            idx++;
        }
        return currentNear;
    }

    // return the Value associated to the Point that is closest to the given Point
    public Value getNearest(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        Point nearestPoint = nearest(p);
        return rbst.get(nearestPoint);
    }

    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if KDTree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        //for each iterable loop, remember the min
        return new Point(minx, miny);
    }
    public Point max() {
        if(isEmpty()) return null;
        //same as min, but with max
        return new Point(maxx, maxy);
    }


    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        if(p == null) throw new NullPointerException("p must be initialized");

        MaxPQ<PointDist> ptpq = new MaxPQ<>();

        Iterable<Point> iter = points();
        for( Point i : iter ) {

                PointDist distance = new PointDist(i, p.dist(i));
                ptpq.insert(distance);
                while (ptpq.size()>k) ptpq.delMax();
        }
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    public Iterable<Partition> partitions() { return null; }

    // return the number of Points in KDTree
    public int size() { return rbst.size(); }

    // return whether the KDTree is empty
    public boolean isEmpty() { return rbst.isEmpty(); }

    // place your timing code or unit testing here
    public static void main(String[] args) {
        PSBruteForce<Integer> bf = new PSBruteForce<>();
        Point p = new Point(1.0, 1.0);
        Point t = new Point(2.0, 2.0);
        Point q = new Point(3.0, 3.0);
        bf.put(p, 10);
        bf.put(t, 20);
        bf.put(q, 30);
        StdOut.println(bf.nearest(new Point (4.0,4.0)));

    }
}

--[ 2022.11.22.08.02.36.882.2 ]--
InitFile: /.cos265


--[ 2022.11.22.08.02.36.882.3 ]--
InitFile: /src/NearestNeighborVisualizer.java
import java.awt.event.KeyEvent;

/**
 * Visualizes nearest neighbors to mouse cursor and partitioning data
 */
public class NearestNeighborVisualizer {

    // number of dots to add at start
    private final static int nGaussian = 10;
    private final static int nUniform  = 10;

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // creates a new PointSearch data structure
    // note: you can swap between PSKDTree and PSBruteForce to debug your code
    private static PointSearch<Character> createNewPS() {
        return new PSKDTree<>();
    }

    public static void main(String[] args) {
        PointSearch<Character> ps = createNewPS();

        // add some random points
        for(int i = 0; i < nGaussian; i++) ps.put(Point.gaussian(), 'g');
        for(int i = 0; i < nUniform; i++) ps.put(Point.uniform(), 'u');

        // add points to match assignment write-up
        /*
        ps.put(new Point(0.8, 0.9), 'A');
        ps.put(new Point(0.5, 0.4), 'B');
        ps.put(new Point(0.2, 0.6), 'C');
        ps.put(new Point(0.3, 0.1), 'D');
        ps.put(new Point(0.9, 0.4), 'E');
        */

        StdDraw.show(0);

        int k = 1;
        boolean drawClosest = true;
        boolean drawPartitions = false;
        boolean drawBoundingBox = false;

        KeyPress keyP    = new KeyPress(KeyEvent.VK_P);
        KeyPress keyUp   = new KeyPress(KeyEvent.VK_UP);
        KeyPress keyDown = new KeyPress(KeyEvent.VK_DOWN);
        KeyPress keyC    = new KeyPress(KeyEvent.VK_C);
        KeyPress keyN    = new KeyPress(KeyEvent.VK_N);
        KeyPress keyB    = new KeyPress(KeyEvent.VK_B);
        Mouse    mouse   = new Mouse(24, 36, 464, 464);

        while(true) {
            Point loc = mouse.getLocation();

            if(keyC.isPressed()) ps = createNewPS();
            if(keyUp.isPressed()) k++;
            if(keyDown.isPressed() && k > 0) k--;
            if(keyN.isPressed()) drawClosest = !drawClosest;
            if(keyP.isPressed()) drawPartitions = !drawPartitions;
            if(keyB.isPressed()) drawBoundingBox = !drawBoundingBox;
            if(mouse.isPressed()) ps.put(loc, 'm');

            Visualizer.clear();
            Visualizer.drawKDTree(ps, drawPartitions, drawBoundingBox);
            Visualizer.drawNeighbors(ps, loc, drawClosest, k);

            StdDraw.show(DELAY);
        }
    }
}

--[ 2022.11.22.08.02.36.882.4 ]--
InitFile: /src/PSKDTree.java
import java.util.Iterator;

/**
 * PSKDTree is a Point collection that provides nearest neighbor searching using
 * 2d tree
 */
public class PSKDTree<Value> implements PointSearch<Value> {

    private class Node {
        Point p;
        Value v;
        Node left, right;
        Partition.Direction dir;

        public Node(Point pt, Value val) {
            p = pt;
            v = val;
        }
    }

    BST<Point, Value> kdt;
    int count=0;

    double minx;
    double miny;
    double maxx;
    double maxy;
    Node root=null;


    //point stack
    Stack<Point> ps = new Stack<>();    //doesn't account for deletions
    //stack of partitions
    Stack<Partition> sp = new Stack<>();
    // constructor makes empty kD-tree
    public PSKDTree() { }

    // add the given Point to kD-tree -- here is 2D (x and y)
    public void put(Point p, Value v) {
        if(p == null) throw new NullPointerException("p must be initialized");
        if (v == null) { return; } // can't do anything with a null value

        if(root==null) {
            Node x = new Node(p,v);
            x.left=null;
            x.right=null;
            x.dir= Partition.Direction.DOWNUP;
            root=x;
            minx = x.p.x();
            miny = x.p.y();

            maxx = x.p.x();
            maxy = x.p.y();
            ps.push(x.p);
            sp.push(new Partition(x.p,x.p,x.dir));
        }
        else put(root, p, v, root);
        count++;
    }

    private Node put(Node x, Point p, Value v, Node parent) {
        if (x == null) {
            Node newNode = new Node(p,v);
            if(parent.dir == Partition.Direction.DOWNUP) {
                newNode.dir = Partition.Direction.LEFTRIGHT;
                newNode.left=null;
                newNode.right=null;
            }
            else {
                newNode.dir = Partition.Direction.DOWNUP;
                newNode.left=null;
                newNode.right=null;
            }
            if(newNode.p.x() < minx) minx = newNode.p.x();
            if(newNode.p.y() < miny) miny = newNode.p.y();

            if(newNode.p.x() > maxx) maxx = newNode.p.x();
            if(newNode.p.y() > maxy) maxy = newNode.p.y();
            ps.push(p);
            sp.push(new Partition(newNode.p,newNode.p,newNode.dir));
            return newNode;
        }
        else {
            Partition.Direction parentDir = x.dir;

            if (parentDir == Partition.Direction.DOWNUP) {
                if (x.p.x() > p.x()) x.left = put(x.left, p, v, x);
                else x.right = put(x.right, p, v, x);
            } else {
                if (x.p.y() > p.y()) x.left = put(x.left, p, v, x);
                else x.right = put(x.right, p, v, x);
            }
            return x;
        }
    }

    public Value get(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        if(isEmpty()) return null;
        return get(root, p, root); //search through the tree instead of returning null
    }

    private Value get(Node current, Point p, Node parent) {
        if(current==null) return null;
        if(parent.dir == Partition.Direction.DOWNUP) {
            if (parent.p.x() < current.p.x()) return get(parent.right, p, parent);
            else if (parent.p.x() > current.p.x()) return get(parent.left, p, parent);
            else return current.v;
        }
        else {
            if (parent.p.y() < current.p.y()) return get(parent.right, p, parent);
            else if (parent.p.y() > current.p.y()) return get(parent.left, p, parent);
            else return current.v;
        }
    }

    public boolean contains(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        return get(p)!=null; //searching again for p in the bst
    }

    public Value getNearest(Point p) {
        if(p == null) throw new NullPointerException("p must be initialized");
        if(isEmpty()) return null;
        Point nearestPoint = nearest(p);
        return get(nearestPoint);
    }

    // return an iterable of all points in collection
    public Iterable<Point> points() { return ps; }

    // return an iterable of all partitions that make up the kD-tree
    //we didn't know what to do with two points in the partition constructor,
    //so the points in each partition are the same
    public Iterable<Partition> partitions() { return sp; }

    // return the Point that is closest to the given Point
    public Point nearest(Point p) {
        if(p == null) throw new NullPointerException("p and root must be initialized");
        if(isEmpty()) return null;
        PointDist nearPt = new PointDist(root.p, root.p.dist(p));
        return nearest(root, p, nearPt ).p();
    }
    //this returns a pointDist so that we can access both the nearest point and the distance of
    //that point both from the one variable
    private PointDist nearest(Node current, Point p, PointDist nearPt) {
        if(current == null) return nearPt;

        //1. Check against the current point...  closer?
        if(current.p.dist(p) < nearPt.d()) {      //get distance to the query point from the partition point)
            nearPt = new PointDist(current.p, current.p.dist(p));
        }
        //2. Check which side the query point is on
        if(current.dir == Partition.Direction.DOWNUP) {
            if(p.x() > current.p.x()) {
                nearPt = nearest(current.right, p,nearPt);
            }
            else if(p.x() == current.p.x()) {
                nearPt = nearest(current.right, p,nearPt);
                nearPt = nearest(current.left, p,nearPt);
            }
            else nearPt = nearest(current.left, p,nearPt);

            //3. Check if we should check the other side!
            double partDist = current.p.x() - p.x();
            if (nearPt.d() > partDist) {
                if (p.x() > current.p.x()) nearPt = nearest(current.left, p, nearPt);
                else nearPt = nearest(current.right, p, nearPt);
            }
        }
        else {    // dir is LEFTRIGHT
            if(p.y() > current.p.y()) {
                nearPt = nearest(current.right, p,nearPt);
            }
            else if(p.y() == current.p.y()) {
                nearPt = nearest(current.left, p,nearPt);
                nearPt = nearest(current.right, p,nearPt);
            }
            else nearPt = nearest(current.left, p,nearPt);

            //3. Check if we should check the other side!
            double partDist = current.p.y() - p.y();
//            if (partDist < 0) partDist = -1 * partDist;
//            if (nearDist < 0) nearDist = -1 * nearDist;
            if (nearPt.d() > partDist) {
                if(p.y() > current.p.y()) nearPt = nearest(current.left, p,nearPt);
                else nearPt = nearest(current.right, p,nearPt);
            }
        }
        return nearPt;
    }

    // return the k nearest Points to the given Point
    public Iterable<Point> nearest(Point p, int k) {
        if(p == null) throw new NullPointerException("p must be initialized");
        //if(k <= 0) return null;
//        if(root == null) throw new NullPointerException("Null root has no nearest");
        MaxPQ<PointDist> ptpq = new MaxPQ<>();

        //add things to the global maxpq!
//        ptpq.insert(new PointDist(root.p, root.p.dist(p)));
        kNearest(root, p, k, ptpq);
        Stack<Point> ptstack = new Stack<>();
        for(PointDist pd : ptpq) {
            ptstack.push(pd.p());
        }
        return ptstack;
    }

    private void kNearest(Node current, Point p, int k, MaxPQ<PointDist> ptpq) {
        if(current == null) return;
        if(k <= 0) return;
        PointDist toAdd = new PointDist(current.p, current.p.dist(p));
        //1. Check against the current point...  closer?
        ptpq.insert(toAdd);
        if( ptpq.size() > k ) {
            ptpq.delMax();
        }

        //2. Check which side the query point is on
        if(current.dir == Partition.Direction.DOWNUP) {
            if(p.x() > current.p.x()) {
                kNearest(current.right, p, k, ptpq);
            }
            else {
                kNearest(current.left, p, k, ptpq);
            }


            //3. Check if we should check the other side!
            double partDist = current.p.x() - p.x();
            if (ptpq.max().d() > partDist || ptpq.size() < k) {
                if (p.x() > current.p.x()) kNearest(current.left, p, k, ptpq);
                else kNearest(current.right, p, k, ptpq);
            }
        }
        else {    // dir is LEFTRIGHT
            if(p.y() > current.p.y()) {
                kNearest(current.right, p, k, ptpq);
            }
            else {
                kNearest(current.left, p, k, ptpq);
            }

            //3. Check if we should check the other side!
            double partDist = current.p.y() - p.y();
//            if (partDist < 0) partDist = -1 * partDist;
//            if (nearDist < 0) nearDist = -1 * nearDist;
            if (ptpq.max().d() > partDist || ptpq.size() < k) {
                if (p.y() > current.p.y()) kNearest(current.left, p, k, ptpq);
                else kNearest(current.right, p, k, ptpq);
            }
        }
    }


    // return the min and max for all Points in collection.
    // The min-max pair will form a bounding box for all Points.
    // if kD-tree is empty, return null.
    public Point min() {
        if(isEmpty()) return null;
        return new Point(minx,miny);
    }
    public Point max() {
        if(isEmpty()) return null;
        return new Point(maxx,maxy);
    }

    // return the number of Points in kD-tree
    public int size() { return count; }

    // return whether the kD-tree is empty
    public boolean isEmpty() { return count==0; }

    // place your timing code or unit testing here
    public static void main(String[] args) {
        PSKDTree<Integer> pskd = new PSKDTree<>();
        Point p = new Point(1.0, 1.0);
        Point t = new Point(2.0, 2.0);
        Point q = new Point(3.0, 3.0);
        pskd.put(p, 10);
        pskd.put(t, 20);
        pskd.put(q, 30);
        StdOut.println(pskd.nearest(new Point (0,0),0));

    }

}

--[ 2022.11.22.08.02.36.882.5 ]--
InitFile: /src/PointDist.java
/**
 * PointDist is a simple tuple of a Point and a dist.
 * This class is helpful for storing, passing, or returning the pair.
 */
public final class PointDist implements Comparable<PointDist> {
    private final Point p;
    private final double d;

    public PointDist(Point p, double d) {
        this.p = p;
        this.d = d;
    }

    public Point p() { return p; }

    public double d() { return d; }

    public int compareTo(PointDist that) {
        return Double.compare(this.d, that.d);
    }
}

--[ 2022.11.22.08.02.36.883.0 ]--
InitFile: /src/KeyPress.java
/**
 * KeyPress is a helper class for detecting key presses (not just whether the key is pressed)
 */
public class KeyPress {
    private final int key;
    private boolean pressed;

    public KeyPress(int key) {
        this.key = key;
    }

    public boolean isDown() {
        return StdDraw.isKeyPressed(this.key);
    }

    public boolean isUp() {
        return !isDown();
    }

    public boolean isPressed() {
        boolean p = StdDraw.isKeyPressed(this.key);
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }
}

--[ 2022.11.22.08.02.36.883.1 ]--
InitFile: /src/Mouse.java
/**
 * Mouse is a helper class for detecting mouse presses (not just whether the mouse is pressed)
 * and for transforming the cursor location from window-space to program-space
 */
public class Mouse {
    private boolean pressed;
    private final int xOffset, yOffset, width, height;

    public Mouse(int xOffset, int yOffset, int width, int height) {
        this.xOffset = xOffset;
        this.yOffset = yOffset;
        this.width = width;
        this.height = height;
    }

    public boolean isPressed() {
        boolean p = StdDraw.mousePressed();
        boolean v = !pressed && p;
        pressed = p;
        return v;
    }

    public Point getLocation() {
        double mouseX = (StdDraw.mouseX() - (float)xOffset) / (float)width;
        double mouseY = (StdDraw.mouseY() - (float)yOffset) / (float)height;
        return new Point(mouseX, mouseY);
    }
}

--[ 2022.11.22.08.02.36.883.2 ]--
InitFile: /src/Visualizer.java
import java.awt.*;

/**
 * Created by jdenning on 11/2/15.
 */
public class Visualizer {

    // delay in milliseconds (controls animation speed)
    private final static int DELAY = 10;

    // colors for vizualization
    private static final Color cDot = new Color(64,64,64);      // point (small box)
    private static final Color cKNN = new Color(200,200,255);   // k nearest neighbors
    private static final Color cNN  = new Color(64,64,255);     // nearest neighbor
    private static final Color cLR  = new Color(255,128,128);   // left-right partition
    private static final Color cUD  = new Color(128,255,128);   // up-down partition
    private static final Color cBox = new Color(192,192,192);   // bounding box

    private static double offsetX = 0.0;
    private static double offsetY = 0.0;
    private static double scale = 1.0;

    private static double dotSize = 1.0;

    public static void setScale(double scale) { Visualizer.scale = scale; }
    public static double getScale() { return Visualizer.scale; }
    public static void setOffsetX(double offsetX) { Visualizer.offsetX = offsetX; };
    public static double getOffsetX() { return Visualizer.offsetX; }
    public static void setOffsetY(double offsetY) { Visualizer.offsetY = offsetY; };
    public static double getOffsetY() { return Visualizer.offsetY; }
    public static void setScaling(double minX, double minY, double maxX, double maxY) {
        offsetX = minX; offsetY = minY;
        double d = Math.max(maxX - minX, maxY - minY);
        if(d == 0.0) scale = 0.0;
        else scale = 1.0 / d;
    }
    public static void setScaling(Point min, Point max) {
        if(min == null || max == null) return;
        setScaling(min.x(), min.y(), max.x(), max.y());
    }

    public static double getDotSize() { return dotSize; }
    public static void setDotSize(double dotSize) { Visualizer.dotSize = dotSize; }

    public static void clear() {
        StdDraw.clear();
        StdDraw.setXscale(0, 512);
        StdDraw.setYscale(0, 512);
    }
    public static void drawNeighbors(PointSearch ps, Point loc, boolean drawClosest, int k) {
        if(ps.isEmpty()) return;

        Iterable<Point> nearest = ps.nearest(loc, k);
        if(nearest != null) {
            StdDraw.setPenColor(cKNN);
            for (Point p : nearest) drawLine(loc, p);
        }

        if(drawClosest) {
            Point closest = ps.nearest(loc);
            if (closest != null) {
                StdDraw.setPenColor(cNN);
                StdDraw.setPenRadius(0.005);
                drawLine(loc, closest);
                StdDraw.setPenRadius();
            }
        }
    }
    public static void drawKDTree(PointSearch ps, boolean drawPartitions, boolean drawBoundingBox) {
        if(ps.isEmpty()) return;

        if(drawBoundingBox) {
            StdDraw.setPenColor(cBox);
            drawBox(ps.min(), ps.max());
        }

        if(drawPartitions) {
            Iterable<Partition> partitions = ps.partitions();
            if(partitions != null) {
                StdDraw.setPenRadius(0.005);
                for (Partition p : partitions) {
                    if (p.dir() == Partition.Direction.LEFTRIGHT) StdDraw.setPenColor(cLR);
                    else StdDraw.setPenColor(cUD);
                    drawLine(p.p0(), p.p1());
                }
                StdDraw.setPenRadius();
            }
        }

        Iterable<Point> points = ps.points();
        if(points != null) {
            StdDraw.setPenColor(cDot);
            setDotSize(Math.max(1.0, 5.0 / Math.pow(ps.size() + 1, 0.5)));
            for (Point p : points) drawDot(p);
        }
    }

    private static double xformX(double x) { return (x - offsetX) * scale; }
    private static double xformY(double y) { return (y - offsetY) * scale; }
    private static double xformInvX(double x) { return x / scale + offsetX; }
    private static double xformInvY(double y) { return y / scale + offsetY; }
    public static Point xform(Point p) {
        return new Point(xformX(p.x()), xformY(p.y()));
    }
    public static Point xformInv(Point p) {
        return new Point(xformInvX(p.x()), xformInvY(p.y()));
    }


    public static void drawDot(double x, double y) {
        StdDraw.square(xformX(x) * 464 + 24, xformY(y) * 464 + 36, dotSize);
    }
    public static void drawDot(Point p) {
        drawDot(p.x(), p.y());
    }

    public static void drawLine(double x0, double y0, double x1, double y1) {
        StdDraw.line(
                xformX(x0) * 464 + 24, xformY(y0) * 464 + 36,
                xformX(x1) * 464 + 24, xformY(y1) * 464 + 36
        );
    }
    public static void drawLine(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p1.y());
    }

    public static void drawBox(Point p0, Point p1) {
        drawLine(p0.x(), p0.y(), p1.x(), p0.y());
        drawLine(p1.x(), p0.y(), p1.x(), p1.y());
        drawLine(p1.x(), p1.y(), p0.x(), p1.y());
        drawLine(p0.x(), p1.y(), p0.x(), p0.y());
    }

}

--[ 2022.11.22.08.02.36.883.3 ]--
InitFile: /P05_KDTrees.iml
<?xml version="1.0" encoding="UTF-8"?>
<module type="JAVA_MODULE" version="4">
  <component name="NewModuleRootManager" inherit-compiler-output="true">
    <exclude-output />
    <content url="file://$MODULE_DIR$">
      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
      <sourceFolder url="file://$MODULE_DIR$/tests" type="java-resource" />
    </content>
    <orderEntry type="inheritedJdk" />
    <orderEntry type="sourceFolder" forTests="false" />
    <orderEntry type="library" name="algs4" level="project" />
    <orderEntry type="library" name="stdlib" level="project" />
  </component>
</module>

--[ 2022.11.22.08.02.36.883.4 ]--
InitFile: /src/PointSearch.java
/**
 * This interface defines the basic API for a 2D symbol table
 * where the keys are Points and the values are the generic
 * type Value
 */
public interface PointSearch<Value> {
    boolean isEmpty();
    int size();

    Point min();
    Point max();

    void put(Point p, Value v);
    Iterable<Point> points();
    boolean contains(Point p);
    Value get(Point p);
    Value getNearest(Point p);

    Point nearest(Point p);
    Iterable<Point> nearest(Point p, int k);

    Iterable<Partition> partitions();
}

--[ 2022.11.22.10.05.34.828.0 ]--
:/src/PSKDTree.java
+ 79             
--[ 2022.11.22.10.05.36.089.0 ]--
r 79             i
--[ 2022.11.22.10.05.36.188.0 ]--
r 79             if
--[ 2022.11.22.10.05.36.477.0 ]--
r 79             if 
--[ 2022.11.22.10.05.36.930.0 ]--
r 79             if
--[ 2022.11.22.10.05.37.327.0 ]--
r 79             if()
--[ 2022.11.22.10.05.37.741.0 ]--
r 79             if(p)
--[ 2022.11.22.10.05.37.863.0 ]--
r 79             if(p )
--[ 2022.11.22.10.05.38.111.0 ]--
r 79             if(p n)
--[ 2022.11.22.10.05.38.298.0 ]--
r 79             if(p no)
--[ 2022.11.22.10.05.38.442.0 ]--
r 79             if(p not)
--[ 2022.11.22.10.05.38.535.0 ]--
r 79             if(p not )
--[ 2022.11.22.10.05.38.659.0 ]--
r 79             if(p not i)
--[ 2022.11.22.10.05.38.879.0 ]--
r 79             if(p not in)
--[ 2022.11.22.10.05.39.002.0 ]--
r 79             if(p not in )
--[ 2022.11.22.10.05.40.923.0 ]--
r 79             if(p not in p)
--[ 2022.11.22.10.05.41.030.0 ]--
r 79             if(p not in ps)
--[ 2022.11.22.10.05.49.130.0 ]--
r 79             /
--[ 2022.11.22.10.05.49.241.0 ]--
r 79             //
--[ 2022.11.22.10.05.51.003.0 ]--
r 79             //a
--[ 2022.11.22.10.05.51.211.0 ]--
r 79             //ad
--[ 2022.11.22.10.05.51.354.0 ]--
r 79             //add
--[ 2022.11.22.10.05.51.548.0 ]--
r 79             //add 
--[ 2022.11.22.10.05.53.643.0 ]--
r 79             //add p
--[ 2022.11.22.10.05.54.065.0 ]--
r 79             //add p 
--[ 2022.11.22.10.05.54.315.0 ]--
r 79             //add p t
--[ 2022.11.22.10.05.54.378.0 ]--
r 79             //add p to
--[ 2022.11.22.10.05.54.500.0 ]--
r 79             //add p to 
--[ 2022.11.22.10.05.54.654.0 ]--
r 79             //add p to p
--[ 2022.11.22.10.05.54.749.0 ]--
r 79             //add p to ps
--[ 2022.11.22.10.05.54.917.0 ]--
r 79             //add p to ps 
--[ 2022.11.22.10.05.55.132.0 ]--
r 79             //add p to ps o
--[ 2022.11.22.10.05.55.292.0 ]--
r 79             //add p to ps on
--[ 2022.11.22.10.05.55.479.0 ]--
r 79             //add p to ps onl
--[ 2022.11.22.10.05.55.737.0 ]--
r 79             //add p to ps only
--[ 2022.11.22.10.05.55.877.0 ]--
r 79             //add p to ps only 
--[ 2022.11.22.10.05.56.267.0 ]--
r 79             //add p to ps only i
--[ 2022.11.22.10.05.56.392.0 ]--
r 79             //add p to ps only if
--[ 2022.11.22.10.05.56.551.0 ]--
r 79             //add p to ps only if 
--[ 2022.11.22.10.05.56.874.0 ]--
r 79             //add p to ps only if i
--[ 2022.11.22.10.05.57.005.0 ]--
r 79             //add p to ps only if it
--[ 2022.11.22.10.05.57.197.0 ]--
r 79             //add p to ps only if it'
--[ 2022.11.22.10.05.57.310.0 ]--
r 79             //add p to ps only if it's
--[ 2022.11.22.10.05.57.429.0 ]--
r 79             //add p to ps only if it's 
--[ 2022.11.22.10.05.57.589.0 ]--
r 79             //add p to ps only if it's n
--[ 2022.11.22.10.05.57.752.0 ]--
r 79             //add p to ps only if it's no
--[ 2022.11.22.10.05.57.940.0 ]--
r 79             //add p to ps only if it's not
--[ 2022.11.22.10.05.58.066.0 ]--
r 79             //add p to ps only if it's not 
--[ 2022.11.22.10.05.58.222.0 ]--
r 79             //add p to ps only if it's not a
--[ 2022.11.22.10.05.58.347.0 ]--
r 79             //add p to ps only if it's not al
--[ 2022.11.22.10.05.58.487.0 ]--
r 79             //add p to ps only if it's not alr
--[ 2022.11.22.10.05.58.890.0 ]--
r 79             //add p to ps only if it's not alre
--[ 2022.11.22.10.05.59.153.0 ]--
r 79             //add p to ps only if it's not alrea
--[ 2022.11.22.10.05.59.307.0 ]--
r 79             //add p to ps only if it's not alread
--[ 2022.11.22.10.05.59.484.0 ]--
r 79             //add p to ps only if it's not already
--[ 2022.11.22.10.05.59.616.0 ]--
r 79             //add p to ps only if it's not already 
--[ 2022.11.22.10.05.59.771.0 ]--
r 79             //add p to ps only if it's not already i
--[ 2022.11.22.10.05.59.970.0 ]--
r 79             //add p to ps only if it's not already in
--[ 2022.11.22.10.06.00.091.0 ]--
r 79             //add p to ps only if it's not already in 
--[ 2022.11.22.10.06.00.221.0 ]--
r 79             //add p to ps only if it's not already in t
--[ 2022.11.22.10.06.00.314.0 ]--
r 79             //add p to ps only if it's not already in th
--[ 2022.11.22.10.06.00.403.0 ]--
r 79             //add p to ps only if it's not already in the
--[ 2022.11.22.10.06.00.569.0 ]--
r 79             //add p to ps only if it's not already in the 
--[ 2022.11.22.10.06.01.800.0 ]--
r 79             //add p to ps only if it's not already in the s
--[ 2022.11.22.10.06.01.980.0 ]--
r 79             //add p to ps only if it's not already in the st
--[ 2022.11.22.10.06.02.105.0 ]--
r 79             //add p to ps only if it's not already in the sta
--[ 2022.11.22.10.06.02.320.0 ]--
r 79             //add p to ps only if it's not already in the stac
--[ 2022.11.22.10.06.02.425.0 ]--
r 79             //add p to ps only if it's not already in the stack
--[ 2022.11.22.10.06.02.794.0 ]--
r 79             //add p to ps only if it's not already in the stack?
